<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend/app/Exceptions/Handler.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/app/Exceptions/Handler.php" />
              <option name="originalContent" value="&lt;?php&#10;&#10;namespace App\Exceptions;&#10;&#10;use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;&#10;use Throwable;&#10;&#10;class Handler extends ExceptionHandler&#10;{&#10;    /**&#10;     * The list of the inputs that are never flashed to the session on validation exceptions.&#10;     *&#10;     * @var array&lt;int, string&gt;&#10;     */&#10;    protected $dontFlash = [&#10;        'current_password',&#10;        'password',&#10;        'password_confirmation',&#10;    ];&#10;&#10;    /**&#10;     * Register the exception handling callbacks for the application.&#10;     */&#10;    public function register(): void&#10;    {&#10;        $this-&gt;reportable(function (Throwable $e) {&#10;            //&#10;        });&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;namespace App\Exceptions;&#10;&#10;use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;&#10;use Throwable;&#10;&#10;class Handler extends ExceptionHandler&#10;{&#10;    /**&#10;     * The list of the inputs that are never flashed to the session on validation exceptions.&#10;     *&#10;     * @var array&lt;int, string&gt;&#10;     */&#10;    protected $dontFlash = [&#10;        'current_password',&#10;        'password',&#10;        'password_confirmation',&#10;    ];&#10;&#10;    /**&#10;     * Register the exception handling callbacks for the application.&#10;     */&#10;    public function register(): void&#10;    {&#10;        $this-&gt;reportable(function (Throwable $e) {&#10;            //&#10;        });&#10;    }&#10;&#10;    protected function unauthenticated($request, \Illuminate\Auth\AuthenticationException $exception)&#10;    {&#10;        if ($request-&gt;expectsJson()) {&#10;            return response()-&gt;json(['error' =&gt; 'Unauthenticated'], 401);&#10;        }&#10;        // Pour une API, on ne redirige pas vers une route 'login'&#10;        return response()-&gt;json(['error' =&gt; 'Unauthenticated'], 401);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/app/Http/Controllers/UserController.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/app/Http/Controllers/UserController.php" />
              <option name="updatedContent" value="&lt;?php&#10;namespace App\Http\Controllers;&#10;&#10;use Illuminate\Http\Request;&#10;use Illuminate\Support\Facades\Auth;&#10;use Illuminate\Support\Facades\Storage;&#10;use App\Models\User;&#10;use Illuminate\Support\Str;&#10;&#10;class UserController extends Controller&#10;{&#10;    public function updateAvatar(Request $request)&#10;    {&#10;        $request-&gt;validate([&#10;            'avatar' =&gt; 'required|image|mimes:jpeg,png,jpg,gif|max:2048',&#10;        ]);&#10;&#10;        $user = Auth::user();&#10;        if (!$user) {&#10;            return response()-&gt;json(['error' =&gt; 'Non authentifié'], 401);&#10;        }&#10;&#10;        $file = $request-&gt;file('avatar');&#10;        $filename = $user-&gt;id . '_' . time() . '.' . $file-&gt;getClientOriginalExtension();&#10;        $path = $file-&gt;storeAs('public/avatar', $filename);&#10;&#10;        // Supprimer l'ancien avatar si ce n'est pas user.jpg&#10;        if ($user-&gt;user_profile_picture &amp;&amp; $user-&gt;user_profile_picture !== 'user.jpg') {&#10;            Storage::delete('public/avatar/' . $user-&gt;user_profile_picture);&#10;        }&#10;&#10;        $user-&gt;user_profile_picture = $filename;&#10;        $user-&gt;save();&#10;&#10;        return response()-&gt;json([&#10;            'success' =&gt; true,&#10;            'avatar_url' =&gt; asset('storage/avatar/' . $filename)&#10;        ]);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/app/Models/User.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/app/Models/User.php" />
              <option name="originalContent" value="&lt;?php&#10;&#10;namespace App\Models;&#10;&#10;// use Illuminate\Contracts\Auth\MustVerifyEmail;&#10;use Illuminate\Database\Eloquent\Factories\HasFactory;&#10;use Illuminate\Foundation\Auth\User as Authenticatable;&#10;use Illuminate\Notifications\Notifiable;&#10;use Laravel\Sanctum\HasApiTokens;&#10;&#10;class User extends Authenticatable&#10;{&#10;    use HasApiTokens, HasFactory, Notifiable;&#10;&#10;    /**&#10;     * The attributes that are mass assignable.&#10;     *&#10;     * @var array&lt;int, string&gt;&#10;     */&#10;&#10;    protected $fillable = ['username', 'email', 'password'];&#10;&#10;    /**&#10;     * The attributes that should be hidden for serialization.&#10;     *&#10;     * @var array&lt;int, string&gt;&#10;     */&#10;    protected $hidden = [&#10;        'password',&#10;        'remember_token',&#10;    ];&#10;&#10;    /**&#10;     * The attributes that should be cast.&#10;     *&#10;     * @var array&lt;string, string&gt;&#10;     */&#10;    protected $casts = [&#10;        'email_verified_at' =&gt; 'datetime',&#10;        'password' =&gt; 'hashed',&#10;    ];&#10;}&#10;" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;namespace App\Models;&#10;&#10;// use Illuminate\Contracts\Auth\MustVerifyEmail;&#10;use Illuminate\Database\Eloquent\Factories\HasFactory;&#10;use Illuminate\Foundation\Auth\User as Authenticatable;&#10;use Illuminate\Notifications\Notifiable;&#10;use Laravel\Sanctum\HasApiTokens;&#10;&#10;class User extends Authenticatable&#10;{&#10;    use HasApiTokens, HasFactory, Notifiable;&#10;&#10;    /**&#10;     * The attributes that are mass assignable.&#10;     *&#10;     * @var array&lt;int, string&gt;&#10;     */&#10;&#10;    protected $fillable = [&#10;        'username',&#10;        'email',&#10;        'password',&#10;        'user_profile_picture',&#10;        // ...autres champs si besoin&#10;    ];&#10;&#10;    /**&#10;     * The attributes that should be hidden for serialization.&#10;     *&#10;     * @var array&lt;int, string&gt;&#10;     */&#10;    protected $hidden = [&#10;        'password',&#10;        'remember_token',&#10;    ];&#10;&#10;    /**&#10;     * The attributes that should be cast.&#10;     *&#10;     * @var array&lt;string, string&gt;&#10;     */&#10;    protected $casts = [&#10;        'email_verified_at' =&gt; 'datetime',&#10;        'password' =&gt; 'hashed',&#10;    ];&#10;&#10;    public function getAvatarUrl()&#10;    {&#10;        return $this-&gt;user_profile_picture&#10;            ? asset('storage/avatar/' . $this-&gt;user_profile_picture)&#10;            : asset('storage/avatar/user.jpg');&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/routes/api.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/routes/api.php" />
              <option name="originalContent" value="&lt;?php&#10;&#10;use App\Http\Controllers\BetController;&#10;use App\Http\Controllers\EventController;&#10;use App\Http\Controllers\AuthController;&#10;use App\Http\Controllers\TransactionController;&#10;use App\Http\Controllers\TeamLogoController;&#10;use App\Http\Controllers\SportController;&#10;use App\Http\Controllers\CountryController;&#10;use Illuminate\Http\Request;&#10;use Illuminate\Support\Facades\Route;&#10;&#10;/*&#10;|--------------------------------------------------------------------------&#10;| API Routes&#10;|--------------------------------------------------------------------------&#10;|&#10;| Here is where you can register API routes for your application. These&#10;| routes are loaded by the RouteServiceProvider and all of them will&#10;| be assigned to the &quot;api&quot; middleware group. Make something great!&#10;|&#10;*/&#10;&#10;// Route de test simple (sans authentification)&#10;Route::get('/test', function () {&#10;    return response()-&gt;json([&#10;        'success' =&gt; true,&#10;        'message' =&gt; 'API fonctionne correctement'&#10;    ]);&#10;});&#10;&#10;// Routes d'authentification (sans middleware pour le dev)&#10;Route::post('/register', [AuthController::class, 'register']);&#10;Route::post('/login', [AuthController::class, 'login']);&#10;Route::post('/logout', [AuthController::class, 'logout']);&#10;&#10;// Routes des paris (sans authentification temporairement)&#10;Route::get('/bets/stats', [BetController::class, 'stats']);&#10;Route::get('/bets/detailed-stats', [BetController::class, 'detailedStats']);&#10;Route::get('/bets/capital-evolution', [BetController::class, 'capitalEvolution']);&#10;Route::get('/bets/filter-options', [BetController::class, 'filterOptions']);&#10;Route::apiResource('bets', BetController::class);&#10;&#10;// Routes des transactions&#10;Route::get('/transactions/stats', [TransactionController::class, 'stats']);&#10;Route::apiResource('transactions', TransactionController::class);&#10;&#10;// Routes CRUD pour les événements (sans authentification temporairement)&#10;Route::apiResource('events', EventController::class);&#10;&#10;// Routes pour les pays&#10;Route::get('/countries', [CountryController::class, 'index']);&#10;Route::get('/countries/search', [CountryController::class, 'search']);&#10;&#10;// Routes pour les sports, ligues et équipes&#10;Route::get('/sports', [SportController::class, 'index']);&#10;Route::get('/sports/{sportId}/leagues', [SportController::class, 'getLeagues']);&#10;Route::get('/sports/{sportId}/leagues/search', [SportController::class, 'searchLeaguesBySport']);&#10;Route::get('/sports/{sportId}/teams', [SportController::class, 'getTeamsBySport']);&#10;Route::get('/sports/{sportId}/teams/search', [SportController::class, 'searchTeamsBySport']);&#10;Route::get('/leagues/{leagueId}/teams', [SportController::class, 'getTeams']);&#10;&#10;// Routes pour la gestion des logos d'équipes&#10;Route::prefix('teams')-&gt;group(function () {&#10;    Route::get('/logos/status', [TeamLogoController::class, 'checkStatus']);&#10;    Route::post('/logos/download-all', [TeamLogoController::class, 'downloadAllMissing']);&#10;    Route::get('/{teamId}/logo/download', [TeamLogoController::class, 'downloadLogo']);&#10;});&#10;&#10;// Routes protégées (commentées temporairement pour le dev)&#10;/*&#10;Route::middleware('auth:sanctum')-&gt;group(function () {&#10;    Route::middleware('auth:sanctum')-&gt;get('/user', function (Request $request) {&#10;        return $request-&gt;user();&#10;    });&#10;&#10;    // Routes CRUD pour les paris&#10;    Route::apiResource('bets', BetController::class);&#10;&#10;    // Routes spécialisées pour les paris&#10;    Route::get('/bets/stats', [BetController::class, 'stats']);&#10;    Route::get('/bets/capital-evolution', [BetController::class, 'capitalEvolution']);&#10;    Route::get('/bets/filter-options', [BetController::class, 'filterOptions']);&#10;&#10;    // Routes CRUD pour les événements&#10;    Route::apiResource('events', EventController::class);&#10;});&#10;*/&#10;" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;use App\Http\Controllers\BetController;&#10;use App\Http\Controllers\EventController;&#10;use App\Http\Controllers\AuthController;&#10;use App\Http\Controllers\TransactionController;&#10;use App\Http\Controllers\TeamLogoController;&#10;use App\Http\Controllers\SportController;&#10;use App\Http\Controllers\CountryController;&#10;use App\Http\Controllers\UserController;&#10;use Illuminate\Http\Request;&#10;use Illuminate\Support\Facades\Route;&#10;&#10;/*&#10;|--------------------------------------------------------------------------&#10;| API Routes&#10;|--------------------------------------------------------------------------&#10;|&#10;| Here is where you can register API routes for your application. These&#10;| routes are loaded by the RouteServiceProvider and all of them will&#10;| be assigned to the &quot;api&quot; middleware group. Make something great!&#10;|&#10;*/&#10;&#10;// Route de test simple (sans authentification)&#10;Route::get('/test', function () {&#10;    return response()-&gt;json([&#10;        'success' =&gt; true,&#10;        'message' =&gt; 'API fonctionne correctement'&#10;    ]);&#10;});&#10;&#10;// Routes d'authentification (sans middleware pour le dev)&#10;Route::post('/register', [AuthController::class, 'register']);&#10;Route::post('/login', [AuthController::class, 'login']);&#10;Route::post('/logout', [AuthController::class, 'logout']);&#10;&#10;// Routes des paris (sans authentification temporairement)&#10;Route::get('/bets/stats', [BetController::class, 'stats']);&#10;Route::get('/bets/detailed-stats', [BetController::class, 'detailedStats']);&#10;Route::get('/bets/capital-evolution', [BetController::class, 'capitalEvolution']);&#10;Route::get('/bets/filter-options', [BetController::class, 'filterOptions']);&#10;Route::apiResource('bets', BetController::class);&#10;&#10;// Routes des transactions&#10;Route::get('/transactions/stats', [TransactionController::class, 'stats']);&#10;Route::apiResource('transactions', TransactionController::class);&#10;&#10;// Routes CRUD pour les événements (sans authentification temporairement)&#10;Route::apiResource('events', EventController::class);&#10;&#10;// Routes pour les pays&#10;Route::get('/countries', [CountryController::class, 'index']);&#10;Route::get('/countries/search', [CountryController::class, 'search']);&#10;&#10;// Routes pour les sports, ligues et équipes&#10;Route::get('/sports', [SportController::class, 'index']);&#10;Route::get('/sports/{sportId}/leagues', [SportController::class, 'getLeagues']);&#10;Route::get('/sports/{sportId}/leagues/search', [SportController::class, 'searchLeaguesBySport']);&#10;Route::get('/sports/{sportId}/teams', [SportController::class, 'getTeamsBySport']);&#10;Route::get('/sports/{sportId}/teams/search', [SportController::class, 'searchTeamsBySport']);&#10;Route::get('/leagues/{leagueId}/teams', [SportController::class, 'getTeams']);&#10;&#10;// Routes pour la gestion des logos d'équipes&#10;Route::prefix('teams')-&gt;group(function () {&#10;    Route::get('/logos/status', [TeamLogoController::class, 'checkStatus']);&#10;    Route::post('/logos/download-all', [TeamLogoController::class, 'downloadAllMissing']);&#10;    Route::get('/{teamId}/logo/download', [TeamLogoController::class, 'downloadLogo']);&#10;});&#10;&#10;// Routes protégées (commentées temporairement pour le dev)&#10;/*&#10;Route::middleware('auth:sanctum')-&gt;group(function () {&#10;    Route::middleware('auth:sanctum')-&gt;get('/user', function (Request $request) {&#10;        return $request-&gt;user();&#10;    });&#10;&#10;    // Routes CRUD pour les paris&#10;    Route::apiResource('bets', BetController::class);&#10;&#10;    // Routes spécialisées pour les paris&#10;    Route::get('/bets/stats', [BetController::class, 'stats']);&#10;    Route::get('/bets/capital-evolution', [BetController::class, 'capitalEvolution']);&#10;    Route::get('/bets/filter-options', [BetController::class, 'filterOptions']);&#10;&#10;    // Routes CRUD pour les événements&#10;    Route::apiResource('events', EventController::class);&#10;});&#10;*/&#10;&#10;Route::middleware('auth:sanctum')-&gt;post('/user/avatar', [UserController::class, 'updateAvatar']);&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/add-bet/AddBetForm.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/add-bet/AddBetForm.vue" />
              <option name="originalContent" value="&lt;template&gt;&#10;  &lt;div class=&quot;container mx-auto p-6 max-w-4xl&quot;&gt;&#10;    &lt;h1 class=&quot;text-2xl font-bold mb-6 text-gray-800&quot;&gt;&#10;      {{ events.length &gt; 1 ? 'Ajouter un pari combiné' : 'Ajouter un pari simple' }}&#10;    &lt;/h1&gt;&#10;    &lt;form @submit.prevent=&quot;submitForm&quot; class=&quot;space-y-4 mb-4&quot;&gt;&#10;      &lt;!-- Date du pari --&gt;&#10;      &lt;div class=&quot;flex flex-col gap-2&quot;&gt;&#10;        &lt;DatePicker &#10;          id=&quot;bet_date&quot; &#10;          v-model=&quot;formData.bet_date&quot; &#10;          dateFormat=&quot;dd/mm/yy&quot; &#10;          :showIcon=&quot;true&quot; &#10;          placeholder=&quot;Date du pari *&quot;&#10;          class=&quot;w-full&quot;&#10;          :class=&quot;{ 'p-invalid': errors.bet_date }&quot;&#10;        /&gt;&#10;        &lt;small v-if=&quot;errors.bet_date&quot; class=&quot;text-red-500 block mt-1&quot;&gt;{{ errors.bet_date }}&lt;/small&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Cards Événements --&gt;&#10;      &lt;div v-for=&quot;(eventData, eventIndex) in eventCards&quot; :key=&quot;eventData.id&quot; class=&quot;border rounded-lg p-4 bg-gray-50 mb-4&quot;&gt;&#10;        &lt;div class=&quot;flex justify-between items-center mb-4&quot;&gt;&#10;          &lt;h3 class=&quot;text-lg font-semibold text-gray-800&quot;&gt;Événement {{ eventIndex + 1 }}&lt;/h3&gt;&#10;          &lt;Button &#10;            v-if=&quot;eventCards.length &gt; 1&quot;&#10;            icon=&quot;pi pi-times&quot; &#10;            class=&quot;p-button-text p-button-sm text-red-500&quot;&#10;            @click=&quot;removeEventCard(eventIndex)&quot;&#10;            aria-label=&quot;Supprimer cet événement&quot;&#10;          /&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;!-- Sport --&gt;&#10;        &lt;div class=&quot;flex flex-col gap-2 mb-4&quot;&gt;&#10;          &lt;div class=&quot;relative&quot;&gt;&#10;            &lt;AutoComplete &#10;              :id=&quot;`sport_${eventIndex}`&quot; &#10;              v-model=&quot;eventData.selectedSport&quot; &#10;              :suggestions=&quot;eventData.sportSearchResults || []&quot; &#10;              @complete=&quot;(event) =&gt; searchSports(event, eventIndex)&quot;&#10;              @item-select=&quot;(event) =&gt; onSportSelect(event, eventIndex)&quot;&#10;              @dropdown-click=&quot;() =&gt; onSportDropdownShow(eventIndex)&quot;&#10;              optionLabel=&quot;name&quot;&#10;              :placeholder=&quot;eventData.selectedSport &amp;&amp; eventData.selectedSport.length &gt; 0 ? '' : 'Sport'&quot;&#10;              class=&quot;w-full max-w-full select-custom&quot;&#10;              :class=&quot;{ 'p-invalid': errors[`sport_id_${eventIndex}`] }&quot;&#10;              :loading=&quot;eventData.sportLoading&quot;&#10;              panelClass=&quot;select-panel-custom&quot;&#10;              @focus=&quot;() =&gt; searchSports({ query: '' }, eventIndex)&quot;&#10;              :minLength=&quot;0&quot;&#10;              selectionLimit=&quot;1&quot;&#10;              dropdown&#10;              dropdownMode=&quot;blank&quot;&#10;              multiple&#10;              display=&quot;chip&quot;&#10;              aria-label=&quot;Rechercher et sélectionner un sport&quot;&#10;              role=&quot;combobox&quot;&#10;              aria-expanded=&quot;false&quot;&#10;              aria-autocomplete=&quot;list&quot;&#10;            &gt;&#10;              &lt;!-- Template pour afficher le sport sélectionné --&gt;&#10;              &lt;template #chip=&quot;slotProps&quot;&gt;&#10;                &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#10;                  &lt;!-- Icône du sport sélectionné --&gt;&#10;                  &lt;img&#10;                    v-if=&quot;slotProps.value &amp;&amp; slotProps.value.img&quot;&#10;                    :src=&quot;`${apiBaseUrl}/storage/sport_icons/${slotProps.value.img.replace('.png', '.svg')}`&quot;&#10;                    :alt=&quot;slotProps.value.name&quot;&#10;                    class=&quot;w-4 h-4 object-contain filter brightness-0&quot;&#10;                    @error=&quot;$event.target.style.display='none'&quot;&#10;                  /&gt;&#10;                  &lt;div &#10;                    v-else-if=&quot;slotProps.value&quot;&#10;                    class=&quot;w-4 h-4 bg-gray-300 rounded-full flex items-center justify-center text-xs text-gray-600&quot;&#10;                  &gt;&#10;                    {{ slotProps.value.name ? slotProps.value.name.charAt(0).toUpperCase() : '?' }}&#10;                  &lt;/div&gt;&#10;                  &lt;!-- Nom du sport sélectionné --&gt;&#10;                  &lt;span&gt;{{ slotProps.value ? slotProps.value.name : '' }}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/template&gt;&#10;              &#10;              &lt;!-- Template pour les options du dropdown --&gt;&#10;              &lt;template #option=&quot;slotProps&quot;&gt;&#10;                &lt;div class=&quot;flex items-center gap-2 truncate max-w-full&quot; :title=&quot;slotProps.option.name&quot;&gt;&#10;                  &lt;!-- Icône du sport --&gt;&#10;                  &lt;img&#10;                    v-if=&quot;slotProps.option.img&quot;&#10;                    :src=&quot;`${apiBaseUrl}/storage/sport_icons/${slotProps.option.img.replace('.png', '.svg')}`&quot;&#10;                    :alt=&quot;slotProps.option.name&quot;&#10;                    class=&quot;w-5 h-5 object-contain flex-shrink-0 filter brightness-0&quot;&#10;                    @error=&quot;$event.target.style.display='none'&quot;&#10;                  /&gt;&#10;                  &lt;div &#10;                    v-else&#10;                    class=&quot;w-5 h-5 bg-gray-300 rounded-full flex items-center justify-center text-xs text-gray-600 flex-shrink-0&quot;&#10;                  &gt;&#10;                    {{ slotProps.option.name ? slotProps.option.name.charAt(0).toUpperCase() : '?' }}&#10;                  &lt;/div&gt;&#10;                  &lt;!-- Nom du sport --&gt;&#10;                  &lt;span class=&quot;truncate&quot;&gt;{{ slotProps.option.name }}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/template&gt;&#10;            &lt;/AutoComplete&gt;&#10;          &lt;/div&gt;&#10;          &lt;small v-if=&quot;errors[`sport_id_${eventIndex}`]&quot; class=&quot;text-red-500 block mt-1&quot;&gt;{{ errors[`sport_id_${eventIndex}`] }}&lt;/small&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Champs conditionnels selon le sport --&gt;&#10;        &lt;div v-if=&quot;eventData.sport_id&quot; class=&quot;space-y-4 mb-4&quot;&gt;&#10;          &lt;!-- Pays --&gt;&#10;          &lt;div class=&quot;flex flex-col gap-2&quot;&gt;&#10;            &lt;div class=&quot;relative&quot;&gt;&#10;              &lt;AutoComplete &#10;                :id=&quot;`country_${eventIndex}`&quot; &#10;                v-model=&quot;eventData.selectedCountry&quot; &#10;                :suggestions=&quot;eventData.countryFilteredResults || []&quot; &#10;                @complete=&quot;(event) =&gt; searchCountries(event, eventIndex)&quot;&#10;                @item-select=&quot;(event) =&gt; onCountrySelect(event, eventIndex)&quot;&#10;                optionLabel=&quot;name&quot;&#10;                :placeholder=&quot;eventData.selectedCountry &amp;&amp; eventData.selectedCountry.length &gt; 0 ? '' : 'Pays'&quot;&#10;                class=&quot;w-full max-w-full select-custom&quot;&#10;                :class=&quot;{ 'p-invalid': errors[`country_id_${eventIndex}`] }&quot;&#10;                :minLength=&quot;0&quot;&#10;                dropdown&#10;                dropdownMode=&quot;blank&quot;&#10;                multiple&#10;                display=&quot;chip&quot;&#10;                aria-label=&quot;Rechercher et sélectionner un pays&quot;&#10;                role=&quot;combobox&quot;&#10;                aria-expanded=&quot;false&quot;&#10;                aria-autocomplete=&quot;list&quot;&#10;            &gt;&#10;                &lt;!-- Template pour afficher le pays sélectionné avec son drapeau --&gt;&#10;                &lt;template #chip=&quot;slotProps&quot;&gt;&#10;                  &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#10;                    &lt;!-- Drapeau du pays sélectionné --&gt;&#10;                    &lt;img &#10;                      v-if=&quot;slotProps.value &amp;&amp; slotProps.value.id&quot;&#10;                      :src=&quot;`${apiBaseUrl}/storage/country_flags/${slotProps.value.id}.png`&quot; &#10;                      :alt=&quot;slotProps.value.name&quot;&#10;                      class=&quot;w-4 h-4 rounded object-cover flex-shrink-0&quot; &#10;                      @error=&quot;$event.target.style.display='none'&quot;&#10;                    /&gt;&#10;                    &lt;!-- Nom du pays sélectionné --&gt;&#10;                    &lt;span&gt;{{ slotProps.value ? slotProps.value.name : '' }}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/template&gt;&#10;                &#10;                &lt;!-- Template pour les options du dropdown --&gt;&#10;                &lt;template #option=&quot;slotProps&quot;&gt;&#10;                  &lt;div class=&quot;flex items-center gap-2 truncate max-w-full&quot; :title=&quot;slotProps.option.name&quot;&gt;&#10;                    &lt;!-- Drapeau du pays --&gt;&#10;                    &lt;img &#10;                      v-if=&quot;slotProps.option.id&quot;&#10;                      :src=&quot;`${apiBaseUrl}/storage/country_flags/${slotProps.option.id}.png`&quot; &#10;                      :alt=&quot;slotProps.option.name&quot;&#10;                      class=&quot;w-4 h-4 rounded object-cover flex-shrink-0&quot; &#10;                      @error=&quot;$event.target.style.display='none'&quot;&#10;                    /&gt;&#10;                    &lt;!-- Nom du pays --&gt;&#10;                    &lt;span class=&quot;truncate&quot;&gt;{{ slotProps.option.name }}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/template&gt;&#10;&#10;              &lt;/AutoComplete&gt;&#10;            &lt;/div&gt;&#10;            &lt;small v-if=&quot;errors.country_id&quot; class=&quot;text-red-500 block mt-1&quot;&gt;{{ errors.country_id }}&lt;/small&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;!-- Ligue --&gt;&#10;          &lt;div class=&quot;flex flex-col gap-2&quot;&gt;&#10;            &lt;div class=&quot;relative&quot;&gt;&#10;              &lt;AutoComplete &#10;                :id=&quot;`league-${eventIndex}`&quot; &#10;                v-model=&quot;eventData.selectedLeague&quot; &#10;                :suggestions=&quot;eventData.leagueSearchResults&quot; &#10;                @complete=&quot;(event) =&gt; searchLeagues(event, eventIndex)&quot;&#10;                @item-select=&quot;(event) =&gt; onLeagueSelect(event, eventIndex)&quot;&#10;                optionLabel=&quot;name&quot;&#10;                :placeholder=&quot;eventData.selectedLeague &amp;&amp; eventData.selectedLeague.length &gt; 0 ? '' : 'Ligue'&quot;&#10;                class=&quot;w-full max-w-full select-custom&quot;&#10;                :class=&quot;{ 'p-invalid': errors[`league-${eventIndex}`] }&quot;&#10;                :loading=&quot;eventData.leagueLoading&quot;&#10;                :disabled=&quot;!eventData.sport_id&quot;&#10;                panelClass=&quot;select-panel-custom&quot;&#10;                @show=&quot;() =&gt; onLeagueDropdownShow(eventIndex)&quot;&#10;                @focus=&quot;() =&gt; searchLeagues({ query: '' }, eventIndex)&quot;&#10;                :minLength=&quot;0&quot;&#10;                dropdown&#10;                dropdownMode=&quot;blank&quot;&#10;                multiple&#10;                display=&quot;chip&quot;&#10;                aria-label=&quot;Rechercher et sélectionner une ligue&quot;&#10;                role=&quot;combobox&quot;&#10;                aria-expanded=&quot;false&quot;&#10;                aria-autocomplete=&quot;list&quot;&#10;              &gt;&#10;                &lt;!-- Template pour afficher la ligue sélectionnée avec son logo --&gt;&#10;                 &lt;template #chip=&quot;slotProps&quot;&gt;&#10;                   &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#10;                     &#10;                     &lt;!-- Logo de la ligue --&gt;&#10;                     &lt;img &#10;                       v-if=&quot;slotProps.value.id&quot;&#10;                       :src=&quot;`${apiBaseUrl}/storage/league_logos/${slotProps.value.id}.png`&quot; &#10;                       :alt=&quot;slotProps.value.name&quot;&#10;                       class=&quot;w-4 h-4 rounded object-cover flex-shrink-0&quot; &#10;                       @error=&quot;$event.target.style.display='none'&quot;&#10;                     /&gt;&#10;                     &lt;!-- Nom de la ligue --&gt;&#10;                     &lt;span&gt;{{ slotProps.value ? slotProps.value.name : '' }}&lt;/span&gt;&#10;                   &lt;/div&gt;&#10;                 &lt;/template&gt;&#10;                &lt;template #option=&quot;slotProps&quot;&gt;&#10;                  &lt;div class=&quot;flex items-center gap-2 truncate max-w-full&quot; :title=&quot;slotProps.option.name&quot;&gt;&#10;                    &lt;!-- Drapeau du pays --&gt;&#10;                    &lt;img &#10;                       v-if=&quot;slotProps.option.country_id&quot;&#10;                       :src=&quot;`${apiBaseUrl}/storage/country_flags/${slotProps.option.country_id}.png`&quot; &#10;                       :alt=&quot;slotProps.option.country?.name || 'Pays'&quot;&#10;                       class=&quot;w-4 h-4 rounded object-cover flex-shrink-0&quot; &#10;                       @error=&quot;$event.target.style.display='none'&quot;&#10;                     /&gt;&#10;                    &lt;!-- Logo de la ligue --&gt;&#10;                    &lt;img &#10;                      v-if=&quot;slotProps.option.img&quot;&#10;                      :src=&quot;`${apiBaseUrl}/storage/${slotProps.option.img}`&quot; &#10;                      :alt=&quot;slotProps.option.name&quot;&#10;                      class=&quot;w-4 h-4 rounded object-cover flex-shrink-0&quot; &#10;                      @error=&quot;$event.target.style.display='none'&quot;&#10;                    /&gt;&#10;                    &lt;!-- Nom de la ligue --&gt;&#10;                    &lt;span class=&quot;truncate&quot;&gt;{{ slotProps.option.name }}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/template&gt;&#10;                &#10;                &lt;template #footer v-if=&quot;leagueHasMore&quot;&gt;&#10;                  &lt;div class=&quot;flex justify-center items-center p-2&quot; v-if=&quot;leagueLoading&quot;&gt;&#10;                    &lt;i class=&quot;pi pi-spin pi-spinner&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div class=&quot;text-center p-2 text-sm text-gray-500&quot; v-else&gt;&#10;                    Faites défiler pour charger plus de résultats&#10;                  &lt;/div&gt;&#10;                &lt;/template&gt;&#10;              &lt;/AutoComplete&gt;&#10;            &lt;/div&gt;&#10;            &lt;small v-if=&quot;errors[`league-${eventIndex}`]&quot; class=&quot;text-red-500 block mt-1&quot;&gt;{{ errors[`league-${eventIndex}`] }}&lt;/small&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;!-- Équipes --&gt;&#10;          &lt;div class=&quot;space-y-4&quot;&gt;&#10;            &lt;!-- Équipe 1 --&gt;&#10;            &lt;div class=&quot;flex flex-col gap-2&quot;&gt;&#10;              &lt;div class=&quot;relative&quot;&gt;&#10;                &lt;AutoComplete &#10;                  :id=&quot;`team1-${eventIndex}`&quot; &#10;                  v-model=&quot;eventData.selectedTeam1&quot; &#10;                  :suggestions=&quot;eventData.team1SearchResults&quot; &#10;                  @complete=&quot;(event) =&gt; searchTeam1(event, eventIndex)&quot;&#10;                  @item-select=&quot;(event) =&gt; onTeam1Select(event, eventIndex)&quot;&#10;                  optionLabel=&quot;name&quot;&#10;                  :placeholder=&quot;eventData.selectedTeam1 &amp;&amp; eventData.selectedTeam1.length &gt; 0 ? '' : 'Équipe 1'&quot;&#10;                  class=&quot;w-full max-w-full select-custom&quot;&#10;                  :class=&quot;{ 'p-invalid': errors[`team1-${eventIndex}`] }&quot;&#10;                  :loading=&quot;eventData.team1Loading&quot;&#10;                  :disabled=&quot;!eventData.sport_id&quot;&#10;                  panelClass=&quot;select-panel-custom&quot;&#10;                  @show=&quot;() =&gt; onTeam1DropdownShow(eventIndex)&quot;&#10;                  @focus=&quot;() =&gt; searchTeam1({ query: '' }, eventIndex)&quot;&#10;                  :minLength=&quot;0&quot;&#10;                  dropdown&#10;                  dropdownMode=&quot;blank&quot;&#10;                  multiple&#10;                  display=&quot;chip&quot;&#10;                  aria-label=&quot;Rechercher et sélectionner l'équipe 1&quot;&#10;                  role=&quot;combobox&quot;&#10;                  aria-expanded=&quot;false&quot;&#10;                  aria-autocomplete=&quot;list&quot;&#10;                &gt;&#10;                  &lt;!-- Template pour afficher l'équipe 1 sélectionnée avec son logo --&gt;&#10;                   &lt;template #chip=&quot;slotProps&quot;&gt;&#10;                     &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#10;                       &lt;!-- Logo de l'équipe --&gt;&#10;                       &lt;img &#10;                         v-if=&quot;slotProps.value.id&quot;&#10;                         :src=&quot;`${apiBaseUrl}/storage/team_logos/${slotProps.value.id}.png`&quot; &#10;                         :alt=&quot;slotProps.value.name&quot;&#10;                         class=&quot;w-4 h-4 rounded object-cover flex-shrink-0&quot; &#10;                         @error=&quot;$event.target.style.display='none'&quot;&#10;                       /&gt;&#10;                       &lt;!-- Nom de l'équipe --&gt;&#10;                       &lt;span&gt;{{ slotProps.value ? slotProps.value.name : '' }}&lt;/span&gt;&#10;                     &lt;/div&gt;&#10;                   &lt;/template&gt;&#10;                  &lt;template #option=&quot;slotProps&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center gap-2 truncate max-w-full&quot; :title=&quot;slotProps.option.name&quot;&gt;&#10;                      &lt;!-- Logo de l'équipe --&gt;&#10;                      &lt;img &#10;                        v-if=&quot;slotProps.option.img&quot;&#10;                        :src=&quot;`${apiBaseUrl}/storage/${slotProps.option.img}`&quot; &#10;                        :alt=&quot;slotProps.option.name&quot;&#10;                        class=&quot;w-4 h-4 rounded object-cover flex-shrink-0&quot; &#10;                        @error=&quot;$event.target.style.display='none'&quot;&#10;                      /&gt;&#10;                      &lt;!-- Nom de l'équipe --&gt;&#10;                      &lt;span class=&quot;truncate&quot;&gt;{{ slotProps.option.name }}&lt;/span&gt;&#10;                      &lt;span v-if=&quot;slotProps.option.league_name&quot; class=&quot;text-sm text-gray-500 ml-2&quot;&gt;&#10;                        ({{ slotProps.option.league_name }})&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/template&gt;&#10;                  &#10;                  &lt;template #footer v-if=&quot;team1HasMore&quot;&gt;&#10;                    &lt;div class=&quot;flex justify-center items-center p-2&quot; v-if=&quot;team1Loading&quot;&gt;&#10;                      &lt;i class=&quot;pi pi-spin pi-spinner&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;text-center p-2 text-sm text-gray-500&quot; v-else&gt;&#10;                      Faites défiler pour charger plus de résultats&#10;                    &lt;/div&gt;&#10;                  &lt;/template&gt;&#10;                &lt;/AutoComplete&gt;&#10;              &lt;/div&gt;&#10;              &lt;small v-if=&quot;errors[`team1-${eventIndex}`]&quot; class=&quot;text-red-500 block mt-1&quot;&gt;{{ errors[`team1-${eventIndex}`] }}&lt;/small&gt;&#10;            &lt;/div&gt;&#10;            &#10;            &lt;!-- Équipe 2 --&gt;&#10;            &lt;div class=&quot;flex flex-col gap-2&quot;&gt;&#10;              &lt;div class=&quot;relative&quot;&gt;&#10;                  &lt;AutoComplete &#10;                    :id=&quot;`team2-${eventIndex}`&quot; &#10;                    v-model=&quot;eventData.selectedTeam2&quot; &#10;                    :suggestions=&quot;eventData.team2SearchResults&quot; &#10;                    @complete=&quot;(event) =&gt; searchTeam2(event, eventIndex)&quot;&#10;                    @item-select=&quot;(event) =&gt; onTeam2Select(event, eventIndex)&quot;&#10;                    optionLabel=&quot;name&quot;&#10;                    :placeholder=&quot;eventData.selectedTeam2 &amp;&amp; eventData.selectedTeam2.length &gt; 0 ? '' : 'Équipe 2'&quot;&#10;                    class=&quot;w-full max-w-full select-custom&quot;&#10;                    :class=&quot;{ 'p-invalid': errors[`team2-${eventIndex}`] }&quot;&#10;                    :loading=&quot;eventData.team2Loading&quot;&#10;                    :disabled=&quot;!eventData.sport_id&quot;&#10;                    panelClass=&quot;select-panel-custom&quot;&#10;                    @show=&quot;() =&gt; onTeam2DropdownShow(eventIndex)&quot;&#10;                    @focus=&quot;() =&gt; searchTeam2({ query: '' }, eventIndex)&quot;&#10;                    :minLength=&quot;0&quot;&#10;                    dropdown&#10;                    dropdownMode=&quot;blank&quot;&#10;                    multiple&#10;                    display=&quot;chip&quot;&#10;                    aria-label=&quot;Rechercher et sélectionner l'équipe 2&quot;&#10;                    role=&quot;combobox&quot;&#10;                    aria-expanded=&quot;false&quot;&#10;                    aria-autocomplete=&quot;list&quot;&#10;                  &gt;&#10;                    &lt;!-- Template pour afficher l'équipe 2 sélectionnée avec son logo --&gt;&#10;                     &lt;template #chip=&quot;slotProps&quot;&gt;&#10;                       &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#10;                         &lt;!-- Logo de l'équipe --&gt;&#10;                         &lt;img &#10;                           v-if=&quot;slotProps.value.id&quot;&#10;                           :src=&quot;`${apiBaseUrl}/storage/team_logos/${slotProps.value.id}.png`&quot; &#10;                           :alt=&quot;slotProps.value.name&quot;&#10;                           class=&quot;w-4 h-4 rounded object-cover flex-shrink-0&quot; &#10;                           @error=&quot;$event.target.style.display='none'&quot;&#10;                         /&gt;&#10;                         &lt;!-- Nom de l'équipe --&gt;&#10;                         &lt;span&gt;{{ slotProps.value ? slotProps.value.name : '' }}&lt;/span&gt;&#10;                       &lt;/div&gt;&#10;                     &lt;/template&gt;&#10;                    &lt;template #option=&quot;slotProps&quot;&gt;&#10;                      &lt;div class=&quot;flex items-center gap-2 truncate max-w-full&quot; :title=&quot;slotProps.option.name&quot;&gt;&#10;                        &lt;!-- Logo de l'équipe --&gt;&#10;                        &lt;img &#10;                          v-if=&quot;slotProps.option.img&quot;&#10;                          :src=&quot;`${apiBaseUrl}/storage/${slotProps.option.img}`&quot; &#10;                          :alt=&quot;slotProps.option.name&quot;&#10;                          class=&quot;w-4 h-4 rounded object-cover flex-shrink-0&quot; &#10;                          @error=&quot;$event.target.style.display='none'&quot;&#10;                        /&gt;&#10;                        &lt;!-- Nom de l'équipe --&gt;&#10;                        &lt;span class=&quot;truncate&quot;&gt;{{ slotProps.option.name }}&lt;/span&gt;&#10;                        &lt;span v-if=&quot;slotProps.option.league_name&quot; class=&quot;text-sm text-gray-500 ml-2&quot;&gt;&#10;                          ({{ slotProps.option.league_name }})&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/template&gt;&#10;                    &#10;                    &lt;template #footer v-if=&quot;team2HasMore&quot;&gt;&#10;                      &lt;div class=&quot;flex justify-center items-center p-2&quot; v-if=&quot;team2Loading&quot;&gt;&#10;                        &lt;i class=&quot;pi pi-spin pi-spinner&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div class=&quot;text-center p-2 text-sm text-gray-500&quot; v-else&gt;&#10;                        Faites défiler pour charger plus de résultats&#10;                      &lt;/div&gt;&#10;                    &lt;/template&gt;&#10;                  &lt;/AutoComplete&gt;&#10;                &lt;/div&gt;&#10;                &lt;small v-if=&quot;errors[`team2-${eventIndex}`]&quot; class=&quot;text-red-500 block mt-1&quot;&gt;{{ errors[`team2-${eventIndex}`] }}&lt;/small&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;!-- Description de l'événement --&gt;&#10;        &lt;div class=&quot;flex flex-col gap-2 mb-4&quot;&gt;&#10;          &lt;InputText &#10;            :id=&quot;`event_description_${eventIndex}`&quot; &#10;            v-model=&quot;eventData.description&quot; &#10;            placeholder=&quot;Description de l'événement *&quot;&#10;            class=&quot;w-full&quot;&#10;            :class=&quot;{ 'p-invalid': errors[`event_description-${eventIndex}`] }&quot;&#10;          /&gt;&#10;          &lt;small v-if=&quot;errors[`event_description-${eventIndex}`]&quot; class=&quot;text-red-500 block mt-1&quot;&gt;{{ errors[`event_description-${eventIndex}`] }}&lt;/small&gt;&#10;        &lt;/div&gt;&#10;&#10;            &lt;!-- Champs spécifiques à l'événement pour les paris combinés --&gt;&#10;            &lt;div v-if=&quot;events.length &gt; 0&quot; class=&quot;space-y-4&quot;&gt;&#10;              &lt;!-- Résultat de l'événement --&gt;&#10;              &lt;div class=&quot;flex flex-col gap-2&quot;&gt;&#10;                &lt;Select &#10;                  :id=&quot;`event_result_${eventIndex}`&quot; &#10;                  v-model=&quot;eventData.result&quot; &#10;                  :options=&quot;resultOptions&quot; &#10;                  optionLabel=&quot;label&quot; &#10;                  optionValue=&quot;value&quot;&#10;                  placeholder=&quot;Résultat de l'événement *&quot;&#10;                  class=&quot;w-full select-custom&quot;&#10;                  :class=&quot;{ 'p-invalid': errors[`event_result-${eventIndex}`] }&quot;&#10;                  panelClass=&quot;select-panel-custom&quot;&#10;                  aria-label=&quot;Sélectionner le résultat de l'événement&quot;&#10;                /&gt;&#10;                &lt;small v-if=&quot;errors[`event_result-${eventIndex}`]&quot; class=&quot;text-red-500 block mt-1&quot;&gt;{{ errors[`event_result-${eventIndex}`] }}&lt;/small&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;!-- Cote de l'événement --&gt;&#10;              &lt;div class=&quot;flex flex-col gap-2&quot;&gt;&#10;                &lt;InputText &#10;                  :id=&quot;`event_odds_${eventIndex}`&quot; &#10;                  :ref=&quot;`eventOddsInput_${eventIndex}`&quot;&#10;                  v-model=&quot;eventData.odds&quot; &#10;                  placeholder=&quot;Cote de l'événement *&quot;&#10;                  class=&quot;w-full&quot;&#10;                  :class=&quot;{ 'p-invalid': errors[`event_odds-${eventIndex}`] }&quot;&#10;                  type=&quot;text&quot;&#10;                  @input=&quot;(e) =&gt; handleEventOddsInput(e, eventIndex)&quot;&#10;                  @keypress=&quot;handleEventOddsKeypress&quot;&#10;                /&gt;&#10;                &lt;small v-if=&quot;errors[`event_odds-${eventIndex}`]&quot; class=&quot;text-red-500 block mt-1&quot;&gt;{{ errors[`event_odds-${eventIndex}`] }}&lt;/small&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;&#10;&#10;          &lt;!-- Bouton Ajouter un pari combiné --&gt;&#10;          &lt;div class=&quot;flex justify-center mt-4 mb-4&quot;&gt;&#10;            &lt;Button &#10;              type=&quot;button&quot; &#10;              label=&quot;Ajouter un pari combiné&quot; &#10;              icon=&quot;pi pi-plus&quot; &#10;              class=&quot;p-button-outlined p-button-sm&quot;&#10;              @click=&quot;addEventCard&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;    &lt;/form&gt;&#10;&#10;      &lt;!-- Liste des événements ajoutés --&gt;&#10;      &lt;div v-if=&quot;events.length &gt; 0&quot; class=&quot;border rounded-lg p-4 bg-blue-50&quot;&gt;&#10;        &lt;h3 class=&quot;text-lg font-semibold mb-4 text-blue-800&quot;&gt;Événements du pari combiné ({{ events.length }})&lt;/h3&gt;&#10;        &#10;        &lt;div class=&quot;space-y-3&quot;&gt;&#10;          &lt;div v-for=&quot;(event, index) in events&quot; :key=&quot;event.id&quot; class=&quot;bg-white p-3 rounded border&quot;&gt;&#10;            &lt;div class=&quot;flex justify-between items-start&quot;&gt;&#10;              &lt;div class=&quot;flex-1&quot;&gt;&#10;                &lt;div class=&quot;text-sm font-medium text-gray-800 mb-1&quot;&gt;&#10;                  Événement {{ index + 1 }}&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;text-sm text-gray-600 mb-2&quot;&gt;&#10;                  {{ event.team1?.name }} vs {{ event.team2?.name }}&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;text-xs text-gray-500 mb-1&quot;&gt;&#10;                  {{ event.league?.name }}&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;text-sm text-gray-700 mb-1&quot;&gt;&#10;                  {{ event.description }}&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;flex gap-4 text-xs&quot;&gt;&#10;                  &lt;span v-if=&quot;event.odds&quot; class=&quot;text-green-600 font-medium&quot;&gt;&#10;                    Cote: {{ event.odds }}&#10;                  &lt;/span&gt;&#10;                  &lt;span v-if=&quot;event.result&quot; class=&quot;font-medium&quot; :class=&quot;{&#10;                    'text-green-600': event.result === 'won',&#10;                    'text-red-600': event.result === 'lost',&#10;                    'text-yellow-600': event.result === 'pending',&#10;                    'text-gray-600': event.result === 'void'&#10;                  }&quot;&gt;&#10;                    Résultat: {{ resultOptions.find(r =&gt; r.value === event.result)?.label || event.result }}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;Button &#10;                icon=&quot;pi pi-times&quot; &#10;                class=&quot;p-button-text p-button-sm text-red-500&quot;&#10;                @click=&quot;removeEvent(index)&quot;&#10;                aria-label=&quot;Supprimer cet événement&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Cote, Mise et Type --&gt;&#10;      &lt;div class=&quot;grid grid-cols-3 sm:grid-cols-4 gap-1 overflow-hidden&quot;&gt;&#10;        &lt;!-- Cote --&gt;&#10;        &lt;div class=&quot;flex flex-col justify-center min-w-0 w-full&quot;&gt;&#10;          &lt;div class=&quot;w-full&quot;&gt;&#10;            &lt;InputText &#10;              id=&quot;global_odds&quot; &#10;              v-model=&quot;formData.global_odds&quot; &#10;              type=&quot;text&quot;&#10;              placeholder=&quot;Cote&quot;&#10;              class=&quot;w-full text-xs&quot;&#10;              :class=&quot;{ 'p-invalid': errors.global_odds }&quot;&#10;              @input=&quot;handleOddsInput&quot;&#10;              @keypress=&quot;handleOddsKeypress&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;small v-if=&quot;errors.global_odds&quot; class=&quot;text-red-500 text-xs truncate&quot;&gt;{{ errors.global_odds }}&lt;/small&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;!-- Mise --&gt;&#10;        &lt;div class=&quot;flex flex-col justify-center min-w-0 w-full&quot;&gt;&#10;          &lt;div class=&quot;w-full&quot;&gt;&#10;            &lt;InputText &#10;              id=&quot;stake&quot; &#10;              v-model=&quot;formData.stake&quot; &#10;              type=&quot;text&quot;&#10;              :placeholder=&quot;betTypeValue === 'currency' ? 'Mise en €' : betTypeValue === 'percentage' ? 'Mise en %' : 'Mise'&quot;&#10;              class=&quot;w-full text-xs&quot;&#10;              :class=&quot;{ 'p-invalid': errors.stake }&quot;&#10;              @input=&quot;handleStakeInput&quot;&#10;              @keypress=&quot;handleStakeKeypress&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;small v-if=&quot;errors.stake&quot; class=&quot;text-red-500 text-xs truncate&quot;&gt;{{ errors.stake }}&lt;/small&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Type de mise --&gt;&#10;        &lt;div class=&quot;flex flex-col justify-center min-w-0 w-full&quot;&gt;&#10;          &lt;div class=&quot;w-full flex items-center&quot;&gt;&#10;            &lt;SelectButton &#10;              v-model=&quot;betTypeValue&quot; &#10;              :options=&quot;betTypeOptions&quot; &#10;              optionLabel=&quot;symbol&quot; &#10;              optionValue=&quot;value&quot;&#10;              class=&quot;h-8 text-xs w-full&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Gain potentiel (desktop uniquement) --&gt;&#10;        &lt;div class=&quot;hidden sm:flex flex-col justify-center min-w-0 w-full mt-4 mb-4&quot;&gt;&#10;          &lt;div class=&quot;w-full&quot;&gt;&#10;            &lt;div class=&quot;p-2 bg-gray-50 rounded border text-xs font-semibold text-green-600 h-8 flex items-center justify-center&quot;&gt;&#10;              {{ potentialWin.toFixed(2) }} €&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;small class=&quot;text-gray-500 text-xs text-center&quot;&gt;Gain potentiel&lt;/small&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Section détaillée du gain potentiel (mode pourcentage uniquement) --&gt;&#10;      &lt;div v-if=&quot;betTypeValue === 'percentage'&quot; class=&quot;flex flex-col gap-2 mb-4 mt-4&quot;&gt;&#10;        &lt;div class=&quot;p-4 bg-gray-50 rounded border&quot;&gt;&#10;          &lt;h4 class=&quot;text-sm font-semibold text-gray-800 mb-3&quot;&gt;Détails du gain potentiel&lt;/h4&gt;&#10;          &#10;          &lt;!-- Capital actuel --&gt;&#10;          &lt;div class=&quot;flex justify-between items-center mb-2&quot;&gt;&#10;            &lt;span class=&quot;text-sm text-gray-600&quot;&gt;Capital actuel :&lt;/span&gt;&#10;            &lt;span class=&quot;text-sm font-medium&quot;&gt;&#10;              &lt;i v-if=&quot;capitalLoading&quot; class=&quot;pi pi-spin pi-spinner text-xs&quot;&gt;&lt;/i&gt;&#10;              &lt;span v-else&gt;{{ currentCapital.toFixed(2) }} €&lt;/span&gt;&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &#10;          &lt;!-- Mise calculée --&gt;&#10;          &lt;div v-if=&quot;calculatedStake &gt; 0&quot; class=&quot;flex justify-between items-center mb-2&quot;&gt;&#10;            &lt;span class=&quot;text-sm text-gray-600&quot;&gt;Mise calculée ({{ formData.stake }}%) :&lt;/span&gt;&#10;            &lt;span class=&quot;text-sm font-medium text-blue-600&quot;&gt;{{ calculatedStake.toFixed(2) }} €&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &#10;          &lt;!-- Cote --&gt;&#10;          &lt;div v-if=&quot;formData.global_odds&quot; class=&quot;flex justify-between items-center mb-2&quot;&gt;&#10;            &lt;span class=&quot;text-sm text-gray-600&quot;&gt;Cote :&lt;/span&gt;&#10;            &lt;span class=&quot;text-sm font-medium&quot;&gt;{{ parseFloat(formData.global_odds).toFixed(2) }}&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &#10;          &lt;!-- Gain potentiel --&gt;&#10;          &lt;div class=&quot;flex justify-between items-center pt-2 border-t border-gray-200&quot;&gt;&#10;            &lt;span class=&quot;text-sm font-semibold text-gray-800&quot;&gt;Gain potentiel :&lt;/span&gt;&#10;            &lt;span class=&quot;text-lg font-bold text-green-600&quot;&gt;{{ potentialWin.toFixed(2) }} €&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Gain potentiel simple (mode devise uniquement) --&gt;&#10;      &lt;div v-if=&quot;betTypeValue === 'currency'&quot; class=&quot;flex flex-col gap-2 mt-4 mb-4&quot;&gt;&#10;        &lt;div class=&quot;p-3 bg-gray-50 rounded border text-lg font-semibold text-green-600 text-center&quot;&gt;&#10;          Gain potentiel : {{ potentialWin.toFixed(2) }} €&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Résultat (optionnel) --&gt;&#10;      &lt;div class=&quot;flex flex-col sm:flex-row sm:items-center gap-2&quot;&gt;&#10;        &lt;div class=&quot;flex-1&quot;&gt;&#10;          &lt;Select &#10;            id=&quot;result&quot; &#10;            v-model=&quot;formData.result&quot; &#10;            :options=&quot;resultOptions&quot; &#10;            optionLabel=&quot;label&quot; &#10;            optionValue=&quot;value&quot; &#10;            placeholder=&quot;Sélectionner un résultat&quot;&#10;            class=&quot;w-full&quot;&#10;          /&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;flex justify-end gap-2 mt-4&quot;&gt;&#10;      &lt;Button &#10;        label=&quot;Annuler&quot; &#10;        icon=&quot;pi pi-times&quot; &#10;        @click=&quot;closeDialog&quot; &#10;        class=&quot;p-button-text&quot;&#10;      /&gt;&#10;      &lt;Button &#10;        label=&quot;Ajouter le pari&quot; &#10;        icon=&quot;pi pi-check&quot; &#10;        @click=&quot;submitForm&quot; &#10;        :loading=&quot;loading&quot;&#10;        :disabled=&quot;!isFormValid&quot;&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup&gt;&#10;import { ref, reactive, computed, onMounted, nextTick, watch } from 'vue';&#10;// Dialog import supprimé car ce n'est plus un Dialog&#10;import Button from 'primevue/button';&#10;import InputText from 'primevue/inputtext';&#10;import InputNumber from 'primevue/inputnumber';&#10;import DatePicker from 'primevue/datepicker';&#10;import Select from 'primevue/select';&#10;import SelectButton from 'primevue/selectbutton';&#10;import AutoComplete from 'primevue/autocomplete';&#10;import { BetService } from '@/service/BetService';&#10;import { SportService } from '@/service/SportService';&#10;import { CountryService } from '@/service/CountryService';&#10;import { useToast } from 'primevue/usetoast';&#10;&#10;// Props&#10;// Props supprimés car ce n'est plus un Dialog&#10;&#10;// Emits&#10;const emit = defineEmits(['bet-created']);&#10;&#10;// Composables&#10;const toast = useToast();&#10;&#10;// Variables réactives&#10;const loading = ref(false);&#10;const sports = ref([]);&#10;const countries = ref([]);&#10;const allCountries = ref([]);&#10;const errors = ref({});&#10;const eventOddsInput = ref(null);&#10;const availableLeagues = ref([]);&#10;const availableTeams = ref([]);&#10;const apiBaseUrl = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000';&#10;&#10;// Variables pour la recherche de pays&#10;const countrySearchQuery = ref('');&#10;const countrySearchResults = ref([]);&#10;const countryLoading = ref(false);&#10;const countryCurrentPage = ref(1);&#10;const countryHasMore = ref(false);&#10;const selectedCountry = ref([]);&#10;&#10;// Variables pour la recherche de ligues&#10;const leagueSearchQuery = ref('');&#10;const leagueSearchResults = ref([]);&#10;const leagueLoading = ref(false);&#10;const leagueCurrentPage = ref(1);&#10;const leagueHasMore = ref(false);&#10;const selectedLeague = ref([]);&#10;&#10;// Variables pour la recherche d'équipes 1&#10;const team1SearchQuery = ref('');&#10;const team1SearchResults = ref([]);&#10;const team1Loading = ref(false);&#10;const team1CurrentPage = ref(1);&#10;const team1HasMore = ref(false);&#10;const selectedTeam1 = ref([]);&#10;&#10;// Variables pour la recherche d'équipes 2&#10;const team2SearchQuery = ref('');&#10;const team2SearchResults = ref([]);&#10;const team2Loading = ref(false);&#10;const team2CurrentPage = ref(1);&#10;const team2HasMore = ref(false);&#10;const selectedTeam2 = ref([]);&#10;&#10;// Variables pour la recherche de sports&#10;const sportSearchQuery = ref('');&#10;const sportSearchResults = ref([]);&#10;const sportLoading = ref(false);&#10;const selectedSport = ref([]);&#10;&#10;// Variables pour le type de mise&#10;const betTypeValue = ref('currency');&#10;const betTypeOptions = ref([&#10;  { symbol: '€', value: 'currency' },&#10;  { symbol: '%', value: 'percentage' }&#10;]);&#10;&#10;// Variables pour le capital actuel&#10;const currentCapital = ref(0);&#10;const calculatedStake = ref(0);&#10;const capitalLoading = ref(false);&#10;&#10;// Variables pour les cards d'événements multiples&#10;const eventCards = ref([&#10;  {&#10;    id: 1,&#10;    sport_id: null,&#10;    country_id: null,&#10;    league: null,&#10;    team1: null,&#10;    team2: null,&#10;    description: '',&#10;    result: null,&#10;    odds: null,&#10;    selectedSport: [],&#10;    selectedCountry: [],&#10;    selectedLeague: [],&#10;    selectedTeam1: [],&#10;    selectedTeam2: [],&#10;    sportSearchResults: [],&#10;    sportLoading: false,&#10;    countryFilteredResults: [],&#10;    leagueSearchResults: [],&#10;    leagueLoading: false,&#10;    team1SearchResults: [],&#10;    team1Loading: false,&#10;    team2SearchResults: [],&#10;    team2Loading: false&#10;  }&#10;]);&#10;&#10;// Variables pour les événements multiples (paris combinés)&#10;const events = ref([]);&#10;const currentEvent = ref({&#10;  sport_id: null,&#10;  country_id: null,&#10;  league: null,&#10;  team1: null,&#10;  team2: null,&#10;  bet_code: '',&#10;  description: '',&#10;  result: null,&#10;  odds: null&#10;});&#10;&#10;// Données du formulaire&#10;const formData = ref({&#10;  bet_date: new Date(),&#10;  sport_id: null,&#10;  country_id: null,&#10;  league: null,&#10;  team1: null,&#10;  team2: null,&#10;  global_odds: null,&#10;  stake: null,&#10;  result: 'pending'&#10;});&#10;&#10;&#10;&#10;// Options pour le résultat&#10;const resultOptions = [&#10;  { label: 'En attente', value: 'pending' },&#10;  { label: 'Gagné', value: 'won' },&#10;  { label: 'Perdu', value: 'lost' },&#10;  { label: 'Annulé', value: 'void' }&#10;];&#10;&#10;// Computed&#10;// Variable visible supprimée car ce n'est plus un Dialog&#10;&#10;const potentialWin = computed(() =&gt; {&#10;  let stake = 0;&#10;  &#10;  if (betTypeValue.value === 'percentage' &amp;&amp; calculatedStake.value &gt; 0) {&#10;    // Utiliser la mise calculée en pourcentage&#10;    stake = calculatedStake.value;&#10;  } else if (betTypeValue.value === 'currency' &amp;&amp; formData.value.stake) {&#10;    // Utiliser la mise en devise&#10;    stake = parseFloat(formData.value.stake);&#10;  }&#10;  &#10;  if (stake &gt; 0 &amp;&amp; formData.value.global_odds) {&#10;    return stake * parseFloat(formData.value.global_odds);&#10;  }&#10;  return 0;&#10;});&#10;&#10;// Afficher les champs sport conditionnels&#10;const showSportFields = computed(() =&gt; {&#10;  return formData.value.sport_id !== null;&#10;});&#10;&#10;const isFormValid = computed(() =&gt; {&#10;  // Seuls les champs essentiels sont obligatoires&#10;  return formData.value.bet_date &amp;&amp;&#10;         formData.value.global_odds &amp;&amp;&#10;         formData.value.stake;&#10;});&#10;&#10;&#10;&#10;// Méthodes&#10;/**&#10; * Charger la liste des sports disponibles depuis l'API&#10; */&#10;async function loadSports() {&#10;  try {&#10;    sports.value = await SportService.getSports();&#10;  } catch (error) {&#10;    console.error('Erreur lors du chargement des sports:', error);&#10;    toast.add({&#10;      severity: 'error',&#10;      summary: 'Erreur',&#10;      detail: 'Impossible de charger les sports',&#10;      life: 3000&#10;    });&#10;    // Fallback vers des sports statiques en cas d'erreur&#10;    sports.value = [&#10;      { id: 1, name: 'Football' },&#10;      { id: 2, name: 'Basketball' },&#10;      { id: 3, name: 'Tennis' },&#10;      { id: 4, name: 'Hockey' },&#10;      { id: 5, name: 'Baseball' },&#10;      { id: 6, name: 'Volleyball' },&#10;      { id: 7, name: 'Rugby' },&#10;      { id: 8, name: 'Handball' }&#10;    ];&#10;  }&#10;}&#10;&#10;/**&#10; * Charger la liste des pays disponibles&#10; */&#10;async function loadCountries() {&#10;  try {&#10;    const countryData = await CountryService.getCountries();&#10;    // Utiliser les vrais IDs des pays depuis l'API&#10;    const formattedCountries = countryData.map(country =&gt; ({&#10;      id: country.id, // Utiliser le vrai ID du pays&#10;      name: country.name,&#10;      code: country.code&#10;    }));&#10;    &#10;    countries.value = formattedCountries;&#10;    allCountries.value = formattedCountries;&#10;  } catch (error) {&#10;    console.error('Erreur lors du chargement des pays:', error);&#10;    toast.add({&#10;      severity: 'error',&#10;      summary: 'Erreur',&#10;      detail: 'Impossible de charger les pays',&#10;      life: 3000&#10;    });&#10;    countries.value = [];&#10;    allCountries.value = [];&#10;  }&#10;}&#10;&#10;/**&#10; * Charger les ligues d'un sport spécifique&#10; */&#10;async function loadLeaguesBySport(sportId) {&#10;  try {&#10;    availableLeagues.value = await SportService.getLeaguesBySport(sportId);&#10;  } catch (error) {&#10;    console.error('Erreur lors du chargement des ligues:', error);&#10;    toast.add({&#10;      severity: 'error',&#10;      summary: 'Erreur',&#10;      detail: 'Impossible de charger les ligues',&#10;      life: 3000&#10;    });&#10;    availableLeagues.value = [];&#10;  }&#10;}&#10;&#10;/**&#10; * Charger les équipes d'un sport spécifique&#10; */&#10;async function loadTeamsBySport(sportId) {&#10;  try {&#10;    availableTeams.value = await SportService.getTeamsBySport(sportId);&#10;  } catch (error) {&#10;    console.error('Erreur lors du chargement des équipes par sport:', error);&#10;    toast.add({&#10;      severity: 'error',&#10;      summary: 'Erreur',&#10;      detail: 'Impossible de charger les équipes',&#10;      life: 3000&#10;    });&#10;    availableTeams.value = [];&#10;  }&#10;}&#10;&#10;/**&#10; * Charger les équipes d'une ligue spécifique&#10; */&#10;async function loadTeamsByLeague(leagueId) {&#10;  try {&#10;    availableTeams.value = await SportService.getTeamsByLeague(leagueId);&#10;  } catch (error) {&#10;    console.error('Erreur lors du chargement des équipes par ligue:', error);&#10;    toast.add({&#10;      severity: 'error',&#10;      summary: 'Erreur',&#10;      detail: 'Impossible de charger les équipes de la ligue',&#10;      life: 3000&#10;    });&#10;    availableTeams.value = [];&#10;  }&#10;}&#10;&#10;/**&#10; * Rechercher des sports avec filtrage côté client&#10; * @param {Object} event - Événement de recherche contenant la query&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;async function searchSports(event, eventIndex) {&#10;  const eventData = eventCards.value[eventIndex];&#10;  const query = event.query || '';&#10;  &#10;  console.log(' searchSports appelée avec:', {&#10;    query,&#10;    eventIndex&#10;  });&#10;  &#10;  // Initialiser les résultats si nécessaire&#10;  if (!eventData.sportSearchResults) {&#10;    eventData.sportSearchResults = [];&#10;  }&#10;  &#10;  try {&#10;    eventData.sportLoading = true;&#10;    console.log('⏳ Début de la requête API sports...');&#10;    &#10;    // Récupérer tous les sports&#10;    const allSportsData = await SportService.getSports();&#10;    &#10;    console.log(' Réponse API sports reçue:', {&#10;      data: allSportsData,&#10;      dataLength: allSportsData?.length&#10;    });&#10;    &#10;    // Filtrer les sports selon la query&#10;    if (!query.trim().length) {&#10;      eventData.sportSearchResults = allSportsData || [];&#10;    } else {&#10;      eventData.sportSearchResults = (allSportsData || []).filter((sport) =&gt; {&#10;        return sport.name.toLowerCase().includes(query.toLowerCase());&#10;      });&#10;    }&#10;    &#10;    console.log(' Résultats sports mis à jour pour événement', eventIndex);&#10;    &#10;    console.log('✅ searchSports terminée:', {&#10;      totalResults: eventData.sportSearchResults.length,&#10;      eventIndex&#10;    });&#10;    &#10;  } catch (error) {&#10;    console.error('❌ Erreur lors de la recherche des sports:', error);&#10;    toast.add({&#10;      severity: 'error',&#10;      summary: 'Erreur',&#10;      detail: 'Impossible de rechercher les sports',&#10;      life: 3000&#10;    });&#10;  } finally {&#10;    eventData.sportLoading = false;&#10;    console.log(' searchSports: loading terminé');&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer la sélection d'un sport&#10; * @param {Object} event - Événement de sélection&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;async function onSportSelect(event, eventIndex) {&#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  // Remplacer l'élément existant par le nouveau sport sélectionné&#10;  if (event.value) {&#10;    eventData.selectedSport = [event.value]; // Remplacer par le nouveau sport&#10;    eventData.sport_id = event.value.id;&#10;    console.log('✅ Sport sélectionné pour événement', eventIndex, ':', event.value);&#10;  } else {&#10;    eventData.selectedSport = [];&#10;    eventData.sport_id = null;&#10;    console.log('✅ Sport désélectionné pour événement', eventIndex);&#10;  }&#10;  &#10;  // Réinitialiser les champs liés au sport pour cette card&#10;  eventData.country_id = null;&#10;  eventData.league = null;&#10;  eventData.team1 = null;&#10;  eventData.team2 = null;&#10;  &#10;  // Réinitialiser la recherche de pays pour cette card&#10;  eventData.selectedCountry = [];&#10;  eventData.countryFilteredResults = [];&#10;  &#10;  // Réinitialiser la recherche de ligues pour cette card&#10;  eventData.selectedLeague = [];&#10;  eventData.leagueSearchResults = [];&#10;  &#10;  // Réinitialiser la recherche d'équipes pour cette card&#10;  eventData.selectedTeam1 = [];&#10;  eventData.team1SearchResults = [];&#10;  eventData.selectedTeam2 = [];&#10;  eventData.team2SearchResults = [];&#10;  &#10;  // Charger les équipes du sport sélectionné&#10;  if (eventData.sport_id) {&#10;    await loadTeamsBySport(eventData.sport_id);&#10;    // Charger les premières ligues&#10;    await searchLeagues({ query: '' }, eventIndex);&#10;    // Charger les premières équipes pour les deux sélecteurs&#10;    await searchTeam1({ query: '' }, eventIndex);&#10;    await searchTeam2({ query: '' }, eventIndex);&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer le changement de sport (fonction de compatibilité)&#10; * @param {Object} event - Événement de changement&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;async function onSportChange(event, eventIndex) {&#10;  // Cette fonction est maintenant gérée par onSportSelect&#10;  console.log('⚠️ onSportChange appelée - redirection vers onSportSelect');&#10;  await onSportSelect(event, eventIndex);&#10;}&#10;&#10;/**&#10; * Rechercher des pays avec filtrage côté client&#10; * @param {Object} event - Événement de recherche contenant la query&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;function searchCountries(event, eventIndex) {&#10;  const query = event.query || '';&#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  setTimeout(() =&gt; {&#10;    if (!query.trim().length) {&#10;      eventData.countryFilteredResults = [...allCountries.value];&#10;    } else {&#10;      eventData.countryFilteredResults = allCountries.value.filter((country) =&gt; {&#10;        return country.name.toLowerCase().includes(query.toLowerCase());&#10;      });&#10;    }&#10;  }, 250);&#10;}&#10;&#10;/**&#10; * Gérer la sélection d'un pays&#10; * @param {Object} event - Événement de sélection contenant le pays&#10; */&#10;/**&#10; * Gérer la sélection d'un pays&#10; * @param {Object} event - Événement de sélection&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;function onCountrySelect(event, eventIndex) {&#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  // Remplacer l'élément existant par le nouveau pays sélectionné&#10;  if (event.value) {&#10;    eventData.selectedCountry = [event.value]; // Remplacer par le nouveau pays&#10;    eventData.country_id = event.value.id;&#10;  } else {&#10;    eventData.selectedCountry = [];&#10;    eventData.country_id = null;&#10;  }&#10;  &#10;  // Déclencher le changement de pays&#10;  onCountryChange(eventIndex);&#10;}&#10;&#10;/**&#10; * Gérer le changement de pays&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;async function onCountryChange(eventIndex) {&#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  // Réinitialiser les champs liés aux ligues et équipes pour cette card&#10;  eventData.league = null;&#10;  eventData.team1 = null;&#10;  eventData.team2 = null;&#10;  &#10;  // Réinitialiser la recherche de ligues pour cette card&#10;  eventData.selectedLeague = [];&#10;  eventData.leagueSearchResults = [];&#10;  &#10;  // Réinitialiser la recherche d'équipes pour cette card&#10;  eventData.selectedTeam1 = [];&#10;  eventData.team1SearchResults = [];&#10;  &#10;  eventData.selectedTeam2 = [];&#10;  eventData.team2SearchResults = [];&#10;  &#10;  // Recharger les ligues avec le filtre de pays si un sport est sélectionné&#10;  if (eventData.sport_id) {&#10;    await searchLeagues({ query: '' }, eventIndex);&#10;    await searchTeam1({ query: '' }, eventIndex);&#10;    await searchTeam2({ query: '' }, eventIndex);&#10;  }&#10;}&#10;&#10;/**&#10; * Rechercher des ligues avec pagination&#10; * @param {Object} event - Événement de recherche contenant la query&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;async function searchLeagues(event, eventIndex) {&#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  if (!eventData.sport_id) {&#10;    console.log('❌ searchLeagues: Aucun sport sélectionné pour événement', eventIndex);&#10;    return;&#10;  }&#10;  &#10;  const query = event.query || '';&#10;  console.log(' searchLeagues appelée avec:', {&#10;    query,&#10;    sportId: eventData.sport_id,&#10;    eventIndex&#10;  });&#10;  &#10;  // Initialiser les résultats si nécessaire&#10;  if (!eventData.leagueSearchResults) {&#10;    eventData.leagueSearchResults = [];&#10;  }&#10;  &#10;  try {&#10;    eventData.leagueLoading = true;&#10;    console.log('⏳ Début de la requête API...');&#10;    &#10;    const response = await SportService.searchLeaguesBySport(&#10;      eventData.sport_id,&#10;      query,&#10;      1,&#10;      30,&#10;      eventData.country_id&#10;    );&#10;    &#10;    console.log(' Réponse API reçue:', {&#10;      data: response.data,&#10;      dataLength: response.data?.length,&#10;      hasMore: response.hasMore,&#10;      pagination: response.pagination,&#10;      fullResponse: response&#10;    });&#10;    &#10;    eventData.leagueSearchResults = response.data;&#10;    console.log(' Résultats ligues mis à jour pour événement', eventIndex);&#10;    &#10;    console.log('✅ searchLeagues terminée:', {&#10;      totalResults: eventData.leagueSearchResults.length,&#10;      eventIndex&#10;    });&#10;    &#10;  } catch (error) {&#10;    console.error('❌ Erreur lors de la recherche des ligues:', error);&#10;    toast.add({&#10;      severity: 'error',&#10;      summary: 'Erreur',&#10;      detail: 'Impossible de rechercher les ligues',&#10;      life: 3000&#10;    });&#10;  } finally {&#10;    eventData.leagueLoading = false;&#10;    console.log(' searchLeagues: loading terminé');&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer la sélection d'une ligue&#10; * @param {Object} event - Événement de sélection contenant la ligue&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;async function onLeagueSelect(event, eventIndex) {&#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  // Remplacer l'élément existant par la nouvelle ligue sélectionnée&#10;  if (event.value) {&#10;    eventData.selectedLeague = [event.value]; // Remplacer par la nouvelle ligue&#10;    eventData.league = event.value.id;&#10;  } else {&#10;    eventData.selectedLeague = [];&#10;    eventData.league = null;&#10;  }&#10;  &#10;  // Réinitialiser les équipes sélectionnées&#10;  eventData.team1 = null;&#10;  eventData.team2 = null;&#10;  eventData.selectedTeam1 = [];&#10;  eventData.selectedTeam2 = [];&#10;  &#10;  // Recharger les équipes avec le filtre de ligue pour les deux sélecteurs&#10;  await searchTeam1({ query: eventData.team1SearchQuery || '' }, eventIndex, true);&#10;  await searchTeam2({ query: eventData.team2SearchQuery || '' }, eventIndex, true);&#10;}&#10;&#10;/**&#10; * Rechercher des équipes pour l'équipe 1 avec pagination et exclusion de l'équipe 2&#10; * @param {Object} event - Événement de recherche contenant la query&#10; * @param {number} eventIndex - Index de l'événement&#10; * @param {boolean} resetSearch - Forcer la réinitialisation de la recherche&#10; */&#10;async function searchTeam1(event, eventIndex, resetSearch = false) {&#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  if (!eventData.sport_id) {&#10;    console.log('❌ searchTeam1: Aucun sport sélectionné pour événement', eventIndex);&#10;    return;&#10;  }&#10;  &#10;  const query = event.query || '';&#10;  console.log(' searchTeam1 appelée avec:', {&#10;    query,&#10;    sportId: eventData.sport_id,&#10;    leagueId: eventData.league,&#10;    excludeTeam: eventData.team2,&#10;    eventIndex,&#10;    resetSearch&#10;  });&#10;  &#10;  // Initialiser les résultats si nécessaire&#10;  if (!eventData.team1SearchResults || resetSearch) {&#10;    console.log(' Initialisation recherche équipe 1 pour événement', eventIndex);&#10;    eventData.team1SearchResults = [];&#10;  }&#10;  &#10;  try {&#10;    eventData.team1Loading = true;&#10;    console.log('⏳ Début de la requête API équipes 1...');&#10;    &#10;    const response = await SportService.searchTeamsBySport(&#10;      eventData.sport_id,&#10;      query,&#10;      1,&#10;      30,&#10;      eventData.league, // Filtrer par ligue si sélectionnée&#10;      eventData.country_id // Filtrer par pays si sélectionné&#10;    );&#10;    &#10;    console.log(' Réponse API équipes 1 reçue:', {&#10;      data: response.data,&#10;      dataLength: response.data?.length,&#10;      hasMore: response.hasMore,&#10;      pagination: response.pagination&#10;    });&#10;    &#10;    // Filtrer pour exclure l'équipe 2 si elle est sélectionnée&#10;    let filteredData = response.data;&#10;    if (eventData.team2) {&#10;      filteredData = response.data.filter(team =&gt; team.id !== eventData.team2);&#10;      console.log(' Équipe 2 exclue des résultats équipe 1:', {&#10;        originalCount: response.data.length,&#10;        filteredCount: filteredData.length,&#10;        excludedTeamId: eventData.team2&#10;      });&#10;    }&#10;    &#10;    eventData.team1SearchResults = filteredData;&#10;    console.log(' Résultats équipes 1 mis à jour pour événement', eventIndex);&#10;    &#10;    console.log('✅ searchTeam1 terminée:', {&#10;      totalResults: eventData.team1SearchResults.length,&#10;      eventIndex&#10;    });&#10;    &#10;  } catch (error) {&#10;    console.error('❌ Erreur lors de la recherche des équipes 1:', error);&#10;    toast.add({&#10;      severity: 'error',&#10;      summary: 'Erreur',&#10;      detail: 'Impossible de rechercher les équipes',&#10;      life: 3000&#10;    });&#10;  } finally {&#10;    eventData.team1Loading = false;&#10;    console.log(' searchTeam1: loading terminé');&#10;  }&#10;}&#10;&#10;/**&#10; * Rechercher des équipes pour l'équipe 2 avec pagination et exclusion de l'équipe 1&#10; * @param {Object} event - Événement de recherche contenant la query&#10; * @param {number} eventIndex - Index de l'événement&#10; * @param {boolean} resetSearch - Forcer la réinitialisation de la recherche&#10; */&#10;async function searchTeam2(event, eventIndex, resetSearch = false) {&#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  if (!eventData.sport_id) {&#10;    console.log('❌ searchTeam2: Aucun sport sélectionné pour événement', eventIndex);&#10;    return;&#10;  }&#10;  &#10;  const query = event.query || '';&#10;  console.log(' searchTeam2 appelée avec:', {&#10;    query,&#10;    sportId: eventData.sport_id,&#10;    leagueId: eventData.league,&#10;    excludeTeam: eventData.team1,&#10;    eventIndex,&#10;    resetSearch&#10;  });&#10;  &#10;  // Initialiser les résultats si nécessaire&#10;  if (!eventData.team2SearchResults || resetSearch) {&#10;    console.log(' Initialisation recherche équipe 2 pour événement', eventIndex);&#10;    eventData.team2SearchResults = [];&#10;  }&#10;  &#10;  try {&#10;    eventData.team2Loading = true;&#10;    console.log('⏳ Début de la requête API équipes 2...');&#10;    &#10;    const response = await SportService.searchTeamsBySport(&#10;      eventData.sport_id,&#10;      query,&#10;      1,&#10;      30,&#10;      eventData.league, // Filtrer par ligue si sélectionnée&#10;      eventData.country_id // Filtrer par pays si sélectionné&#10;    );&#10;    &#10;    console.log(' Réponse API équipes 2 reçue:', {&#10;      data: response.data,&#10;      dataLength: response.data?.length,&#10;      hasMore: response.hasMore,&#10;      pagination: response.pagination&#10;    });&#10;    &#10;    // Filtrer pour exclure l'équipe 1 si elle est sélectionnée&#10;    let filteredData = response.data;&#10;    if (eventData.team1) {&#10;      filteredData = response.data.filter(team =&gt; team.id !== eventData.team1);&#10;      console.log(' Équipe 1 exclue des résultats équipe 2:', {&#10;        originalCount: response.data.length,&#10;        filteredCount: filteredData.length,&#10;        excludedTeamId: eventData.team1&#10;      });&#10;    }&#10;    &#10;    eventData.team2SearchResults = filteredData;&#10;    console.log(' Résultats équipes 2 mis à jour pour événement', eventIndex);&#10;    &#10;    console.log('✅ searchTeam2 terminée:', {&#10;      totalResults: eventData.team2SearchResults.length,&#10;      eventIndex&#10;    });&#10;    &#10;  } catch (error) {&#10;    console.error('❌ Erreur lors de la recherche des équipes 2:', error);&#10;    toast.add({&#10;      severity: 'error',&#10;      summary: 'Erreur',&#10;      detail: 'Impossible de rechercher les équipes',&#10;      life: 3000&#10;    });&#10;  } finally {&#10;    eventData.team2Loading = false;&#10;    console.log(' searchTeam2: loading terminé');&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer la sélection de l'équipe 1&#10; * @param {Object} event - Événement de sélection contenant l'équipe&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;function onTeam1Select(event, eventIndex) {&#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  // Remplacer l'élément existant par la nouvelle équipe sélectionnée&#10;  if (event.value) {&#10;    eventData.selectedTeam1 = [event.value]; // Remplacer par la nouvelle équipe&#10;    eventData.team1 = event.value.id;&#10;    console.log('✅ Équipe 1 sélectionnée pour événement', eventIndex, ':', event.value);&#10;  } else {&#10;    eventData.selectedTeam1 = [];&#10;    eventData.team1 = null;&#10;    console.log('✅ Équipe 1 désélectionnée pour événement', eventIndex);&#10;  }&#10;  &#10;  // Rafraîchir les résultats de l'équipe 2 pour exclure l'équipe 1 sélectionnée&#10;  if (eventData.team2SearchResults &amp;&amp; eventData.team2SearchResults.length &gt; 0) {&#10;    console.log(' Rafraîchissement des résultats équipe 2 pour exclure équipe 1');&#10;    searchTeam2({ query: eventData.team2SearchQuery || '' }, eventIndex, true);&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer la sélection de l'équipe 2&#10; * @param {Object} event - Événement de sélection contenant l'équipe&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;function onTeam2Select(event, eventIndex) {&#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  // Remplacer l'élément existant par la nouvelle équipe sélectionnée&#10;  if (event.value) {&#10;    eventData.selectedTeam2 = [event.value]; // Remplacer par la nouvelle équipe&#10;    eventData.team2 = event.value.id;&#10;    console.log('✅ Équipe 2 sélectionnée pour événement', eventIndex, ':', event.value);&#10;  } else {&#10;    eventData.selectedTeam2 = [];&#10;    eventData.team2 = null;&#10;    console.log('✅ Équipe 2 désélectionnée pour événement', eventIndex);&#10;  }&#10;  &#10;  // Rafraîchir les résultats de l'équipe 1 pour exclure l'équipe 2 sélectionnée&#10;  if (eventData.team1SearchResults &amp;&amp; eventData.team1SearchResults.length &gt; 0) {&#10;    console.log(' Rafraîchissement des résultats équipe 1 pour exclure équipe 2');&#10;    searchTeam1({ query: eventData.team1SearchQuery || '' }, eventIndex, true);&#10;  }&#10;}&#10;&#10;/**&#10; * Charger plus d'équipes 1 (pagination)&#10; */&#10;async function loadMoreTeam1() {&#10;  if (team1Loading.value || !team1HasMore.value) {&#10;    console.log('⏸️ loadMoreTeam1: Chargement en cours ou plus de résultats');&#10;    return;&#10;  }&#10;  &#10;  console.log(' Chargement de la page suivante équipes 1:', team1CurrentPage.value + 1);&#10;  team1CurrentPage.value++;&#10;  searchTeam1({ query: team1SearchQuery.value });&#10;}&#10;&#10;/**&#10; * Charger plus d'équipes 2 (pagination)&#10; */&#10;async function loadMoreTeam2() {&#10;  if (team2Loading.value || !team2HasMore.value) {&#10;    console.log('⏸️ loadMoreTeam2: Chargement en cours ou plus de résultats');&#10;    return;&#10;  }&#10;  &#10;  console.log(' Chargement de la page suivante équipes 2:', team2CurrentPage.value + 1);&#10;  team2CurrentPage.value++;&#10;  searchTeam2({ query: team2SearchQuery.value });&#10;}&#10;&#10;&#10;&#10;/**&#10; * Gérer l'affichage du dropdown des équipes 1&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;function onTeam1DropdownShow(eventIndex) {&#10;  console.log(' Dropdown équipes 1 ouvert pour événement', eventIndex);&#10;  const eventData = eventCards.value[eventIndex];&#10;  if ((!eventData.team1SearchResults || eventData.team1SearchResults.length === 0) &amp;&amp; eventData.sport_id) {&#10;    console.log(' Chargement initial des équipes 1 au dropdown');&#10;    searchTeam1({ query: '' }, eventIndex, true);&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer l'affichage du dropdown des équipes 2&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;function onTeam2DropdownShow(eventIndex) {&#10;  console.log(' Dropdown équipes 2 ouvert pour événement', eventIndex);&#10;  const eventData = eventCards.value[eventIndex];&#10;  if ((!eventData.team2SearchResults || eventData.team2SearchResults.length === 0) &amp;&amp; eventData.sport_id) {&#10;    console.log(' Chargement initial des équipes 2 au dropdown');&#10;    searchTeam2({ query: '' }, eventIndex, true);&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer l'affichage du dropdown des sports&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;function onSportDropdownShow(eventIndex) {&#10;  console.log(' Dropdown sports ouvert pour événement', eventIndex);&#10;  &#10;  // Charger les sports si pas encore chargés pour cette card&#10;  const eventData = eventCards.value[eventIndex];&#10;  if (!eventData.sportSearchResults || eventData.sportSearchResults.length === 0) {&#10;    searchSports({ query: '' }, eventIndex);&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer l'affichage du dropdown des ligues&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;function onLeagueDropdownShow(eventIndex) {&#10;  console.log(' Dropdown ligues ouvert pour événement', eventIndex);&#10;  &#10;  // Charger les ligues si pas encore chargées pour cette card&#10;  const eventData = eventCards.value[eventIndex];&#10;  if (!eventData.leagueSearchResults || eventData.leagueSearchResults.length === 0) {&#10;    searchLeagues({ query: '' }, eventIndex);&#10;  }&#10;}&#10;&#10;&#10;&#10;/**&#10; * Gérer le défilement du panel équipes 1 pour le lazy loading&#10; * @param {Event} event - Événement de défilement&#10; */&#10;function handleTeam1PanelScroll(event) {&#10;  const panel = event.target;&#10;  const scrollTop = panel.scrollTop;&#10;  const scrollHeight = panel.scrollHeight;&#10;  const clientHeight = panel.clientHeight;&#10;  &#10;  // Calculer le pourcentage de défilement&#10;  const scrollPercentage = (scrollTop + clientHeight) / scrollHeight;&#10;  &#10;  console.log(' Scroll équipes 1 détecté:', {&#10;    scrollTop,&#10;    scrollHeight,&#10;    clientHeight,&#10;    scrollPercentage: Math.round(scrollPercentage * 100) + '%',&#10;    hasMore: team1HasMore.value,&#10;    loading: team1Loading.value,&#10;    currentPage: team1CurrentPage.value,&#10;    resultsCount: team1SearchResults.value.length&#10;  });&#10;  &#10;  // Si on a atteint 90% du défilement et qu'il y a plus de données&#10;  if (scrollPercentage &gt;= 0.9) {&#10;    console.log(' 90% atteint pour équipes 1! État actuel:', {&#10;      hasMore: team1HasMore.value,&#10;      loading: team1Loading.value,&#10;      willTrigger: team1HasMore.value &amp;&amp; !team1Loading.value&#10;    });&#10;    &#10;    if (team1HasMore.value &amp;&amp; !team1Loading.value) {&#10;      console.log(' Déclenchement du lazy loading équipes 1...');&#10;      loadMoreTeam1();&#10;    } else {&#10;      console.log('❌ Lazy loading équipes 1 non déclenché:', {&#10;        reason: !team1HasMore.value ? 'Pas de données supplémentaires' : 'Chargement en cours'&#10;      });&#10;    }&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer le défilement du panel équipes 2 pour le lazy loading&#10; * @param {Event} event - Événement de défilement&#10; */&#10;function handleTeam2PanelScroll(event) {&#10;  const panel = event.target;&#10;  const scrollTop = panel.scrollTop;&#10;  const scrollHeight = panel.scrollHeight;&#10;  const clientHeight = panel.clientHeight;&#10;  &#10;  // Calculer le pourcentage de défilement&#10;  const scrollPercentage = (scrollTop + clientHeight) / scrollHeight;&#10;  &#10;  console.log(' Scroll équipes 2 détecté:', {&#10;    scrollTop,&#10;    scrollHeight,&#10;    clientHeight,&#10;    scrollPercentage: Math.round(scrollPercentage * 100) + '%',&#10;    hasMore: team2HasMore.value,&#10;    loading: team2Loading.value,&#10;    currentPage: team2CurrentPage.value,&#10;    resultsCount: team2SearchResults.value.length&#10;  });&#10;  &#10;  // Si on a atteint 90% du défilement et qu'il y a plus de données&#10;  if (scrollPercentage &gt;= 0.9) {&#10;    console.log(' 90% atteint pour équipes 2! État actuel:', {&#10;      hasMore: team2HasMore.value,&#10;      loading: team2Loading.value,&#10;      willTrigger: team2HasMore.value &amp;&amp; !team2Loading.value&#10;    });&#10;    &#10;    if (team2HasMore.value &amp;&amp; !team2Loading.value) {&#10;      console.log(' Déclenchement du lazy loading équipes 2...');&#10;      loadMoreTeam2();&#10;    } else {&#10;      console.log('❌ Lazy loading équipes 2 non déclenché:', {&#10;        reason: !team2HasMore.value ? 'Pas de données supplémentaires' : 'Chargement en cours'&#10;      });&#10;    }&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer la saisie de la cote pour remplacer immédiatement les virgules par des points&#10; * @param {Event} event - Événement d'input&#10; */&#10;function handleOddsInput(event) {&#10;  let inputValue = event.target.value;&#10;  console.log('handleOddsInput - Valeur tapée:', inputValue);&#10;  &#10;  // Remplacer immédiatement toutes les virgules par des points&#10;  const normalizedValue = inputValue.replace(/,/g, '.');&#10;  console.log('handleOddsInput - Valeur normalisée:', normalizedValue);&#10;  &#10;  // Si une virgule a été détectée, forcer le remplacement immédiat&#10;  if (inputValue !== normalizedValue) {&#10;    console.log('handleOddsInput - Virgule détectée, remplacement en cours...');&#10;    // Sauvegarder la position du curseur&#10;    const cursorPosition = event.target.selectionStart;&#10;    &#10;    // Mettre à jour immédiatement la valeur de l'input&#10;    event.target.value = normalizedValue;&#10;    &#10;    // Restaurer la position du curseur&#10;    event.target.setSelectionRange(cursorPosition, cursorPosition);&#10;    &#10;    // Mettre à jour le v-model&#10;    formData.value.global_odds = normalizedValue;&#10;    console.log('handleOddsInput - Remplacement terminé, nouvelle valeur:', event.target.value);&#10;    return;&#10;  }&#10;  &#10;  // Vérifier que la valeur est un nombre réel valide&#10;  if (normalizedValue === '' || normalizedValue === '.') {&#10;    formData.value.global_odds = null;&#10;    return;&#10;  }&#10;  &#10;  // Validation du format nombre réel&#10;  const numericValue = parseFloat(normalizedValue);&#10;  if (!isNaN(numericValue) &amp;&amp; isFinite(numericValue) &amp;&amp; numericValue &gt; 0) {&#10;    formData.value.global_odds = numericValue;&#10;  } else {&#10;    // Si la valeur n'est pas valide, on garde la dernière valeur valide&#10;    console.warn('Valeur de cote invalide:', normalizedValue);&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer la saisie de la mise pour accepter les virgules et les points comme séparateurs décimaux&#10; * @param {Event} event - Événement d'input&#10; */&#10;function handleStakeInput(event) {&#10;  let inputValue = event.target.value;&#10;  console.log('handleStakeInput - Valeur tapée:', inputValue);&#10;  &#10;  // Remplacer immédiatement toutes les virgules par des points&#10;  const normalizedValue = inputValue.replace(/,/g, '.');&#10;  console.log('handleStakeInput - Valeur normalisée:', normalizedValue);&#10;  &#10;  // Si une virgule a été détectée, forcer le remplacement immédiat&#10;  if (inputValue !== normalizedValue) {&#10;    console.log('handleStakeInput - Virgule détectée, remplacement en cours...');&#10;    // Sauvegarder la position du curseur&#10;    const cursorPosition = event.target.selectionStart;&#10;    &#10;    // Mettre à jour immédiatement la valeur de l'input&#10;    event.target.value = normalizedValue;&#10;    &#10;    // Restaurer la position du curseur&#10;    event.target.setSelectionRange(cursorPosition, cursorPosition);&#10;    &#10;    // Mettre à jour le v-model&#10;    formData.value.stake = normalizedValue;&#10;    console.log('handleStakeInput - Remplacement terminé, nouvelle valeur:', event.target.value);&#10;    return;&#10;  }&#10;  &#10;  // Vérifier que la valeur est un nombre réel valide&#10;  if (normalizedValue === '' || normalizedValue === '.') {&#10;    formData.value.stake = null;&#10;    return;&#10;  }&#10;  &#10;  // Validation du format nombre réel (la mise peut être 0)&#10;  const numericValue = parseFloat(normalizedValue);&#10;  if (!isNaN(numericValue) &amp;&amp; isFinite(numericValue) &amp;&amp; numericValue &gt;= 0) {&#10;    formData.value.stake = numericValue;&#10;  } else {&#10;    // Si la valeur n'est pas valide, on garde la dernière valeur valide&#10;    console.warn('Valeur de mise invalide:', normalizedValue);&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer la saisie de la cote d'événement pour remplacer immédiatement les virgules par des points&#10; * @param {Event} event - Événement d'input&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;function handleEventOddsInput(event, eventIndex) {&#10;  let inputValue = event.target.value;&#10;  console.log('handleEventOddsInput - Valeur tapée:', inputValue, 'pour événement', eventIndex);&#10;  &#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  // Remplacer immédiatement toutes les virgules par des points&#10;  const normalizedValue = inputValue.replace(/,/g, '.');&#10;  console.log('handleEventOddsInput - Valeur normalisée:', normalizedValue);&#10;  &#10;  // Si une virgule a été détectée, forcer le remplacement immédiat&#10;  if (inputValue !== normalizedValue) {&#10;    console.log('handleEventOddsInput - Virgule détectée, remplacement en cours...');&#10;    // Sauvegarder la position du curseur&#10;    const cursorPosition = event.target.selectionStart;&#10;    &#10;    // Mettre à jour immédiatement la valeur de l'input&#10;    event.target.value = normalizedValue;&#10;    &#10;    // Restaurer la position du curseur&#10;    event.target.setSelectionRange(cursorPosition, cursorPosition);&#10;    &#10;    // Mettre à jour le v-model&#10;    eventData.odds = normalizedValue;&#10;    console.log('handleEventOddsInput - Remplacement terminé, nouvelle valeur:', event.target.value);&#10;    return;&#10;  }&#10;  &#10;  // Vérifier que la valeur est un nombre réel valide&#10;  if (normalizedValue === '' || normalizedValue === '.') {&#10;    eventData.odds = null;&#10;    // Recalculer la cote globale même avec une valeur vide&#10;    calculateGlobalOdds();&#10;    return;&#10;  }&#10;  &#10;  // Validation du format nombre réel&#10;  const numericValue = parseFloat(normalizedValue);&#10;  if (!isNaN(numericValue) &amp;&amp; isFinite(numericValue) &amp;&amp; numericValue &gt; 0) {&#10;    eventData.odds = numericValue;&#10;  } else {&#10;    // Si la valeur n'est pas valide, on garde la dernière valeur valide&#10;    console.warn('Valeur de cote d\'événement invalide:', normalizedValue);&#10;  }&#10;  &#10;  // Recalculer la cote globale&#10;  calculateGlobalOdds();&#10;}&#10;&#10;/**&#10; * Gérer les touches pressées pour la cote globale (permettre point et virgule)&#10; * @param {KeyboardEvent} event - Événement de frappe&#10; */&#10;function handleOddsKeypress(event) {&#10;  const char = String.fromCharCode(event.which);&#10;  const currentValue = event.target.value;&#10;  &#10;  // Permettre les chiffres, le point, la virgule et les touches de contrôle&#10;  if (!/[0-9.,]/.test(char) &amp;&amp; event.which !== 8 &amp;&amp; event.which !== 46 &amp;&amp; event.which !== 37 &amp;&amp; event.which !== 39) {&#10;    event.preventDefault();&#10;    return;&#10;  }&#10;  &#10;  // Empêcher plusieurs séparateurs décimaux (point ou virgule)&#10;  if ((char === '.' || char === ',') &amp;&amp; (currentValue.includes('.') || currentValue.includes(','))) {&#10;    event.preventDefault();&#10;    return;&#10;  }&#10;  &#10;  // Empêcher le point/virgule en première position&#10;  if ((char === '.' || char === ',') &amp;&amp; currentValue === '') {&#10;    event.preventDefault();&#10;    return;&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer les touches pressées pour la mise (permettre point et virgule)&#10; * @param {KeyboardEvent} event - Événement de frappe&#10; */&#10;function handleStakeKeypress(event) {&#10;  const char = String.fromCharCode(event.which);&#10;  const currentValue = event.target.value;&#10;  &#10;  // Permettre les chiffres, le point, la virgule et les touches de contrôle&#10;  if (!/[0-9.,]/.test(char) &amp;&amp; event.which !== 8 &amp;&amp; event.which !== 46 &amp;&amp; event.which !== 37 &amp;&amp; event.which !== 39) {&#10;    event.preventDefault();&#10;    return;&#10;  }&#10;  &#10;  // Empêcher plusieurs séparateurs décimaux (point ou virgule)&#10;  if ((char === '.' || char === ',') &amp;&amp; (currentValue.includes('.') || currentValue.includes(','))) {&#10;    event.preventDefault();&#10;    return;&#10;  }&#10;  &#10;  // Empêcher le point/virgule en première position&#10;  if ((char === '.' || char === ',') &amp;&amp; currentValue === '') {&#10;    event.preventDefault();&#10;    return;&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer les touches pressées pour la cote d'événement (permettre point et virgule)&#10; * @param {KeyboardEvent} event - Événement de frappe&#10; */&#10;function handleEventOddsKeypress(event) {&#10;  const char = String.fromCharCode(event.which);&#10;  const currentValue = event.target.value;&#10;  &#10;  // Permettre les chiffres, le point, la virgule et les touches de contrôle&#10;  if (!/[0-9.,]/.test(char) &amp;&amp; event.which !== 8 &amp;&amp; event.which !== 46 &amp;&amp; event.which !== 37 &amp;&amp; event.which !== 39) {&#10;    event.preventDefault();&#10;    return;&#10;  }&#10;  &#10;  // Empêcher plusieurs séparateurs décimaux (point ou virgule)&#10;  if ((char === '.' || char === ',') &amp;&amp; (currentValue.includes('.') || currentValue.includes(','))) {&#10;    event.preventDefault();&#10;    return;&#10;  }&#10;  &#10;  // Empêcher le point/virgule en première position&#10;  if ((char === '.' || char === ',') &amp;&amp; currentValue === '') {&#10;    event.preventDefault();&#10;    return;&#10;  }&#10;}&#10;&#10;&#10;&#10;/**&#10; * Gérer l'ouverture du dropdown pour attacher le scroll listener&#10; */&#10;function onDropdownShow() {&#10;  console.log(' Dropdown ouvert, recherche du panel...');&#10;  &#10;  // Fonction pour rechercher le panel&#10;  const findAndAttachListener = () =&gt; {&#10;    // Utiliser le bon sélecteur basé sur la structure DOM observée&#10;    const panel = document.querySelector('.p-autocomplete-list-container');&#10;    console.log(' Panel trouvé (.p-autocomplete-list-container):', panel);&#10;    &#10;    if (panel &amp;&amp; !panel.hasScrollListener) {&#10;      panel.hasScrollListener = true;&#10;      panel.addEventListener('scroll', handlePanelScroll);&#10;      console.log('✅ Scroll listener attaché au panel');&#10;      return true;&#10;    } else if (panel &amp;&amp; panel.hasScrollListener) {&#10;      console.log('⚠️ Scroll listener déjà attaché');&#10;      return true;&#10;    } else {&#10;      console.log('❌ Aucun panel trouvé avec les sélecteurs testés');&#10;      return false;&#10;    }&#10;  };&#10;  &#10;  // Essayer immédiatement avec nextTick&#10;  nextTick(() =&gt; {&#10;    if (!findAndAttachListener()) {&#10;      // Si pas trouvé, essayer avec un délai&#10;      console.log('⏰ Nouvelle tentative dans 100ms...');&#10;      setTimeout(() =&gt; {&#10;        if (!findAndAttachListener()) {&#10;          console.log('⏰ Dernière tentative dans 300ms...');&#10;          setTimeout(findAndAttachListener, 300);&#10;        }&#10;      }, 100);&#10;    }&#10;  });&#10;}&#10;&#10;&#10;&#10;/**&#10; * Charger plus de ligues (pagination)&#10; */&#10;async function loadMoreLeagues() {&#10;  console.log(' loadMoreLeagues appelée avec état:', {&#10;    sportId: formData.value.sport_id,&#10;    hasMore: leagueHasMore.value,&#10;    loading: leagueLoading.value,&#10;    currentPage: leagueCurrentPage.value,&#10;    query: leagueSearchQuery.value,&#10;    currentResultsCount: leagueSearchResults.value.length&#10;  });&#10;  &#10;  if (!formData.value.sport_id || !leagueHasMore.value || leagueLoading.value) {&#10;    console.log('❌ loadMoreLeagues bloquée:', {&#10;      noSport: !formData.value.sport_id,&#10;      noMore: !leagueHasMore.value,&#10;      alreadyLoading: leagueLoading.value&#10;    });&#10;    return;&#10;  }&#10;  &#10;  try {&#10;    leagueLoading.value = true;&#10;    leagueCurrentPage.value++;&#10;    &#10;    console.log(' Chargement page', leagueCurrentPage.value, 'pour query:', leagueSearchQuery.value);&#10;    &#10;    const response = await SportService.searchLeaguesBySport(&#10;      formData.value.sport_id,&#10;      leagueSearchQuery.value,&#10;      leagueCurrentPage.value,&#10;      30,&#10;      formData.value.country_id&#10;    );&#10;    &#10;    console.log(' loadMoreLeagues - Réponse API:', {&#10;      data: response.data,&#10;      dataLength: response.data?.length,&#10;      hasMore: response.hasMore,&#10;      pagination: response.pagination,&#10;      fullResponse: response&#10;    });&#10;    &#10;    // Ajouter les nouveaux résultats à la liste existante&#10;    const previousCount = leagueSearchResults.value.length;&#10;    leagueSearchResults.value = [...leagueSearchResults.value, ...response.data];&#10;    leagueHasMore.value = response.hasMore;&#10;    &#10;    console.log('✅ Page chargée:', {&#10;      newLeagues: response.data.length,&#10;      previousTotal: previousCount,&#10;      newTotal: leagueSearchResults.value.length,&#10;      hasMoreAfter: leagueHasMore.value&#10;    });&#10;    &#10;  } catch (error) {&#10;    console.error('❌ Erreur lors du chargement de plus de ligues:', error);&#10;    // Revenir à la page précédente en cas d'erreur&#10;    leagueCurrentPage.value--;&#10;    console.log(' Page remise à:', leagueCurrentPage.value);&#10;  } finally {&#10;    leagueLoading.value = false;&#10;    console.log(' loadMoreLeagues: loading terminé');&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer le défilement du panneau pour le lazy loading&#10; * @param {Event} event - Événement de défilement&#10; */&#10;function handlePanelScroll(event) {&#10;  const panel = event.target;&#10;  const scrollTop = panel.scrollTop;&#10;  const scrollHeight = panel.scrollHeight;&#10;  const clientHeight = panel.clientHeight;&#10;  &#10;  // Calculer le pourcentage de défilement&#10;  const scrollPercentage = (scrollTop + clientHeight) / scrollHeight;&#10;  &#10;  console.log(' Scroll détecté:', {&#10;    scrollTop,&#10;    scrollHeight,&#10;    clientHeight,&#10;    scrollPercentage: Math.round(scrollPercentage * 100) + '%',&#10;    hasMore: leagueHasMore.value,&#10;    loading: leagueLoading.value,&#10;    currentPage: leagueCurrentPage.value,&#10;    resultsCount: leagueSearchResults.value.length&#10;  });&#10;  &#10;  // Si on a atteint 90% du défilement et qu'il y a plus de données&#10;  if (scrollPercentage &gt;= 0.9) {&#10;    console.log(' 90% atteint! État actuel:', {&#10;      hasMore: leagueHasMore.value,&#10;      loading: leagueLoading.value,&#10;      willTrigger: leagueHasMore.value &amp;&amp; !leagueLoading.value&#10;    });&#10;    &#10;    if (leagueHasMore.value &amp;&amp; !leagueLoading.value) {&#10;      console.log(' Déclenchement du lazy loading...');&#10;      loadMoreLeagues();&#10;    } else {&#10;      console.log('❌ Lazy loading non déclenché:', {&#10;        reason: !leagueHasMore.value ? 'Pas de données supplémentaires' : 'Chargement en cours'&#10;      });&#10;    }&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer le changement de ligue (méthode legacy, gardée pour compatibilité)&#10; */&#10;async function onLeagueChange() {&#10;  // Réinitialiser les équipes sélectionnées&#10;  formData.value.team1 = null;&#10;  formData.value.team2 = null;&#10;  &#10;  // Si une ligue est sélectionnée, charger ses équipes&#10;  if (formData.value.league) {&#10;    await loadTeamsByLeague(formData.value.league);&#10;  } else if (formData.value.sport_id) {&#10;    // Sinon, charger toutes les équipes du sport&#10;    await loadTeamsBySport(formData.value.sport_id);&#10;  }&#10;}&#10;&#10;/**&#10; * Valider le formulaire&#10; */&#10;function validateForm() {&#10;  console.log(' validateForm appelée');&#10;  errors.value = {};&#10;  &#10;  if (!formData.value.bet_date) {&#10;    errors.value.bet_date = 'La date du pari est requise';&#10;  }&#10;  &#10;  // Validation optionnelle des équipes (seulement si les deux sont remplies)&#10;  if (formData.value.team1 &amp;&amp; formData.value.team2 &amp;&amp; formData.value.team1 === formData.value.team2) {&#10;    errors.value.team1 = 'Les deux équipes doivent être différentes';&#10;    errors.value.team2 = 'Les deux équipes doivent être différentes';&#10;  }&#10;  &#10;&#10;  &#10;  if (!formData.value.global_odds || formData.value.global_odds &lt; 1) {&#10;    errors.value.global_odds = 'La cote doit être supérieure ou égale à 1';&#10;  }&#10;  &#10;  if (!formData.value.stake || formData.value.stake &lt;= 0) {&#10;    errors.value.stake = 'La mise doit être supérieure à 0';&#10;  }&#10;  &#10;  const isValid = Object.keys(errors.value).length === 0;&#10;  console.log(' Erreurs de validation:', errors.value);&#10;  console.log('✅ Formulaire valide:', isValid);&#10;  return isValid;&#10;}&#10;&#10;/**&#10; * Soumettre le formulaire&#10; */&#10;async function submitForm() {&#10;  console.log(' submitForm appelée');&#10;  console.log(' Données du formulaire:', formData.value);&#10;  console.log('✅ isFormValid:', isFormValid.value);&#10;  &#10;  if (!validateForm()) {&#10;    console.log('❌ Validation échouée');&#10;    return;&#10;  }&#10;  &#10;  console.log('✅ Validation réussie, début de l\'envoi');&#10;  loading.value = true;&#10;  &#10;  try {&#10;    // Préparer les données pour l'API&#10;    const betData = {&#10;      bet_date: formData.value.bet_date.toISOString().split('T')[0], // Format YYYY-MM-DD&#10;      bet_code: events.value.length &gt; 0 ? `Pari combiné (${events.value.length} événements)` : (currentEvent.value.description || formData.value.description || 'Pari libre'),&#10;      global_odds: parseFloat(formData.value.global_odds),&#10;      stake: parseFloat(formData.value.stake),&#10;      stake_type: betTypeValue.value, // Type de mise: 'currency' ou 'percentage'&#10;      result: formData.value.result || 'pending',&#10;      events: eventCards.value.map(eventData =&gt; ({&#10;        id: eventData.id,&#10;        sport_id: eventData.sport_id,&#10;        country_id: eventData.country_id,&#10;        league_id: eventData.league,&#10;        team1_id: eventData.team1,&#10;        team2_id: eventData.team2,&#10;        description: eventData.description,&#10;        result: eventData.result,&#10;        odds: eventData.odds&#10;      })) // Array d'événements basé sur eventCards&#10;    };&#10;    &#10;    console.log(' Données envoyées à l\'API:', betData);&#10;    &#10;    const response = await BetService.createBet(betData);&#10;    &#10;    console.log(' Réponse reçue de l\'API:', response);&#10;    &#10;    if (response.success) {&#10;      toast.add({&#10;        severity: 'success',&#10;        summary: 'Succès',&#10;        detail: 'Pari ajouté avec succès - Données reçues: ' + JSON.stringify(response.data),&#10;        life: 5000&#10;      });&#10;      &#10;      // Émettre l'événement pour informer le parent&#10;      emit('bet-created', response.data);&#10;      &#10;      // Fermer la dialog&#10;      closeDialog();&#10;    } else {&#10;      throw new Error('Erreur lors de la création du pari');&#10;    }&#10;  } catch (error) {&#10;    console.error('❌ Erreur lors de la création du pari:', error);&#10;    toast.add({&#10;      severity: 'error',&#10;      summary: 'Erreur',&#10;      detail: 'Impossible de créer le pari: ' + error.message,&#10;      life: 5000&#10;    });&#10;  } finally {&#10;    loading.value = false;&#10;  }&#10;}&#10;&#10;/**&#10; * Fermer la dialog&#10; */&#10;function closeDialog() {&#10;  visible.value = false;&#10;}&#10;&#10;/**&#10; * Réinitialiser le formulaire&#10; */&#10;function resetForm() {&#10;  formData.value = {&#10;    bet_date: new Date(),&#10;    sport_id: null,&#10;    country_id: null,&#10;    league: null,&#10;    team1: null,&#10;    team2: null,&#10;    global_odds: null,&#10;    stake: null,&#10;    result: 'pending'&#10;  };&#10;  errors.value = {};&#10;  availableLeagues.value = [];&#10;  availableTeams.value = [];&#10;  &#10;  // Réinitialiser les événements et l'événement actuel&#10;  events.value = [];&#10;  currentEvent.value = {&#10;    sport_id: null,&#10;    country_id: null,&#10;    league: null,&#10;    team1: null,&#10;    team2: null,&#10;    bet_code: '',&#10;    description: '',&#10;    result: null,&#10;    odds: null&#10;  };&#10;  &#10;  // Réinitialiser les variables de recherche de pays&#10;  selectedCountry.value = null;&#10;  countrySearchResults.value = [];&#10;  countrySearchQuery.value = '';&#10;  countryCurrentPage.value = 1;&#10;  countryHasMore.value = false;&#10;  countryLoading.value = false;&#10;  &#10;  // Réinitialiser les variables de recherche de ligues&#10;  selectedLeague.value = null;&#10;  leagueSearchResults.value = [];&#10;  leagueSearchQuery.value = '';&#10;  leagueCurrentPage.value = 1;&#10;  leagueHasMore.value = false;&#10;  leagueLoading.value = false;&#10;  &#10;  // Réinitialiser les variables de recherche d'équipes&#10;  selectedTeam1.value = [];&#10;  selectedTeam2.value = [];&#10;  teamSearchResults.value = [];&#10;  teamSearchQuery.value = '';&#10;  teamCurrentPage.value = 1;&#10;  teamHasMore.value = false;&#10;  teamLoading.value = false;&#10;  &#10;  // Nettoyer les event listeners&#10;  cleanupScrollListeners();&#10;}&#10;&#10;/**&#10; * Nettoyer les event listeners de scroll&#10; */&#10;function cleanupScrollListeners() {&#10;  const panels = document.querySelectorAll('.p-autocomplete-panel .p-autocomplete-items, .p-autocomplete-list-container');&#10;  panels.forEach(panel =&gt; {&#10;    if (panel.hasScrollListener) {&#10;      panel.removeEventListener('scroll', handlePanelScroll);&#10;      panel.hasScrollListener = false;&#10;    }&#10;    if (panel.hasTeam1ScrollListener) {&#10;      panel.removeEventListener('scroll', handleTeam1PanelScroll);&#10;      panel.hasTeam1ScrollListener = false;&#10;    }&#10;    if (panel.hasTeam2ScrollListener) {&#10;      panel.removeEventListener('scroll', handleTeam2PanelScroll);&#10;      panel.hasTeam2ScrollListener = false;&#10;    }&#10;&#10;  });&#10;}&#10;&#10;/**&#10; * Supprimer la ligue sélectionnée&#10; */&#10;function clearLeague() {&#10;  selectedLeague.value = null;&#10;  formData.value.league = null;&#10;  // Réinitialiser les équipes quand on supprime la ligue&#10;  selectedTeam1.value = [];&#10;  selectedTeam2.value = [];&#10;  formData.value.team1 = null;&#10;  formData.value.team2 = null;&#10;}&#10;&#10;/**&#10; * Supprimer l'équipe 1 sélectionnée&#10; */&#10;function clearTeam1() {&#10;  selectedTeam1.value = [];&#10;  formData.value.team1 = null;&#10;}&#10;&#10;/**&#10; * Supprimer l'équipe 2 sélectionnée&#10; */&#10;function clearTeam2() {&#10;  selectedTeam2.value = [];&#10;  formData.value.team2 = null;&#10;}&#10;&#10;/**&#10; * Ajouter un pari combiné&#10; */&#10;function addEvent() {&#10;  // Valider que tous les champs requis sont remplis&#10;  if (!formData.value.sport_id || !formData.value.league || !formData.value.team1 || !formData.value.team2 || !currentEvent.value.description) {&#10;    toast.add({&#10;      severity: 'warn',&#10;      summary: 'Champs manquants',&#10;      detail: 'Veuillez remplir tous les champs de l\'événement avant d\'ajouter un nouvel événement.',&#10;      life: 3000&#10;    });&#10;    return;&#10;  }&#10;&#10;  // Créer un nouvel événement avec les données actuelles&#10;  const newEvent = {&#10;    id: Date.now(), // ID temporaire&#10;    sport_id: formData.value.sport_id,&#10;    country_id: formData.value.country_id,&#10;    league: selectedLeague.value,&#10;    team1: selectedTeam1.value,&#10;    team2: selectedTeam2.value,&#10;    bet_code: currentEvent.value.description,&#10;    description: currentEvent.value.description,&#10;    result: currentEvent.value.result,&#10;    odds: currentEvent.value.odds&#10;  };&#10;&#10;  // Ajouter l'événement à la liste&#10;  events.value.push(newEvent);&#10;&#10;  // Réinitialiser les champs pour le prochain événement&#10;  resetEventFields();&#10;&#10;  console.log('✅ Événement ajouté:', newEvent);&#10;   console.log(' Liste des événements:', events.value);&#10;   &#10;   // Recalculer la cote globale&#10;   calculateGlobalOdds();&#10; }&#10;&#10;/**&#10; * Ajouter une nouvelle card d'événement&#10; */&#10;function addEventCard() {&#10;  const newEventCard = {&#10;    id: Date.now(),&#10;    sport_id: null,&#10;    country_id: null,&#10;    league: null,&#10;    team1: null,&#10;    team2: null,&#10;    description: '',&#10;    result: null,&#10;    odds: null,&#10;    selectedSport: [],&#10;    selectedCountry: [],&#10;    selectedLeague: [],&#10;    selectedTeam1: [],&#10;    selectedTeam2: [],&#10;    sportSearchResults: [],&#10;    sportLoading: false,&#10;    countryFilteredResults: [],&#10;    leagueSearchResults: [],&#10;    leagueLoading: false,&#10;    team1SearchResults: [],&#10;    team1Loading: false,&#10;    team2SearchResults: [],&#10;    team2Loading: false&#10;  };&#10;  &#10;  eventCards.value.push(newEventCard);&#10;  console.log('✅ Nouvelle card d\'événement ajoutée:', newEventCard);&#10;}&#10;&#10;/**&#10; * Supprimer une card d'événement&#10; * @param {number} index - Index de la card à supprimer&#10; */&#10;function removeEventCard(index) {&#10;  if (eventCards.value.length &gt; 1) {&#10;    eventCards.value.splice(index, 1);&#10;    console.log('️ Card d\'événement supprimée à l\'index:', index);&#10;  }&#10;}&#10; &#10; /**&#10;  * Supprimer un événement de la liste&#10;  * @param {number} index - Index de l'événement à supprimer&#10;  */&#10; function removeEvent(index) {&#10;   events.value.splice(index, 1);&#10;   &#10;   // Recalculer la cote globale après suppression&#10;   calculateGlobalOdds();&#10;   &#10;   console.log('️ Événement supprimé à l\'index:', index);&#10;   console.log(' Liste des événements mise à jour:', events.value);&#10; }&#10;&#10;/**&#10; * Réinitialiser les champs de l'événement actuel&#10; */&#10;function resetEventFields() {&#10;  // Réinitialiser les champs de l'événement&#10;  formData.value.sport_id = null;&#10;  formData.value.country_id = null;&#10;  formData.value.league = null;&#10;  formData.value.team1 = null;&#10;  formData.value.team2 = null;&#10;  &#10;  // Réinitialiser l'événement actuel&#10;  currentEvent.value.description = '';&#10;  currentEvent.value.result = null;&#10;  currentEvent.value.odds = null;&#10;  &#10;  // Réinitialiser les variables de sélection&#10;  selectedCountry.value = [];&#10;  selectedLeague.value = [];&#10;  selectedTeam1.value = [];&#10;  selectedTeam2.value = [];&#10;  &#10;  // Réinitialiser l'événement actuel&#10;  currentEvent.value = {&#10;    sport_id: null,&#10;    country_id: null,&#10;    league: null,&#10;    team1: null,&#10;    team2: null,&#10;    bet_code: '',&#10;    result: null,&#10;    odds: null&#10;  };&#10;}&#10;&#10;/**&#10; * Calculer la cote globale en multipliant toutes les cotes des événements&#10; */&#10;function calculateGlobalOdds() {&#10;  if (events.value.length === 0) {&#10;    return;&#10;  }&#10;  &#10;  let globalOdds = 1;&#10;  let hasValidOdds = true;&#10;  &#10;  // Inclure la cote de l'événement actuel s'il y en a une&#10;  if (currentEvent.value.odds &amp;&amp; currentEvent.value.odds &gt; 0) {&#10;    globalOdds *= parseFloat(currentEvent.value.odds);&#10;  }&#10;  &#10;  // Multiplier par toutes les cotes des événements ajoutés&#10;  events.value.forEach(event =&gt; {&#10;    if (event.odds &amp;&amp; event.odds &gt; 0) {&#10;      globalOdds *= parseFloat(event.odds);&#10;    } else {&#10;      hasValidOdds = false;&#10;    }&#10;  });&#10;  &#10;  // Mettre à jour la cote globale seulement si toutes les cotes sont valides&#10;  if (hasValidOdds &amp;&amp; globalOdds &gt; 1) {&#10;    formData.value.global_odds = parseFloat(globalOdds.toFixed(2));&#10;  }&#10;}&#10;&#10;/**&#10; * Calculer le résultat global basé sur tous les résultats des événements&#10; */&#10;function calculateGlobalResult() {&#10;  if (events.value.length === 0) {&#10;    return;&#10;  }&#10;  &#10;  let hasAllResults = true;&#10;  let hasWon = true;&#10;  let hasLost = false;&#10;  let hasVoid = false;&#10;  let hasPending = false;&#10;  &#10;  // Inclure le résultat de l'événement actuel&#10;  const allResults = [...events.value.map(e =&gt; e.result)];&#10;  if (currentEvent.value.result) {&#10;    allResults.push(currentEvent.value.result);&#10;  }&#10;  &#10;  allResults.forEach(result =&gt; {&#10;    if (!result) {&#10;      hasAllResults = false;&#10;      return;&#10;    }&#10;    &#10;    switch (result) {&#10;      case 'lost':&#10;        hasLost = true;&#10;        hasWon = false;&#10;        break;&#10;      case 'void':&#10;        hasVoid = true;&#10;        break;&#10;      case 'pending':&#10;        hasPending = true;&#10;        hasWon = false;&#10;        break;&#10;      case 'won':&#10;        // Continue à vérifier les autres&#10;        break;&#10;      default:&#10;        hasWon = false;&#10;    }&#10;  });&#10;  &#10;  // Déterminer le résultat global&#10;  if (!hasAllResults || hasPending) {&#10;    formData.value.result = 'pending';&#10;  } else if (hasLost) {&#10;    formData.value.result = 'lost';&#10;  } else if (hasVoid &amp;&amp; hasWon) {&#10;    formData.value.result = 'won'; // Si certains sont void mais les autres gagnés&#10;  } else if (hasVoid) {&#10;    formData.value.result = 'void';&#10;  } else if (hasWon) {&#10;    formData.value.result = 'won';&#10;  }&#10;}&#10;&#10;/**&#10; * Récupérer le capital actuel de l'utilisateur&#10; */&#10;async function fetchCurrentCapital() {&#10;  try {&#10;    capitalLoading.value = true;&#10;    const response = await BetService.getCapitalEvolution();&#10;    &#10;    if (response.success &amp;&amp; response.data) {&#10;      currentCapital.value = response.current_capital || response.initial_capital || 0;&#10;    }&#10;  } catch (error) {&#10;    console.error('Erreur lors de la récupération du capital actuel:', error);&#10;    currentCapital.value = 0;&#10;  } finally {&#10;    capitalLoading.value = false;&#10;  }&#10;}&#10;&#10;/**&#10; * Calculer la mise en pourcentage du capital&#10; */&#10;function calculatePercentageStake() {&#10;  if (betTypeValue.value === 'percentage' &amp;&amp; formData.value.stake &amp;&amp; currentCapital.value &gt; 0) {&#10;    const percentage = parseFloat(formData.value.stake);&#10;    if (!isNaN(percentage) &amp;&amp; percentage &gt; 0) {&#10;      calculatedStake.value = (currentCapital.value * percentage) / 100;&#10;      return;&#10;    }&#10;  }&#10;  calculatedStake.value = 0;&#10;}&#10;&#10;// Watchers&#10;// Surveiller le changement de type de mise pour récupérer le capital&#10;watch(betTypeValue, async (newValue) =&gt; {&#10;  if (newValue === 'percentage') {&#10;    await fetchCurrentCapital();&#10;  }&#10;  calculatePercentageStake();&#10;});&#10;&#10;// Surveiller les changements de la mise pour recalculer en mode pourcentage&#10;watch(() =&gt; formData.value.stake, () =&gt; {&#10;  calculatePercentageStake();&#10;});&#10;&#10;// Surveiller les changements dans les résultats des événements&#10;watch(&#10;  () =&gt; [events.value.map(e =&gt; e.result), currentEvent.value.result],&#10;  () =&gt; {&#10;    calculateGlobalResult();&#10;  },&#10;  { deep: true }&#10;);&#10;&#10;// Lifecycle&#10;onMounted(async () =&gt; {&#10;  await loadSports();&#10;  await loadCountries();&#10;});&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;.p-invalid {&#10;  border-color: #ef4444;&#10;}&#10;&#10;&#10;&#10;/* Styles personnalisés pour les composants Select */&#10;:deep(.select-custom .p-dropdown-panel) {&#10;  max-width: 100% !important;&#10;  width: auto !important;&#10;}&#10;&#10;:deep(.select-panel-custom) {&#10;  max-width: calc(50vw - 4rem) !important;&#10;  width: auto !important;&#10;  max-height: 200px !important;&#10;  overflow-y: auto !important;&#10;  z-index: 9999 !important;&#10;  position: absolute !important;&#10;}&#10;&#10;@media (max-width: 960px) {&#10;  :deep(.select-panel-custom) {&#10;    max-width: calc(90vw - 4rem) !important;&#10;  }&#10;}&#10;&#10;:deep(.select-panel-custom .p-dropdown-items) {&#10;  max-width: 100% !important;&#10;  max-height: 180px !important;&#10;  overflow-y: auto !important;&#10;}&#10;&#10;:deep(.select-panel-custom .p-dropdown-item) {&#10;  max-width: 100% !important;&#10;  overflow: hidden !important;&#10;  text-overflow: ellipsis !important;&#10;  white-space: nowrap !important;&#10;}&#10;&#10;:deep(.select-custom .p-dropdown-label) {&#10;  max-width: 100% !important;&#10;  overflow: hidden !important;&#10;  text-overflow: ellipsis !important;&#10;  white-space: nowrap !important;&#10;}&#10;&#10;/* Contraindre la modal et ses éléments */&#10;:deep(.p-dialog) {&#10;  overflow: visible !important;&#10;}&#10;&#10;:deep(.p-dialog-content) {&#10;  overflow: visible !important;&#10;}&#10;&#10;&lt;/style&gt;&#10;&#10;&lt;style&gt;&#10;/* Contraindre l'overlay du sélecteur */&#10;.p-select-overlay {&#10;  max-width: calc(50vw - 4rem) !important;&#10;  width: auto !important;&#10;}&#10;&#10;@media (max-width: 960px) {&#10;  .p-select-overlay {&#10;    max-width: calc(90vw - 4rem) !important;&#10;  }&#10;}&#10;&lt;/style&gt;" />
              <option name="updatedContent" value="&lt;template&gt;&#10;  &lt;div class=&quot;container mx-auto p-6 max-w-4xl&quot;&gt;&#10;    &lt;h1 class=&quot;text-2xl font-bold mb-6 text-gray-800&quot;&gt;&#10;      {{ events.length &gt; 1 ? 'Ajouter un pari combiné' : 'Ajouter un pari simple' }}&#10;    &lt;/h1&gt;&#10;    &lt;form @submit.prevent=&quot;submitForm&quot; class=&quot;space-y-4 mb-4&quot;&gt;&#10;      &lt;!-- Date du pari --&gt;&#10;      &lt;div class=&quot;flex flex-col gap-2&quot;&gt;&#10;        &lt;DatePicker &#10;          id=&quot;bet_date&quot; &#10;          v-model=&quot;formData.bet_date&quot; &#10;          dateFormat=&quot;dd/mm/yy&quot; &#10;          :showIcon=&quot;true&quot; &#10;          placeholder=&quot;Date du pari *&quot;&#10;          class=&quot;w-full&quot;&#10;          :class=&quot;{ 'p-invalid': errors.bet_date }&quot;&#10;        /&gt;&#10;        &lt;small v-if=&quot;errors.bet_date&quot; class=&quot;text-red-500 block mt-1&quot;&gt;{{ errors.bet_date }}&lt;/small&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Cards Événements --&gt;&#10;      &lt;div v-for=&quot;(eventData, eventIndex) in eventCards&quot; :key=&quot;eventData.id&quot; class=&quot;border rounded-lg p-4 bg-gray-50 mb-4&quot;&gt;&#10;        &lt;div class=&quot;flex justify-between items-center mb-4&quot;&gt;&#10;          &lt;h3 class=&quot;text-lg font-semibold text-gray-800&quot;&gt;Événement {{ eventIndex + 1 }}&lt;/h3&gt;&#10;          &lt;Button &#10;            v-if=&quot;eventCards.length &gt; 1&quot;&#10;            icon=&quot;pi pi-times&quot; &#10;            class=&quot;p-button-text p-button-sm text-red-500&quot;&#10;            @click=&quot;removeEventCard(eventIndex)&quot;&#10;            aria-label=&quot;Supprimer cet événement&quot;&#10;          /&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;!-- Sport --&gt;&#10;        &lt;div class=&quot;flex flex-col gap-2 mb-4&quot;&gt;&#10;          &lt;div class=&quot;relative&quot;&gt;&#10;            &lt;AutoComplete &#10;              :id=&quot;`sport_${eventIndex}`&quot; &#10;              v-model=&quot;eventData.selectedSport&quot; &#10;              :suggestions=&quot;eventData.sportSearchResults || []&quot; &#10;              @complete=&quot;(event) =&gt; searchSports(event, eventIndex)&quot;&#10;              @item-select=&quot;(event) =&gt; onSportSelect(event, eventIndex)&quot;&#10;              @dropdown-click=&quot;() =&gt; onSportDropdownShow(eventIndex)&quot;&#10;              optionLabel=&quot;name&quot;&#10;              :placeholder=&quot;eventData.selectedSport &amp;&amp; eventData.selectedSport.length &gt; 0 ? '' : 'Sport'&quot;&#10;              class=&quot;w-full max-w-full select-custom&quot;&#10;              :class=&quot;{ 'p-invalid': errors[`sport_id_${eventIndex}`] }&quot;&#10;              :loading=&quot;eventData.sportLoading&quot;&#10;              panelClass=&quot;select-panel-custom&quot;&#10;              @focus=&quot;() =&gt; searchSports({ query: '' }, eventIndex)&quot;&#10;              :minLength=&quot;0&quot;&#10;              selectionLimit=&quot;1&quot;&#10;              dropdown&#10;              dropdownMode=&quot;blank&quot;&#10;              multiple&#10;              display=&quot;chip&quot;&#10;              aria-label=&quot;Rechercher et sélectionner un sport&quot;&#10;              role=&quot;combobox&quot;&#10;              aria-expanded=&quot;false&quot;&#10;              aria-autocomplete=&quot;list&quot;&#10;            &gt;&#10;              &lt;!-- Template pour afficher le sport sélectionné --&gt;&#10;              &lt;template #chip=&quot;slotProps&quot;&gt;&#10;                &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#10;                  &lt;!-- Icône du sport sélectionné --&gt;&#10;                  &lt;img&#10;                    v-if=&quot;slotProps.value &amp;&amp; slotProps.value.img&quot;&#10;                    :src=&quot;`${apiBaseUrl}/storage/sport_icons/${slotProps.value.img.replace('.png', '.svg')}`&quot;&#10;                    :alt=&quot;slotProps.value.name&quot;&#10;                    class=&quot;w-4 h-4 object-contain filter brightness-0&quot;&#10;                    @error=&quot;$event.target.style.display='none'&quot;&#10;                  /&gt;&#10;                  &lt;div &#10;                    v-else-if=&quot;slotProps.value&quot;&#10;                    class=&quot;w-4 h-4 bg-gray-300 rounded-full flex items-center justify-center text-xs text-gray-600&quot;&#10;                  &gt;&#10;                    {{ slotProps.value.name ? slotProps.value.name.charAt(0).toUpperCase() : '?' }}&#10;                  &lt;/div&gt;&#10;                  &lt;!-- Nom du sport sélectionné --&gt;&#10;                  &lt;span&gt;{{ slotProps.value ? slotProps.value.name : '' }}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/template&gt;&#10;              &#10;              &lt;!-- Template pour les options du dropdown --&gt;&#10;              &lt;template #option=&quot;slotProps&quot;&gt;&#10;                &lt;div class=&quot;flex items-center gap-2 truncate max-w-full&quot; :title=&quot;slotProps.option.name&quot;&gt;&#10;                  &lt;!-- Icône du sport --&gt;&#10;                  &lt;img&#10;                    v-if=&quot;slotProps.option.img&quot;&#10;                    :src=&quot;`${apiBaseUrl}/storage/sport_icons/${slotProps.option.img.replace('.png', '.svg')}`&quot;&#10;                    :alt=&quot;slotProps.option.name&quot;&#10;                    class=&quot;w-5 h-5 object-contain flex-shrink-0 filter brightness-0&quot;&#10;                    @error=&quot;$event.target.style.display='none'&quot;&#10;                  /&gt;&#10;                  &lt;div &#10;                    v-else&#10;                    class=&quot;w-5 h-5 bg-gray-300 rounded-full flex items-center justify-center text-xs text-gray-600 flex-shrink-0&quot;&#10;                  &gt;&#10;                    {{ slotProps.option.name ? slotProps.option.name.charAt(0).toUpperCase() : '?' }}&#10;                  &lt;/div&gt;&#10;                  &lt;!-- Nom du sport --&gt;&#10;                  &lt;span class=&quot;truncate&quot;&gt;{{ slotProps.option.name }}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/template&gt;&#10;            &lt;/AutoComplete&gt;&#10;          &lt;/div&gt;&#10;          &lt;small v-if=&quot;errors[`sport_id_${eventIndex}`]&quot; class=&quot;text-red-500 block mt-1&quot;&gt;{{ errors[`sport_id_${eventIndex}`] }}&lt;/small&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Champs conditionnels selon le sport --&gt;&#10;        &lt;div v-if=&quot;eventData.sport_id&quot; class=&quot;space-y-4 mb-4&quot;&gt;&#10;          &lt;!-- Pays --&gt;&#10;          &lt;div class=&quot;flex flex-col gap-2&quot;&gt;&#10;            &lt;div class=&quot;relative&quot;&gt;&#10;              &lt;AutoComplete &#10;                :id=&quot;`country_${eventIndex}`&quot; &#10;                v-model=&quot;eventData.selectedCountry&quot; &#10;                :suggestions=&quot;eventData.countryFilteredResults || []&quot; &#10;                @complete=&quot;(event) =&gt; searchCountries(event, eventIndex)&quot;&#10;                @item-select=&quot;(event) =&gt; onCountrySelect(event, eventIndex)&quot;&#10;                optionLabel=&quot;name&quot;&#10;                :placeholder=&quot;eventData.selectedCountry &amp;&amp; eventData.selectedCountry.length &gt; 0 ? '' : 'Pays'&quot;&#10;                class=&quot;w-full max-w-full select-custom&quot;&#10;                :class=&quot;{ 'p-invalid': errors[`country_id_${eventIndex}`] }&quot;&#10;                :minLength=&quot;0&quot;&#10;                dropdown&#10;                dropdownMode=&quot;blank&quot;&#10;                multiple&#10;                display=&quot;chip&quot;&#10;                aria-label=&quot;Rechercher et sélectionner un pays&quot;&#10;                role=&quot;combobox&quot;&#10;                aria-expanded=&quot;false&quot;&#10;                aria-autocomplete=&quot;list&quot;&#10;            &gt;&#10;                &lt;!-- Template pour afficher le pays sélectionné avec son drapeau --&gt;&#10;                &lt;template #chip=&quot;slotProps&quot;&gt;&#10;                  &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#10;                    &lt;!-- Drapeau du pays sélectionné --&gt;&#10;                    &lt;img &#10;                      v-if=&quot;slotProps.value &amp;&amp; slotProps.value.id&quot;&#10;                      :src=&quot;`${apiBaseUrl}/storage/country_flags/${slotProps.value.id}.png`&quot; &#10;                      :alt=&quot;slotProps.value.name&quot;&#10;                      class=&quot;w-4 h-4 rounded object-cover flex-shrink-0&quot; &#10;                      @error=&quot;$event.target.style.display='none'&quot;&#10;                    /&gt;&#10;                    &lt;!-- Nom du pays sélectionné --&gt;&#10;                    &lt;span&gt;{{ slotProps.value ? slotProps.value.name : '' }}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/template&gt;&#10;                &#10;                &lt;!-- Template pour les options du dropdown --&gt;&#10;                &lt;template #option=&quot;slotProps&quot;&gt;&#10;                  &lt;div class=&quot;flex items-center gap-2 truncate max-w-full&quot; :title=&quot;slotProps.option.name&quot;&gt;&#10;                    &lt;!-- Drapeau du pays --&gt;&#10;                    &lt;img &#10;                      v-if=&quot;slotProps.option.id&quot;&#10;                      :src=&quot;`${apiBaseUrl}/storage/country_flags/${slotProps.option.id}.png`&quot; &#10;                      :alt=&quot;slotProps.option.name&quot;&#10;                      class=&quot;w-4 h-4 rounded object-cover flex-shrink-0&quot; &#10;                      @error=&quot;$event.target.style.display='none'&quot;&#10;                    /&gt;&#10;                    &lt;!-- Nom du pays --&gt;&#10;                    &lt;span class=&quot;truncate&quot;&gt;{{ slotProps.option.name }}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/template&gt;&#10;&#10;              &lt;/AutoComplete&gt;&#10;            &lt;/div&gt;&#10;            &lt;small v-if=&quot;errors.country_id&quot; class=&quot;text-red-500 block mt-1&quot;&gt;{{ errors.country_id }}&lt;/small&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;!-- Ligue --&gt;&#10;          &lt;div class=&quot;flex flex-col gap-2&quot;&gt;&#10;            &lt;div class=&quot;relative&quot;&gt;&#10;              &lt;AutoComplete &#10;                :id=&quot;`league-${eventIndex}`&quot; &#10;                v-model=&quot;eventData.selectedLeague&quot; &#10;                :suggestions=&quot;eventData.leagueSearchResults&quot; &#10;                @complete=&quot;(event) =&gt; searchLeagues(event, eventIndex)&quot;&#10;                @item-select=&quot;(event) =&gt; onLeagueSelect(event, eventIndex)&quot;&#10;                optionLabel=&quot;name&quot;&#10;                :placeholder=&quot;eventData.selectedLeague &amp;&amp; eventData.selectedLeague.length &gt; 0 ? '' : 'Ligue'&quot;&#10;                class=&quot;w-full max-w-full select-custom&quot;&#10;                :class=&quot;{ 'p-invalid': errors[`league-${eventIndex}`] }&quot;&#10;                :loading=&quot;eventData.leagueLoading&quot;&#10;                :disabled=&quot;!eventData.sport_id&quot;&#10;                panelClass=&quot;select-panel-custom&quot;&#10;                @show=&quot;() =&gt; onLeagueDropdownShow(eventIndex)&quot;&#10;                @focus=&quot;() =&gt; searchLeagues({ query: '' }, eventIndex)&quot;&#10;                :minLength=&quot;0&quot;&#10;                dropdown&#10;                dropdownMode=&quot;blank&quot;&#10;                multiple&#10;                display=&quot;chip&quot;&#10;                aria-label=&quot;Rechercher et sélectionner une ligue&quot;&#10;                role=&quot;combobox&quot;&#10;                aria-expanded=&quot;false&quot;&#10;                aria-autocomplete=&quot;list&quot;&#10;              &gt;&#10;                &lt;!-- Template pour afficher la ligue sélectionnée avec son logo --&gt;&#10;                 &lt;template #chip=&quot;slotProps&quot;&gt;&#10;                   &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#10;                     &#10;                     &lt;!-- Logo de la ligue --&gt;&#10;                     &lt;img &#10;                       v-if=&quot;slotProps.value.id&quot;&#10;                       :src=&quot;`${apiBaseUrl}/storage/league_logos/${slotProps.value.id}.png`&quot; &#10;                       :alt=&quot;slotProps.value.name&quot;&#10;                       class=&quot;w-4 h-4 rounded object-cover flex-shrink-0&quot; &#10;                       @error=&quot;$event.target.style.display='none'&quot;&#10;                     /&gt;&#10;                     &lt;!-- Nom de la ligue --&gt;&#10;                     &lt;span&gt;{{ slotProps.value ? slotProps.value.name : '' }}&lt;/span&gt;&#10;                   &lt;/div&gt;&#10;                 &lt;/template&gt;&#10;                &lt;template #option=&quot;slotProps&quot;&gt;&#10;                  &lt;div class=&quot;flex items-center gap-2 truncate max-w-full&quot; :title=&quot;slotProps.option.name&quot;&gt;&#10;                    &lt;!-- Drapeau du pays --&gt;&#10;                    &lt;img &#10;                       v-if=&quot;slotProps.option.country_id&quot;&#10;                       :src=&quot;`${apiBaseUrl}/storage/country_flags/${slotProps.option.country_id}.png`&quot; &#10;                       :alt=&quot;slotProps.option.country?.name || 'Pays'&quot;&#10;                       class=&quot;w-4 h-4 rounded object-cover flex-shrink-0&quot; &#10;                       @error=&quot;$event.target.style.display='none'&quot;&#10;                     /&gt;&#10;                    &lt;!-- Logo de la ligue --&gt;&#10;                    &lt;img &#10;                      v-if=&quot;slotProps.option.img&quot;&#10;                      :src=&quot;`${apiBaseUrl}/storage/${slotProps.option.img}`&quot; &#10;                      :alt=&quot;slotProps.option.name&quot;&#10;                      class=&quot;w-4 h-4 rounded object-cover flex-shrink-0&quot; &#10;                      @error=&quot;$event.target.style.display='none'&quot;&#10;                    /&gt;&#10;                    &lt;!-- Nom de la ligue --&gt;&#10;                    &lt;span class=&quot;truncate&quot;&gt;{{ slotProps.option.name }}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/template&gt;&#10;                &#10;                &lt;template #footer v-if=&quot;leagueHasMore&quot;&gt;&#10;                  &lt;div class=&quot;flex justify-center items-center p-2&quot; v-if=&quot;leagueLoading&quot;&gt;&#10;                    &lt;i class=&quot;pi pi-spin pi-spinner&quot;&gt;&lt;/i&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div class=&quot;text-center p-2 text-sm text-gray-500&quot; v-else&gt;&#10;                    Faites défiler pour charger plus de résultats&#10;                  &lt;/div&gt;&#10;                &lt;/template&gt;&#10;              &lt;/AutoComplete&gt;&#10;            &lt;/div&gt;&#10;            &lt;small v-if=&quot;errors[`league-${eventIndex}`]&quot; class=&quot;text-red-500 block mt-1&quot;&gt;{{ errors[`league-${eventIndex}`] }}&lt;/small&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;!-- Équipes --&gt;&#10;          &lt;div class=&quot;space-y-4&quot;&gt;&#10;            &lt;!-- Équipe 1 --&gt;&#10;            &lt;div class=&quot;flex flex-col gap-2&quot;&gt;&#10;              &lt;div class=&quot;relative&quot;&gt;&#10;                &lt;AutoComplete &#10;                  :id=&quot;`team1-${eventIndex}`&quot; &#10;                  v-model=&quot;eventData.selectedTeam1&quot; &#10;                  :suggestions=&quot;eventData.team1SearchResults&quot; &#10;                  @complete=&quot;(event) =&gt; searchTeam1(event, eventIndex)&quot;&#10;                  @item-select=&quot;(event) =&gt; onTeam1Select(event, eventIndex)&quot;&#10;                  optionLabel=&quot;name&quot;&#10;                  :placeholder=&quot;eventData.selectedTeam1 &amp;&amp; eventData.selectedTeam1.length &gt; 0 ? '' : 'Équipe 1'&quot;&#10;                  class=&quot;w-full max-w-full select-custom&quot;&#10;                  :class=&quot;{ 'p-invalid': errors[`team1-${eventIndex}`] }&quot;&#10;                  :loading=&quot;eventData.team1Loading&quot;&#10;                  :disabled=&quot;!eventData.sport_id&quot;&#10;                  panelClass=&quot;select-panel-custom&quot;&#10;                  @show=&quot;() =&gt; onTeam1DropdownShow(eventIndex)&quot;&#10;                  @focus=&quot;() =&gt; searchTeam1({ query: '' }, eventIndex)&quot;&#10;                  :minLength=&quot;0&quot;&#10;                  dropdown&#10;                  dropdownMode=&quot;blank&quot;&#10;                  multiple&#10;                  display=&quot;chip&quot;&#10;                  aria-label=&quot;Rechercher et sélectionner l'équipe 1&quot;&#10;                  role=&quot;combobox&quot;&#10;                  aria-expanded=&quot;false&quot;&#10;                  aria-autocomplete=&quot;list&quot;&#10;                &gt;&#10;                  &lt;!-- Template pour afficher l'équipe 1 sélectionnée avec son logo --&gt;&#10;                   &lt;template #chip=&quot;slotProps&quot;&gt;&#10;                     &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#10;                       &lt;!-- Logo de l'équipe --&gt;&#10;                       &lt;img &#10;                         v-if=&quot;slotProps.value.id&quot;&#10;                         :src=&quot;`${apiBaseUrl}/storage/team_logos/${slotProps.value.id}.png`&quot; &#10;                         :alt=&quot;slotProps.value.name&quot;&#10;                         class=&quot;w-4 h-4 rounded object-cover flex-shrink-0&quot; &#10;                         @error=&quot;$event.target.style.display='none'&quot;&#10;                       /&gt;&#10;                       &lt;!-- Nom de l'équipe --&gt;&#10;                       &lt;span&gt;{{ slotProps.value ? slotProps.value.name : '' }}&lt;/span&gt;&#10;                     &lt;/div&gt;&#10;                   &lt;/template&gt;&#10;                  &lt;template #option=&quot;slotProps&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center gap-2 truncate max-w-full&quot; :title=&quot;slotProps.option.name&quot;&gt;&#10;                      &lt;!-- Logo de l'équipe --&gt;&#10;                      &lt;img &#10;                        v-if=&quot;slotProps.option.img&quot;&#10;                        :src=&quot;`${apiBaseUrl}/storage/${slotProps.option.img}`&quot; &#10;                        :alt=&quot;slotProps.option.name&quot;&#10;                        class=&quot;w-4 h-4 rounded object-cover flex-shrink-0&quot; &#10;                        @error=&quot;$event.target.style.display='none'&quot;&#10;                      /&gt;&#10;                      &lt;!-- Nom de l'équipe --&gt;&#10;                      &lt;span class=&quot;truncate&quot;&gt;{{ slotProps.option.name }}&lt;/span&gt;&#10;                      &lt;span v-if=&quot;slotProps.option.league_name&quot; class=&quot;text-sm text-gray-500 ml-2&quot;&gt;&#10;                        ({{ slotProps.option.league_name }})&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/template&gt;&#10;                  &#10;                  &lt;template #footer v-if=&quot;team1HasMore&quot;&gt;&#10;                    &lt;div class=&quot;flex justify-center items-center p-2&quot; v-if=&quot;team1Loading&quot;&gt;&#10;                      &lt;i class=&quot;pi pi-spin pi-spinner&quot;&gt;&lt;/i&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;text-center p-2 text-sm text-gray-500&quot; v-else&gt;&#10;                      Faites défiler pour charger plus de résultats&#10;                    &lt;/div&gt;&#10;                  &lt;/template&gt;&#10;                &lt;/AutoComplete&gt;&#10;              &lt;/div&gt;&#10;              &lt;small v-if=&quot;errors[`team1-${eventIndex}`]&quot; class=&quot;text-red-500 block mt-1&quot;&gt;{{ errors[`team1-${eventIndex}`] }}&lt;/small&gt;&#10;            &lt;/div&gt;&#10;            &#10;            &lt;!-- Équipe 2 --&gt;&#10;            &lt;div class=&quot;flex flex-col gap-2&quot;&gt;&#10;              &lt;div class=&quot;relative&quot;&gt;&#10;                  &lt;AutoComplete &#10;                    :id=&quot;`team2-${eventIndex}`&quot; &#10;                    v-model=&quot;eventData.selectedTeam2&quot; &#10;                    :suggestions=&quot;eventData.team2SearchResults&quot; &#10;                    @complete=&quot;(event) =&gt; searchTeam2(event, eventIndex)&quot;&#10;                    @item-select=&quot;(event) =&gt; onTeam2Select(event, eventIndex)&quot;&#10;                    optionLabel=&quot;name&quot;&#10;                    :placeholder=&quot;eventData.selectedTeam2 &amp;&amp; eventData.selectedTeam2.length &gt; 0 ? '' : 'Équipe 2'&quot;&#10;                    class=&quot;w-full max-w-full select-custom&quot;&#10;                    :class=&quot;{ 'p-invalid': errors[`team2-${eventIndex}`] }&quot;&#10;                    :loading=&quot;eventData.team2Loading&quot;&#10;                    :disabled=&quot;!eventData.sport_id&quot;&#10;                    panelClass=&quot;select-panel-custom&quot;&#10;                    @show=&quot;() =&gt; onTeam2DropdownShow(eventIndex)&quot;&#10;                    @focus=&quot;() =&gt; searchTeam2({ query: '' }, eventIndex)&quot;&#10;                    :minLength=&quot;0&quot;&#10;                    dropdown&#10;                    dropdownMode=&quot;blank&quot;&#10;                    multiple&#10;                    display=&quot;chip&quot;&#10;                    aria-label=&quot;Rechercher et sélectionner l'équipe 2&quot;&#10;                    role=&quot;combobox&quot;&#10;                    aria-expanded=&quot;false&quot;&#10;                    aria-autocomplete=&quot;list&quot;&#10;                  &gt;&#10;                    &lt;!-- Template pour afficher l'équipe 2 sélectionnée avec son logo --&gt;&#10;                     &lt;template #chip=&quot;slotProps&quot;&gt;&#10;                       &lt;div class=&quot;flex items-center gap-2&quot;&gt;&#10;                         &lt;!-- Logo de l'équipe --&gt;&#10;                         &lt;img &#10;                           v-if=&quot;slotProps.value.id&quot;&#10;                           :src=&quot;`${apiBaseUrl}/storage/team_logos/${slotProps.value.id}.png`&quot; &#10;                           :alt=&quot;slotProps.value.name&quot;&#10;                           class=&quot;w-4 h-4 rounded object-cover flex-shrink-0&quot; &#10;                           @error=&quot;$event.target.style.display='none'&quot;&#10;                         /&gt;&#10;                         &lt;!-- Nom de l'équipe --&gt;&#10;                         &lt;span&gt;{{ slotProps.value ? slotProps.value.name : '' }}&lt;/span&gt;&#10;                       &lt;/div&gt;&#10;                     &lt;/template&gt;&#10;                    &lt;template #option=&quot;slotProps&quot;&gt;&#10;                      &lt;div class=&quot;flex items-center gap-2 truncate max-w-full&quot; :title=&quot;slotProps.option.name&quot;&gt;&#10;                        &lt;!-- Logo de l'équipe --&gt;&#10;                        &lt;img &#10;                          v-if=&quot;slotProps.option.img&quot;&#10;                          :src=&quot;`${apiBaseUrl}/storage/${slotProps.option.img}`&quot; &#10;                          :alt=&quot;slotProps.option.name&quot;&#10;                          class=&quot;w-4 h-4 rounded object-cover flex-shrink-0&quot; &#10;                          @error=&quot;$event.target.style.display='none'&quot;&#10;                        /&gt;&#10;                        &lt;!-- Nom de l'équipe --&gt;&#10;                        &lt;span class=&quot;truncate&quot;&gt;{{ slotProps.option.name }}&lt;/span&gt;&#10;                        &lt;span v-if=&quot;slotProps.option.league_name&quot; class=&quot;text-sm text-gray-500 ml-2&quot;&gt;&#10;                          ({{ slotProps.option.league_name }})&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/template&gt;&#10;                    &#10;                    &lt;template #footer v-if=&quot;team2HasMore&quot;&gt;&#10;                      &lt;div class=&quot;flex justify-center items-center p-2&quot; v-if=&quot;team2Loading&quot;&gt;&#10;                        &lt;i class=&quot;pi pi-spin pi-spinner&quot;&gt;&lt;/i&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div class=&quot;text-center p-2 text-sm text-gray-500&quot; v-else&gt;&#10;                        Faites défiler pour charger plus de résultats&#10;                      &lt;/div&gt;&#10;                    &lt;/template&gt;&#10;                  &lt;/AutoComplete&gt;&#10;                &lt;/div&gt;&#10;                &lt;small v-if=&quot;errors[`team2-${eventIndex}`]&quot; class=&quot;text-red-500 block mt-1&quot;&gt;{{ errors[`team2-${eventIndex}`] }}&lt;/small&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;!-- Description de l'événement --&gt;&#10;        &lt;div class=&quot;flex flex-col gap-2 mb-4&quot;&gt;&#10;          &lt;InputText &#10;            :id=&quot;`event_description_${eventIndex}`&quot; &#10;            v-model=&quot;eventData.description&quot; &#10;            placeholder=&quot;Description de l'événement *&quot;&#10;            class=&quot;w-full&quot;&#10;            :class=&quot;{ 'p-invalid': errors[`event_description-${eventIndex}`] }&quot;&#10;          /&gt;&#10;          &lt;small v-if=&quot;errors[`event_description-${eventIndex}`]&quot; class=&quot;text-red-500 block mt-1&quot;&gt;{{ errors[`event_description-${eventIndex}`] }}&lt;/small&gt;&#10;        &lt;/div&gt;&#10;&#10;            &lt;!-- Champs spécifiques à l'événement pour les paris combinés --&gt;&#10;            &lt;div v-if=&quot;events.length &gt; 0&quot; class=&quot;space-y-4&quot;&gt;&#10;              &lt;!-- Résultat de l'événement --&gt;&#10;              &lt;div class=&quot;flex flex-col gap-2&quot;&gt;&#10;                &lt;Select &#10;                  :id=&quot;`event_result_${eventIndex}`&quot; &#10;                  v-model=&quot;eventData.result&quot; &#10;                  :options=&quot;resultOptions&quot; &#10;                  optionLabel=&quot;label&quot; &#10;                  optionValue=&quot;value&quot;&#10;                  placeholder=&quot;Résultat de l'événement *&quot;&#10;                  class=&quot;w-full select-custom&quot;&#10;                  :class=&quot;{ 'p-invalid': errors[`event_result-${eventIndex}`] }&quot;&#10;                  panelClass=&quot;select-panel-custom&quot;&#10;                  aria-label=&quot;Sélectionner le résultat de l'événement&quot;&#10;                /&gt;&#10;                &lt;small v-if=&quot;errors[`event_result-${eventIndex}`]&quot; class=&quot;text-red-500 block mt-1&quot;&gt;{{ errors[`event_result-${eventIndex}`] }}&lt;/small&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;!-- Cote de l'événement --&gt;&#10;              &lt;div class=&quot;flex flex-col gap-2&quot;&gt;&#10;                &lt;InputText &#10;                  :id=&quot;`event_odds_${eventIndex}`&quot; &#10;                  :ref=&quot;`eventOddsInput_${eventIndex}`&quot;&#10;                  v-model=&quot;eventData.odds&quot; &#10;                  placeholder=&quot;Cote de l'événement *&quot;&#10;                  class=&quot;w-full&quot;&#10;                  :class=&quot;{ 'p-invalid': errors[`event_odds-${eventIndex}`] }&quot;&#10;                  type=&quot;text&quot;&#10;                  @input=&quot;(e) =&gt; handleEventOddsInput(e, eventIndex)&quot;&#10;                  @keypress=&quot;handleEventOddsKeypress&quot;&#10;                /&gt;&#10;                &lt;small v-if=&quot;errors[`event_odds-${eventIndex}`]&quot; class=&quot;text-red-500 block mt-1&quot;&gt;{{ errors[`event_odds-${eventIndex}`] }}&lt;/small&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;&#10;&#10;          &lt;!-- Bouton Ajouter un pari combiné --&gt;&#10;          &lt;div class=&quot;flex justify-center mt-4 mb-4&quot;&gt;&#10;            &lt;Button &#10;              type=&quot;button&quot; &#10;              label=&quot;Ajouter un pari combiné&quot; &#10;              icon=&quot;pi pi-plus&quot; &#10;              class=&quot;p-button-outlined p-button-sm&quot;&#10;              @click=&quot;addEventCard&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;    &lt;/form&gt;&#10;&#10;      &lt;!-- Liste des événements ajoutés --&gt;&#10;      &lt;div v-if=&quot;events.length &gt; 0&quot; class=&quot;border rounded-lg p-4 bg-blue-50&quot;&gt;&#10;        &lt;h3 class=&quot;text-lg font-semibold mb-4 text-blue-800&quot;&gt;Événements du pari combiné ({{ events.length }})&lt;/h3&gt;&#10;        &#10;        &lt;div class=&quot;space-y-3&quot;&gt;&#10;          &lt;div v-for=&quot;(event, index) in events&quot; :key=&quot;event.id&quot; class=&quot;bg-white p-3 rounded border&quot;&gt;&#10;            &lt;div class=&quot;flex justify-between items-start&quot;&gt;&#10;              &lt;div class=&quot;flex-1&quot;&gt;&#10;                &lt;div class=&quot;text-sm font-medium text-gray-800 mb-1&quot;&gt;&#10;                  Événement {{ index + 1 }}&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;text-sm text-gray-600 mb-2&quot;&gt;&#10;                  {{ event.team1?.name }} vs {{ event.team2?.name }}&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;text-xs text-gray-500 mb-1&quot;&gt;&#10;                  {{ event.league?.name }}&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;text-sm text-gray-700 mb-1&quot;&gt;&#10;                  {{ event.description }}&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;flex gap-4 text-xs&quot;&gt;&#10;                  &lt;span v-if=&quot;event.odds&quot; class=&quot;text-green-600 font-medium&quot;&gt;&#10;                    Cote: {{ event.odds }}&#10;                  &lt;/span&gt;&#10;                  &lt;span v-if=&quot;event.result&quot; class=&quot;font-medium&quot; :class=&quot;{&#10;                    'text-green-600': event.result === 'won',&#10;                    'text-red-600': event.result === 'lost',&#10;                    'text-yellow-600': event.result === 'pending',&#10;                    'text-gray-600': event.result === 'void'&#10;                  }&quot;&gt;&#10;                    Résultat: {{ resultOptions.find(r =&gt; r.value === event.result)?.label || event.result }}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;Button &#10;                icon=&quot;pi pi-times&quot; &#10;                class=&quot;p-button-text p-button-sm text-red-500&quot;&#10;                @click=&quot;removeEvent(index)&quot;&#10;                aria-label=&quot;Supprimer cet événement&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Cote, Mise et Type --&gt;&#10;      &lt;div class=&quot;grid grid-cols-3 sm:grid-cols-4 gap-1 overflow-hidden&quot;&gt;&#10;        &lt;!-- Cote --&gt;&#10;        &lt;div class=&quot;flex flex-col justify-center min-w-0 w-full&quot;&gt;&#10;          &lt;div class=&quot;w-full&quot;&gt;&#10;            &lt;InputText &#10;              id=&quot;global_odds&quot; &#10;              v-model=&quot;formData.global_odds&quot; &#10;              type=&quot;text&quot;&#10;              placeholder=&quot;Cote&quot;&#10;              class=&quot;w-full text-xs&quot;&#10;              :class=&quot;{ 'p-invalid': errors.global_odds }&quot;&#10;              @input=&quot;handleOddsInput&quot;&#10;              @keypress=&quot;handleOddsKeypress&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;small v-if=&quot;errors.global_odds&quot; class=&quot;text-red-500 text-xs truncate&quot;&gt;{{ errors.global_odds }}&lt;/small&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;!-- Mise --&gt;&#10;        &lt;div class=&quot;flex flex-col justify-center min-w-0 w-full&quot;&gt;&#10;          &lt;div class=&quot;w-full&quot;&gt;&#10;            &lt;InputText &#10;              id=&quot;stake&quot; &#10;              v-model=&quot;formData.stake&quot; &#10;              type=&quot;text&quot;&#10;              :placeholder=&quot;betTypeValue === 'currency' ? 'Mise en €' : betTypeValue === 'percentage' ? 'Mise en %' : 'Mise'&quot;&#10;              class=&quot;w-full text-xs&quot;&#10;              :class=&quot;{ 'p-invalid': errors.stake }&quot;&#10;              @input=&quot;handleStakeInput&quot;&#10;              @keypress=&quot;handleStakeKeypress&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;small v-if=&quot;errors.stake&quot; class=&quot;text-red-500 text-xs truncate&quot;&gt;{{ errors.stake }}&lt;/small&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Type de mise --&gt;&#10;        &lt;div class=&quot;flex flex-col justify-center min-w-0 w-full&quot;&gt;&#10;          &lt;div class=&quot;w-full flex items-center&quot;&gt;&#10;            &lt;SelectButton &#10;              v-model=&quot;betTypeValue&quot; &#10;              :options=&quot;betTypeOptions&quot; &#10;              optionLabel=&quot;symbol&quot; &#10;              optionValue=&quot;value&quot;&#10;              class=&quot;h-8 text-xs w-full&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Gain potentiel (desktop uniquement) --&gt;&#10;        &lt;div class=&quot;hidden sm:flex flex-col justify-center min-w-0 w-full mt-4 mb-4&quot;&gt;&#10;          &lt;div class=&quot;w-full&quot;&gt;&#10;            &lt;div class=&quot;p-2 bg-gray-50 rounded border text-xs font-semibold text-green-600 h-8 flex items-center justify-center&quot;&gt;&#10;              {{ potentialWin.toFixed(2) }} €&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;small class=&quot;text-gray-500 text-xs text-center&quot;&gt;Gain potentiel&lt;/small&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Section détaillée du gain potentiel (mode pourcentage uniquement) --&gt;&#10;      &lt;div v-if=&quot;betTypeValue === 'percentage'&quot; class=&quot;flex flex-col gap-2 mb-4 mt-4&quot;&gt;&#10;        &lt;div class=&quot;p-4 bg-gray-50 rounded border&quot;&gt;&#10;          &lt;h4 class=&quot;text-sm font-semibold text-gray-800 mb-3&quot;&gt;Détails du gain potentiel&lt;/h4&gt;&#10;          &#10;          &lt;!-- Capital actuel --&gt;&#10;          &lt;div class=&quot;flex justify-between items-center mb-2&quot;&gt;&#10;            &lt;span class=&quot;text-sm text-gray-600&quot;&gt;Capital actuel :&lt;/span&gt;&#10;            &lt;span class=&quot;text-sm font-medium&quot;&gt;&#10;              &lt;i v-if=&quot;capitalLoading&quot; class=&quot;pi pi-spin pi-spinner text-xs&quot;&gt;&lt;/i&gt;&#10;              &lt;span v-else&gt;{{ currentCapital.toFixed(2) }} €&lt;/span&gt;&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &#10;          &lt;!-- Mise calculée --&gt;&#10;          &lt;div v-if=&quot;calculatedStake &gt; 0&quot; class=&quot;flex justify-between items-center mb-2&quot;&gt;&#10;            &lt;span class=&quot;text-sm text-gray-600&quot;&gt;Mise calculée ({{ formData.stake }}%) :&lt;/span&gt;&#10;            &lt;span class=&quot;text-sm font-medium text-blue-600&quot;&gt;{{ calculatedStake.toFixed(2) }} €&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &#10;          &lt;!-- Cote --&gt;&#10;          &lt;div v-if=&quot;formData.global_odds&quot; class=&quot;flex justify-between items-center mb-2&quot;&gt;&#10;            &lt;span class=&quot;text-sm text-gray-600&quot;&gt;Cote :&lt;/span&gt;&#10;            &lt;span class=&quot;text-sm font-medium&quot;&gt;{{ parseFloat(formData.global_odds).toFixed(2) }}&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &#10;          &lt;!-- Gain potentiel --&gt;&#10;          &lt;div class=&quot;flex justify-between items-center pt-2 border-t border-gray-200&quot;&gt;&#10;            &lt;span class=&quot;text-sm font-semibold text-gray-800&quot;&gt;Gain potentiel :&lt;/span&gt;&#10;            &lt;span class=&quot;text-lg font-bold text-green-600&quot;&gt;{{ potentialWin.toFixed(2) }} €&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Gain potentiel simple (mode devise uniquement) --&gt;&#10;      &lt;div v-if=&quot;betTypeValue === 'currency'&quot; class=&quot;flex flex-col gap-2 mt-4 mb-4&quot;&gt;&#10;        &lt;div class=&quot;p-3 bg-gray-50 rounded border text-lg font-semibold text-green-600 text-center&quot;&gt;&#10;          Gain potentiel : {{ potentialWin.toFixed(2) }} €&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;!-- Résultat (optionnel) --&gt;&#10;      &lt;div class=&quot;flex flex-col sm:flex-row sm:items-center gap-2&quot;&gt;&#10;        &lt;div class=&quot;flex-1&quot;&gt;&#10;          &lt;Select &#10;            id=&quot;result&quot; &#10;            v-model=&quot;formData.result&quot; &#10;            :options=&quot;resultOptions&quot; &#10;            optionLabel=&quot;label&quot; &#10;            optionValue=&quot;value&quot; &#10;            placeholder=&quot;Sélectionner un résultat&quot;&#10;            class=&quot;w-full&quot;&#10;          /&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;flex justify-end gap-2 mt-4&quot;&gt;&#10;      &lt;Button &#10;        label=&quot;Annuler&quot; &#10;        icon=&quot;pi pi-times&quot; &#10;        @click=&quot;closeDialog&quot; &#10;        class=&quot;p-button-text&quot;&#10;      /&gt;&#10;      &lt;Button &#10;        label=&quot;Ajouter le pari&quot; &#10;        icon=&quot;pi pi-check&quot; &#10;        @click=&quot;submitForm&quot; &#10;        :loading=&quot;loading&quot;&#10;        :disabled=&quot;!isFormValid&quot;&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup&gt;&#10;import { ref, reactive, computed, onMounted, nextTick, watch } from 'vue';&#10;// Dialog import supprimé car ce n'est plus un Dialog&#10;import Button from 'primevue/button';&#10;import InputText from 'primevue/inputtext';&#10;import InputNumber from 'primevue/inputnumber';&#10;import DatePicker from 'primevue/datepicker';&#10;import Select from 'primevue/select';&#10;import SelectButton from 'primevue/selectbutton';&#10;import AutoComplete from 'primevue/autocomplete';&#10;import { BetService } from '@/service/BetService';&#10;import { SportService } from '@/service/SportService';&#10;import { CountryService } from '@/service/CountryService';&#10;import { useToast } from 'primevue/usetoast';&#10;&#10;// Props&#10;// Props supprimés car ce n'est plus un Dialog&#10;&#10;// Emits&#10;const emit = defineEmits(['bet-created']);&#10;&#10;// Composables&#10;const toast = useToast();&#10;&#10;// Variables réactives&#10;const loading = ref(false);&#10;const sports = ref([]);&#10;const countries = ref([]);&#10;const allCountries = ref([]);&#10;const errors = ref({});&#10;const eventOddsInput = ref(null);&#10;const availableLeagues = ref([]);&#10;const availableTeams = ref([]);&#10;const apiBaseUrl = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000';&#10;&#10;// Variables pour la recherche de pays&#10;const countrySearchQuery = ref('');&#10;const countrySearchResults = ref([]);&#10;const countryLoading = ref(false);&#10;const countryCurrentPage = ref(1);&#10;const countryHasMore = ref(false);&#10;const selectedCountry = ref([]);&#10;&#10;// Variables pour la recherche de ligues&#10;const leagueSearchQuery = ref('');&#10;const leagueSearchResults = ref([]);&#10;const leagueLoading = ref(false);&#10;const leagueCurrentPage = ref(1);&#10;const leagueHasMore = ref(false);&#10;const selectedLeague = ref([]);&#10;&#10;// Variables pour la recherche d'équipes 1&#10;const team1SearchQuery = ref('');&#10;const team1SearchResults = ref([]);&#10;const team1Loading = ref(false);&#10;const team1CurrentPage = ref(1);&#10;const team1HasMore = ref(false);&#10;const selectedTeam1 = ref([]);&#10;&#10;// Variables pour la recherche d'équipes 2&#10;const team2SearchQuery = ref('');&#10;const team2SearchResults = ref([]);&#10;const team2Loading = ref(false);&#10;const team2CurrentPage = ref(1);&#10;const team2HasMore = ref(false);&#10;const selectedTeam2 = ref([]);&#10;&#10;// Variables pour la recherche de sports&#10;const sportSearchQuery = ref('');&#10;const sportSearchResults = ref([]);&#10;const sportLoading = ref(false);&#10;const selectedSport = ref([]);&#10;&#10;// Variables pour le type de mise&#10;const betTypeValue = ref('currency');&#10;const betTypeOptions = ref([&#10;  { symbol: '€', value: 'currency' },&#10;  { symbol: '%', value: 'percentage' }&#10;]);&#10;&#10;// Variables pour le capital actuel&#10;const currentCapital = ref(0);&#10;const calculatedStake = ref(0);&#10;const capitalLoading = ref(false);&#10;&#10;// Variables pour les cards d'événements multiples&#10;const eventCards = ref([&#10;  {&#10;    id: 1,&#10;    sport_id: null,&#10;    country_id: null,&#10;    league: null,&#10;    team1: null,&#10;    team2: null,&#10;    description: '',&#10;    result: null,&#10;    odds: null,&#10;    selectedSport: [],&#10;    selectedCountry: [],&#10;    selectedLeague: [],&#10;    selectedTeam1: [],&#10;    selectedTeam2: [],&#10;    sportSearchResults: [],&#10;    sportLoading: false,&#10;    countryFilteredResults: [],&#10;    leagueSearchResults: [],&#10;    leagueLoading: false,&#10;    team1SearchResults: [],&#10;    team1Loading: false,&#10;    team2SearchResults: [],&#10;    team2Loading: false&#10;  }&#10;]);&#10;&#10;// Variables pour les événements multiples (paris combinés)&#10;const events = ref([]);&#10;const currentEvent = ref({&#10;  sport_id: null,&#10;  country_id: null,&#10;  league: null,&#10;  team1: null,&#10;  team2: null,&#10;  bet_code: '',&#10;  description: '',&#10;  result: null,&#10;  odds: null&#10;});&#10;&#10;// Données du formulaire&#10;const formData = ref({&#10;  bet_date: new Date(),&#10;  sport_id: null,&#10;  country_id: null,&#10;  league: null,&#10;  team1: null,&#10;  team2: null,&#10;  global_odds: null,&#10;  stake: null,&#10;  result: 'pending'&#10;});&#10;&#10;&#10;&#10;// Options pour le résultat&#10;const resultOptions = [&#10;  { label: 'En attente', value: 'pending' },&#10;  { label: 'Gagné', value: 'won' },&#10;  { label: 'Perdu', value: 'lost' },&#10;  { label: 'Annulé', value: 'void' }&#10;];&#10;&#10;// Computed&#10;// Variable visible supprimée car ce n'est plus un Dialog&#10;&#10;const potentialWin = computed(() =&gt; {&#10;  let stake = 0;&#10;  &#10;  if (betTypeValue.value === 'percentage' &amp;&amp; calculatedStake.value &gt; 0) {&#10;    // Utiliser la mise calculée en pourcentage&#10;    stake = calculatedStake.value;&#10;  } else if (betTypeValue.value === 'currency' &amp;&amp; formData.value.stake) {&#10;    // Utiliser la mise en devise&#10;    stake = parseFloat(formData.value.stake);&#10;  }&#10;  &#10;  if (stake &gt; 0 &amp;&amp; formData.value.global_odds) {&#10;    return stake * parseFloat(formData.value.global_odds);&#10;  }&#10;  return 0;&#10;});&#10;&#10;// Afficher les champs sport conditionnels&#10;const showSportFields = computed(() =&gt; {&#10;  return formData.value.sport_id !== null;&#10;});&#10;&#10;const isFormValid = computed(() =&gt; {&#10;  // Seuls les champs essentiels sont obligatoires&#10;  return formData.value.bet_date &amp;&amp;&#10;         formData.value.global_odds &amp;&amp;&#10;         formData.value.stake;&#10;});&#10;&#10;&#10;&#10;// Méthodes&#10;/**&#10; * Charger la liste des sports disponibles depuis l'API&#10; */&#10;async function loadSports() {&#10;  try {&#10;    sports.value = await SportService.getSports();&#10;  } catch (error) {&#10;    console.error('Erreur lors du chargement des sports:', error);&#10;    toast.add({&#10;      severity: 'error',&#10;      summary: 'Erreur',&#10;      detail: 'Impossible de charger les sports',&#10;      life: 3000&#10;    });&#10;    // Fallback vers des sports statiques en cas d'erreur&#10;    sports.value = [&#10;      { id: 1, name: 'Football' },&#10;      { id: 2, name: 'Basketball' },&#10;      { id: 3, name: 'Tennis' },&#10;      { id: 4, name: 'Hockey' },&#10;      { id: 5, name: 'Baseball' },&#10;      { id: 6, name: 'Volleyball' },&#10;      { id: 7, name: 'Rugby' },&#10;      { id: 8, name: 'Handball' }&#10;    ];&#10;  }&#10;}&#10;&#10;/**&#10; * Charger la liste des pays disponibles&#10; */&#10;async function loadCountries() {&#10;  try {&#10;    const countryData = await CountryService.getCountries();&#10;    // Utiliser les vrais IDs des pays depuis l'API&#10;    const formattedCountries = countryData.map(country =&gt; ({&#10;      id: country.id, // Utiliser le vrai ID du pays&#10;      name: country.name,&#10;      code: country.code&#10;    }));&#10;    &#10;    countries.value = formattedCountries;&#10;    allCountries.value = formattedCountries;&#10;  } catch (error) {&#10;    console.error('Erreur lors du chargement des pays:', error);&#10;    toast.add({&#10;      severity: 'error',&#10;      summary: 'Erreur',&#10;      detail: 'Impossible de charger les pays',&#10;      life: 3000&#10;    });&#10;    countries.value = [];&#10;    allCountries.value = [];&#10;  }&#10;}&#10;&#10;/**&#10; * Charger les ligues d'un sport spécifique&#10; */&#10;async function loadLeaguesBySport(sportId) {&#10;  try {&#10;    availableLeagues.value = await SportService.getLeaguesBySport(sportId);&#10;  } catch (error) {&#10;    console.error('Erreur lors du chargement des ligues:', error);&#10;    toast.add({&#10;      severity: 'error',&#10;      summary: 'Erreur',&#10;      detail: 'Impossible de charger les ligues',&#10;      life: 3000&#10;    });&#10;    availableLeagues.value = [];&#10;  }&#10;}&#10;&#10;/**&#10; * Charger les équipes d'un sport spécifique&#10; */&#10;async function loadTeamsBySport(sportId) {&#10;  try {&#10;    availableTeams.value = await SportService.getTeamsBySport(sportId);&#10;  } catch (error) {&#10;    console.error('Erreur lors du chargement des équipes par sport:', error);&#10;    toast.add({&#10;      severity: 'error',&#10;      summary: 'Erreur',&#10;      detail: 'Impossible de charger les équipes',&#10;      life: 3000&#10;    });&#10;    availableTeams.value = [];&#10;  }&#10;}&#10;&#10;/**&#10; * Charger les équipes d'une ligue spécifique&#10; */&#10;async function loadTeamsByLeague(leagueId) {&#10;  try {&#10;    availableTeams.value = await SportService.getTeamsByLeague(leagueId);&#10;  } catch (error) {&#10;    console.error('Erreur lors du chargement des équipes par ligue:', error);&#10;    toast.add({&#10;      severity: 'error',&#10;      summary: 'Erreur',&#10;      detail: 'Impossible de charger les équipes de la ligue',&#10;      life: 3000&#10;    });&#10;    availableTeams.value = [];&#10;  }&#10;}&#10;&#10;/**&#10; * Rechercher des sports avec filtrage côté client&#10; * @param {Object} event - Événement de recherche contenant la query&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;async function searchSports(event, eventIndex) {&#10;  const eventData = eventCards.value[eventIndex];&#10;  const query = event.query || '';&#10;  &#10;  console.log(' searchSports appelée avec:', {&#10;    query,&#10;    eventIndex&#10;  });&#10;  &#10;  // Initialiser les résultats si nécessaire&#10;  if (!eventData.sportSearchResults) {&#10;    eventData.sportSearchResults = [];&#10;  }&#10;  &#10;  try {&#10;    eventData.sportLoading = true;&#10;    console.log('⏳ Début de la requête API sports...');&#10;    &#10;    // Récupérer tous les sports&#10;    const allSportsData = await SportService.getSports();&#10;    &#10;    console.log(' Réponse API sports reçue:', {&#10;      data: allSportsData,&#10;      dataLength: allSportsData?.length&#10;    });&#10;    &#10;    // Filtrer les sports selon la query&#10;    if (!query.trim().length) {&#10;      eventData.sportSearchResults = allSportsData || [];&#10;    } else {&#10;      eventData.sportSearchResults = (allSportsData || []).filter((sport) =&gt; {&#10;        return sport.name.toLowerCase().includes(query.toLowerCase());&#10;      });&#10;    }&#10;    &#10;    console.log(' Résultats sports mis à jour pour événement', eventIndex);&#10;    &#10;    console.log('✅ searchSports terminée:', {&#10;      totalResults: eventData.sportSearchResults.length,&#10;      eventIndex&#10;    });&#10;    &#10;  } catch (error) {&#10;    console.error('❌ Erreur lors de la recherche des sports:', error);&#10;    toast.add({&#10;      severity: 'error',&#10;      summary: 'Erreur',&#10;      detail: 'Impossible de rechercher les sports',&#10;      life: 3000&#10;    });&#10;  } finally {&#10;    eventData.sportLoading = false;&#10;    console.log(' searchSports: loading terminé');&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer la sélection d'un sport&#10; * @param {Object} event - Événement de sélection&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;async function onSportSelect(event, eventIndex) {&#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  // Remplacer l'élément existant par le nouveau sport sélectionné&#10;  if (event.value) {&#10;    eventData.selectedSport = [event.value]; // Remplacer par le nouveau sport&#10;    eventData.sport_id = event.value.id;&#10;    console.log('✅ Sport sélectionné pour événement', eventIndex, ':', event.value);&#10;  } else {&#10;    eventData.selectedSport = [];&#10;    eventData.sport_id = null;&#10;    console.log('✅ Sport désélectionné pour événement', eventIndex);&#10;  }&#10;  &#10;  // Réinitialiser les champs liés au sport pour cette card&#10;  eventData.country_id = null;&#10;  eventData.league = null;&#10;  eventData.team1 = null;&#10;  eventData.team2 = null;&#10;  &#10;  // Réinitialiser la recherche de pays pour cette card&#10;  eventData.selectedCountry = [];&#10;  eventData.countryFilteredResults = [];&#10;  &#10;  // Réinitialiser la recherche de ligues pour cette card&#10;  eventData.selectedLeague = [];&#10;  eventData.leagueSearchResults = [];&#10;  &#10;  // Réinitialiser la recherche d'équipes pour cette card&#10;  eventData.selectedTeam1 = [];&#10;  eventData.team1SearchResults = [];&#10;  eventData.selectedTeam2 = [];&#10;  eventData.team2SearchResults = [];&#10;  &#10;  // Charger les équipes du sport sélectionné&#10;  if (eventData.sport_id) {&#10;    await loadTeamsBySport(eventData.sport_id);&#10;    // Charger les premières ligues&#10;    await searchLeagues({ query: '' }, eventIndex);&#10;    // Charger les premières équipes pour les deux sélecteurs&#10;    await searchTeam1({ query: '' }, eventIndex);&#10;    await searchTeam2({ query: '' }, eventIndex);&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer le changement de sport (fonction de compatibilité)&#10; * @param {Object} event - Événement de changement&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;async function onSportChange(event, eventIndex) {&#10;  // Cette fonction est maintenant gérée par onSportSelect&#10;  console.log('⚠️ onSportChange appelée - redirection vers onSportSelect');&#10;  await onSportSelect(event, eventIndex);&#10;}&#10;&#10;/**&#10; * Rechercher des pays avec filtrage côté client&#10; * @param {Object} event - Événement de recherche contenant la query&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;function searchCountries(event, eventIndex) {&#10;  const query = event.query || '';&#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  setTimeout(() =&gt; {&#10;    if (!query.trim().length) {&#10;      eventData.countryFilteredResults = [...allCountries.value];&#10;    } else {&#10;      eventData.countryFilteredResults = allCountries.value.filter((country) =&gt; {&#10;        return country.name.toLowerCase().includes(query.toLowerCase());&#10;      });&#10;    }&#10;  }, 250);&#10;}&#10;&#10;/**&#10; * Gérer la sélection d'un pays&#10; * @param {Object} event - Événement de sélection contenant le pays&#10; */&#10;/**&#10; * Gérer la sélection d'un pays&#10; * @param {Object} event - Événement de sélection&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;function onCountrySelect(event, eventIndex) {&#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  // Remplacer l'élément existant par le nouveau pays sélectionné&#10;  if (event.value) {&#10;    eventData.selectedCountry = [event.value]; // Remplacer par le nouveau pays&#10;    eventData.country_id = event.value.id;&#10;  } else {&#10;    eventData.selectedCountry = [];&#10;    eventData.country_id = null;&#10;  }&#10;  &#10;  // Déclencher le changement de pays&#10;  onCountryChange(eventIndex);&#10;}&#10;&#10;/**&#10; * Gérer le changement de pays&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;async function onCountryChange(eventIndex) {&#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  // Réinitialiser les champs liés aux ligues et équipes pour cette card&#10;  eventData.league = null;&#10;  eventData.team1 = null;&#10;  eventData.team2 = null;&#10;  &#10;  // Réinitialiser la recherche de ligues pour cette card&#10;  eventData.selectedLeague = [];&#10;  eventData.leagueSearchResults = [];&#10;  &#10;  // Réinitialiser la recherche d'équipes pour cette card&#10;  eventData.selectedTeam1 = [];&#10;  eventData.team1SearchResults = [];&#10;  &#10;  eventData.selectedTeam2 = [];&#10;  eventData.team2SearchResults = [];&#10;  &#10;  // Recharger les ligues avec le filtre de pays si un sport est sélectionné&#10;  if (eventData.sport_id) {&#10;    await searchLeagues({ query: '' }, eventIndex);&#10;    await searchTeam1({ query: '' }, eventIndex);&#10;    await searchTeam2({ query: '' }, eventIndex);&#10;  }&#10;}&#10;&#10;/**&#10; * Rechercher des ligues avec pagination&#10; * @param {Object} event - Événement de recherche contenant la query&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;async function searchLeagues(event, eventIndex) {&#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  if (!eventData.sport_id) {&#10;    console.log('❌ searchLeagues: Aucun sport sélectionné pour événement', eventIndex);&#10;    return;&#10;  }&#10;  &#10;  const query = event.query || '';&#10;  console.log(' searchLeagues appelée avec:', {&#10;    query,&#10;    sportId: eventData.sport_id,&#10;    eventIndex&#10;  });&#10;  &#10;  // Initialiser les résultats si nécessaire&#10;  if (!eventData.leagueSearchResults) {&#10;    eventData.leagueSearchResults = [];&#10;  }&#10;  &#10;  try {&#10;    eventData.leagueLoading = true;&#10;    console.log('⏳ Début de la requête API...');&#10;    &#10;    const response = await SportService.searchLeaguesBySport(&#10;      eventData.sport_id,&#10;      query,&#10;      1,&#10;      30,&#10;      eventData.country_id&#10;    );&#10;    &#10;    console.log(' Réponse API reçue:', {&#10;      data: response.data,&#10;      dataLength: response.data?.length,&#10;      hasMore: response.hasMore,&#10;      pagination: response.pagination,&#10;      fullResponse: response&#10;    });&#10;    &#10;    eventData.leagueSearchResults = response.data;&#10;    console.log(' Résultats ligues mis à jour pour événement', eventIndex);&#10;    &#10;    console.log('✅ searchLeagues terminée:', {&#10;      totalResults: eventData.leagueSearchResults.length,&#10;      eventIndex&#10;    });&#10;    &#10;  } catch (error) {&#10;    console.error('❌ Erreur lors de la recherche des ligues:', error);&#10;    toast.add({&#10;      severity: 'error',&#10;      summary: 'Erreur',&#10;      detail: 'Impossible de rechercher les ligues',&#10;      life: 3000&#10;    });&#10;  } finally {&#10;    eventData.leagueLoading = false;&#10;    console.log(' searchLeagues: loading terminé');&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer la sélection d'une ligue&#10; * @param {Object} event - Événement de sélection contenant la ligue&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;async function onLeagueSelect(event, eventIndex) {&#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  // Remplacer l'élément existant par la nouvelle ligue sélectionnée&#10;  if (event.value) {&#10;    eventData.selectedLeague = [event.value]; // Remplacer par la nouvelle ligue&#10;    eventData.league = event.value.id;&#10;  } else {&#10;    eventData.selectedLeague = [];&#10;    eventData.league = null;&#10;  }&#10;  &#10;  // Réinitialiser les équipes sélectionnées&#10;  eventData.team1 = null;&#10;  eventData.team2 = null;&#10;  eventData.selectedTeam1 = [];&#10;  eventData.selectedTeam2 = [];&#10;  &#10;  // Recharger les équipes avec le filtre de ligue pour les deux sélecteurs&#10;  await searchTeam1({ query: eventData.team1SearchQuery || '' }, eventIndex, true);&#10;  await searchTeam2({ query: eventData.team2SearchQuery || '' }, eventIndex, true);&#10;}&#10;&#10;/**&#10; * Rechercher des équipes pour l'équipe 1 avec pagination et exclusion de l'équipe 2&#10; * @param {Object} event - Événement de recherche contenant la query&#10; * @param {number} eventIndex - Index de l'événement&#10; * @param {boolean} resetSearch - Forcer la réinitialisation de la recherche&#10; */&#10;async function searchTeam1(event, eventIndex, resetSearch = false) {&#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  if (!eventData.sport_id) {&#10;    console.log('❌ searchTeam1: Aucun sport sélectionné pour événement', eventIndex);&#10;    return;&#10;  }&#10;  &#10;  const query = event.query || '';&#10;  console.log(' searchTeam1 appelée avec:', {&#10;    query,&#10;    sportId: eventData.sport_id,&#10;    leagueId: eventData.league,&#10;    excludeTeam: eventData.team2,&#10;    eventIndex,&#10;    resetSearch&#10;  });&#10;  &#10;  // Initialiser les résultats si nécessaire&#10;  if (!eventData.team1SearchResults || resetSearch) {&#10;    console.log(' Initialisation recherche équipe 1 pour événement', eventIndex);&#10;    eventData.team1SearchResults = [];&#10;  }&#10;  &#10;  try {&#10;    eventData.team1Loading = true;&#10;    console.log('⏳ Début de la requête API équipes 1...');&#10;    &#10;    const response = await SportService.searchTeamsBySport(&#10;      eventData.sport_id,&#10;      query,&#10;      1,&#10;      30,&#10;      eventData.league, // Filtrer par ligue si sélectionnée&#10;      eventData.country_id // Filtrer par pays si sélectionné&#10;    );&#10;    &#10;    console.log(' Réponse API équipes 1 reçue:', {&#10;      data: response.data,&#10;      dataLength: response.data?.length,&#10;      hasMore: response.hasMore,&#10;      pagination: response.pagination&#10;    });&#10;    &#10;    // Filtrer pour exclure l'équipe 2 si elle est sélectionnée&#10;    let filteredData = response.data;&#10;    if (eventData.team2) {&#10;      filteredData = response.data.filter(team =&gt; team.id !== eventData.team2);&#10;      console.log(' Équipe 2 exclue des résultats équipe 1:', {&#10;        originalCount: response.data.length,&#10;        filteredCount: filteredData.length,&#10;        excludedTeamId: eventData.team2&#10;      });&#10;    }&#10;    &#10;    eventData.team1SearchResults = filteredData;&#10;    console.log(' Résultats équipes 1 mis à jour pour événement', eventIndex);&#10;    &#10;    console.log('✅ searchTeam1 terminée:', {&#10;      totalResults: eventData.team1SearchResults.length,&#10;      eventIndex&#10;    });&#10;    &#10;  } catch (error) {&#10;    console.error('❌ Erreur lors de la recherche des équipes 1:', error);&#10;    toast.add({&#10;      severity: 'error',&#10;      summary: 'Erreur',&#10;      detail: 'Impossible de rechercher les équipes',&#10;      life: 3000&#10;    });&#10;  } finally {&#10;    eventData.team1Loading = false;&#10;    console.log(' searchTeam1: loading terminé');&#10;  }&#10;}&#10;&#10;/**&#10; * Rechercher des équipes pour l'équipe 2 avec pagination et exclusion de l'équipe 1&#10; * @param {Object} event - Événement de recherche contenant la query&#10; * @param {number} eventIndex - Index de l'événement&#10; * @param {boolean} resetSearch - Forcer la réinitialisation de la recherche&#10; */&#10;async function searchTeam2(event, eventIndex, resetSearch = false) {&#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  if (!eventData.sport_id) {&#10;    console.log('❌ searchTeam2: Aucun sport sélectionné pour événement', eventIndex);&#10;    return;&#10;  }&#10;  &#10;  const query = event.query || '';&#10;  console.log(' searchTeam2 appelée avec:', {&#10;    query,&#10;    sportId: eventData.sport_id,&#10;    leagueId: eventData.league,&#10;    excludeTeam: eventData.team1,&#10;    eventIndex,&#10;    resetSearch&#10;  });&#10;  &#10;  // Initialiser les résultats si nécessaire&#10;  if (!eventData.team2SearchResults || resetSearch) {&#10;    console.log(' Initialisation recherche équipe 2 pour événement', eventIndex);&#10;    eventData.team2SearchResults = [];&#10;  }&#10;  &#10;  try {&#10;    eventData.team2Loading = true;&#10;    console.log('⏳ Début de la requête API équipes 2...');&#10;    &#10;    const response = await SportService.searchTeamsBySport(&#10;      eventData.sport_id,&#10;      query,&#10;      1,&#10;      30,&#10;      eventData.league, // Filtrer par ligue si sélectionnée&#10;      eventData.country_id // Filtrer par pays si sélectionné&#10;    );&#10;    &#10;    console.log(' Réponse API équipes 2 reçue:', {&#10;      data: response.data,&#10;      dataLength: response.data?.length,&#10;      hasMore: response.hasMore,&#10;      pagination: response.pagination&#10;    });&#10;    &#10;    // Filtrer pour exclure l'équipe 1 si elle est sélectionnée&#10;    let filteredData = response.data;&#10;    if (eventData.team1) {&#10;      filteredData = response.data.filter(team =&gt; team.id !== eventData.team1);&#10;      console.log(' Équipe 1 exclue des résultats équipe 2:', {&#10;        originalCount: response.data.length,&#10;        filteredCount: filteredData.length,&#10;        excludedTeamId: eventData.team1&#10;      });&#10;    }&#10;    &#10;    eventData.team2SearchResults = filteredData;&#10;    console.log(' Résultats équipes 2 mis à jour pour événement', eventIndex);&#10;    &#10;    console.log('✅ searchTeam2 terminée:', {&#10;      totalResults: eventData.team2SearchResults.length,&#10;      eventIndex&#10;    });&#10;    &#10;  } catch (error) {&#10;    console.error('❌ Erreur lors de la recherche des équipes 2:', error);&#10;    toast.add({&#10;      severity: 'error',&#10;      summary: 'Erreur',&#10;      detail: 'Impossible de rechercher les équipes',&#10;      life: 3000&#10;    });&#10;  } finally {&#10;    eventData.team2Loading = false;&#10;    console.log(' searchTeam2: loading terminé');&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer la sélection de l'équipe 1&#10; * @param {Object} event - Événement de sélection contenant l'équipe&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;function onTeam1Select(event, eventIndex) {&#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  // Remplacer l'élément existant par la nouvelle équipe sélectionnée&#10;  if (event.value) {&#10;    eventData.selectedTeam1 = [event.value]; // Remplacer par la nouvelle équipe&#10;    eventData.team1 = event.value.id;&#10;    console.log('✅ Équipe 1 sélectionnée pour événement', eventIndex, ':', event.value);&#10;  } else {&#10;    eventData.selectedTeam1 = [];&#10;    eventData.team1 = null;&#10;    console.log('✅ Équipe 1 désélectionnée pour événement', eventIndex);&#10;  }&#10;  &#10;  // Rafraîchir les résultats de l'équipe 2 pour exclure l'équipe 1 sélectionnée&#10;  if (eventData.team2SearchResults &amp;&amp; eventData.team2SearchResults.length &gt; 0) {&#10;    console.log(' Rafraîchissement des résultats équipe 2 pour exclure équipe 1');&#10;    searchTeam2({ query: eventData.team2SearchQuery || '' }, eventIndex, true);&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer la sélection de l'équipe 2&#10; * @param {Object} event - Événement de sélection contenant l'équipe&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;function onTeam2Select(event, eventIndex) {&#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  // Remplacer l'élément existant par la nouvelle équipe sélectionnée&#10;  if (event.value) {&#10;    eventData.selectedTeam2 = [event.value]; // Remplacer par la nouvelle équipe&#10;    eventData.team2 = event.value.id;&#10;    console.log('✅ Équipe 2 sélectionnée pour événement', eventIndex, ':', event.value);&#10;  } else {&#10;    eventData.selectedTeam2 = [];&#10;    eventData.team2 = null;&#10;    console.log('✅ Équipe 2 désélectionnée pour événement', eventIndex);&#10;  }&#10;  &#10;  // Rafraîchir les résultats de l'équipe 1 pour exclure l'équipe 2 sélectionnée&#10;  if (eventData.team1SearchResults &amp;&amp; eventData.team1SearchResults.length &gt; 0) {&#10;    console.log(' Rafraîchissement des résultats équipe 1 pour exclure équipe 2');&#10;    searchTeam1({ query: eventData.team1SearchQuery || '' }, eventIndex, true);&#10;  }&#10;}&#10;&#10;/**&#10; * Charger plus d'équipes 1 (pagination)&#10; */&#10;async function loadMoreTeam1() {&#10;  if (team1Loading.value || !team1HasMore.value) {&#10;    console.log('⏸️ loadMoreTeam1: Chargement en cours ou plus de résultats');&#10;    return;&#10;  }&#10;  &#10;  console.log(' Chargement de la page suivante équipes 1:', team1CurrentPage.value + 1);&#10;  team1CurrentPage.value++;&#10;  searchTeam1({ query: team1SearchQuery.value });&#10;}&#10;&#10;/**&#10; * Charger plus d'équipes 2 (pagination)&#10; */&#10;async function loadMoreTeam2() {&#10;  if (team2Loading.value || !team2HasMore.value) {&#10;    console.log('⏸️ loadMoreTeam2: Chargement en cours ou plus de résultats');&#10;    return;&#10;  }&#10;  &#10;  console.log(' Chargement de la page suivante équipes 2:', team2CurrentPage.value + 1);&#10;  team2CurrentPage.value++;&#10;  searchTeam2({ query: team2SearchQuery.value });&#10;}&#10;&#10;&#10;&#10;/**&#10; * Gérer l'affichage du dropdown des équipes 1&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;function onTeam1DropdownShow(eventIndex) {&#10;  console.log(' Dropdown équipes 1 ouvert pour événement', eventIndex);&#10;  const eventData = eventCards.value[eventIndex];&#10;  if ((!eventData.team1SearchResults || eventData.team1SearchResults.length === 0) &amp;&amp; eventData.sport_id) {&#10;    console.log(' Chargement initial des équipes 1 au dropdown');&#10;    searchTeam1({ query: '' }, eventIndex, true);&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer l'affichage du dropdown des équipes 2&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;function onTeam2DropdownShow(eventIndex) {&#10;  console.log(' Dropdown équipes 2 ouvert pour événement', eventIndex);&#10;  const eventData = eventCards.value[eventIndex];&#10;  if ((!eventData.team2SearchResults || eventData.team2SearchResults.length === 0) &amp;&amp; eventData.sport_id) {&#10;    console.log(' Chargement initial des équipes 2 au dropdown');&#10;    searchTeam2({ query: '' }, eventIndex, true);&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer l'affichage du dropdown des sports&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;function onSportDropdownShow(eventIndex) {&#10;  console.log(' Dropdown sports ouvert pour événement', eventIndex);&#10;  &#10;  // Charger les sports si pas encore chargés pour cette card&#10;  const eventData = eventCards.value[eventIndex];&#10;  if (!eventData.sportSearchResults || eventData.sportSearchResults.length === 0) {&#10;    searchSports({ query: '' }, eventIndex);&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer l'affichage du dropdown des ligues&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;function onLeagueDropdownShow(eventIndex) {&#10;  console.log(' Dropdown ligues ouvert pour événement', eventIndex);&#10;  &#10;  // Charger les ligues si pas encore chargées pour cette card&#10;  const eventData = eventCards.value[eventIndex];&#10;  if (!eventData.leagueSearchResults || eventData.leagueSearchResults.length === 0) {&#10;    searchLeagues({ query: '' }, eventIndex);&#10;  }&#10;}&#10;&#10;&#10;&#10;/**&#10; * Gérer le défilement du panel équipes 1 pour le lazy loading&#10; * @param {Event} event - Événement de défilement&#10; */&#10;function handleTeam1PanelScroll(event) {&#10;  const panel = event.target;&#10;  const scrollTop = panel.scrollTop;&#10;  const scrollHeight = panel.scrollHeight;&#10;  const clientHeight = panel.clientHeight;&#10;  &#10;  // Calculer le pourcentage de défilement&#10;  const scrollPercentage = (scrollTop + clientHeight) / scrollHeight;&#10;  &#10;  console.log(' Scroll équipes 1 détecté:', {&#10;    scrollTop,&#10;    scrollHeight,&#10;    clientHeight,&#10;    scrollPercentage: Math.round(scrollPercentage * 100) + '%',&#10;    hasMore: team1HasMore.value,&#10;    loading: team1Loading.value,&#10;    currentPage: team1CurrentPage.value,&#10;    resultsCount: team1SearchResults.value.length&#10;  });&#10;  &#10;  // Si on a atteint 90% du défilement et qu'il y a plus de données&#10;  if (scrollPercentage &gt;= 0.9) {&#10;    console.log(' 90% atteint pour équipes 1! État actuel:', {&#10;      hasMore: team1HasMore.value,&#10;      loading: team1Loading.value,&#10;      willTrigger: team1HasMore.value &amp;&amp; !team1Loading.value&#10;    });&#10;    &#10;    if (team1HasMore.value &amp;&amp; !team1Loading.value) {&#10;      console.log(' Déclenchement du lazy loading équipes 1...');&#10;      loadMoreTeam1();&#10;    } else {&#10;      console.log('❌ Lazy loading équipes 1 non déclenché:', {&#10;        reason: !team1HasMore.value ? 'Pas de données supplémentaires' : 'Chargement en cours'&#10;      });&#10;    }&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer le défilement du panel équipes 2 pour le lazy loading&#10; * @param {Event} event - Événement de défilement&#10; */&#10;function handleTeam2PanelScroll(event) {&#10;  const panel = event.target;&#10;  const scrollTop = panel.scrollTop;&#10;  const scrollHeight = panel.scrollHeight;&#10;  const clientHeight = panel.clientHeight;&#10;  &#10;  // Calculer le pourcentage de défilement&#10;  const scrollPercentage = (scrollTop + clientHeight) / scrollHeight;&#10;  &#10;  console.log(' Scroll équipes 2 détecté:', {&#10;    scrollTop,&#10;    scrollHeight,&#10;    clientHeight,&#10;    scrollPercentage: Math.round(scrollPercentage * 100) + '%',&#10;    hasMore: team2HasMore.value,&#10;    loading: team2Loading.value,&#10;    currentPage: team2CurrentPage.value,&#10;    resultsCount: team2SearchResults.value.length&#10;  });&#10;  &#10;  // Si on a atteint 90% du défilement et qu'il y a plus de données&#10;  if (scrollPercentage &gt;= 0.9) {&#10;    console.log(' 90% atteint pour équipes 2! État actuel:', {&#10;      hasMore: team2HasMore.value,&#10;      loading: team2Loading.value,&#10;      willTrigger: team2HasMore.value &amp;&amp; !team2Loading.value&#10;    });&#10;    &#10;    if (team2HasMore.value &amp;&amp; !team2Loading.value) {&#10;      console.log(' Déclenchement du lazy loading équipes 2...');&#10;      loadMoreTeam2();&#10;    } else {&#10;      console.log('❌ Lazy loading équipes 2 non déclenché:', {&#10;        reason: !team2HasMore.value ? 'Pas de données supplémentaires' : 'Chargement en cours'&#10;      });&#10;    }&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer la saisie de la cote pour remplacer immédiatement les virgules par des points&#10; * @param {Event} event - Événement d'input&#10; */&#10;function handleOddsInput(event) {&#10;  let inputValue = event.target.value;&#10;  console.log('handleOddsInput - Valeur tapée:', inputValue);&#10;  &#10;  // Remplacer immédiatement toutes les virgules par des points&#10;  const normalizedValue = inputValue.replace(/,/g, '.');&#10;  console.log('handleOddsInput - Valeur normalisée:', normalizedValue);&#10;  &#10;  // Si une virgule a été détectée, forcer le remplacement immédiat&#10;  if (inputValue !== normalizedValue) {&#10;    console.log('handleOddsInput - Virgule détectée, remplacement en cours...');&#10;    // Sauvegarder la position du curseur&#10;    const cursorPosition = event.target.selectionStart;&#10;    &#10;    // Mettre à jour immédiatement la valeur de l'input&#10;    event.target.value = normalizedValue;&#10;    &#10;    // Restaurer la position du curseur&#10;    event.target.setSelectionRange(cursorPosition, cursorPosition);&#10;    &#10;    // Mettre à jour le v-model&#10;    formData.value.global_odds = normalizedValue;&#10;    console.log('handleOddsInput - Remplacement terminé, nouvelle valeur:', event.target.value);&#10;    return;&#10;  }&#10;  &#10;  // Vérifier que la valeur est un nombre réel valide&#10;  if (normalizedValue === '' || normalizedValue === '.') {&#10;    formData.value.global_odds = null;&#10;    return;&#10;  }&#10;  &#10;  // Validation du format nombre réel&#10;  const numericValue = parseFloat(normalizedValue);&#10;  if (!isNaN(numericValue) &amp;&amp; isFinite(numericValue) &amp;&amp; numericValue &gt; 0) {&#10;    formData.value.global_odds = numericValue;&#10;  } else {&#10;    // Si la valeur n'est pas valide, on garde la dernière valeur valide&#10;    console.warn('Valeur de cote invalide:', normalizedValue);&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer la saisie de la mise pour accepter les virgules et les points comme séparateurs décimaux&#10; * @param {Event} event - Événement d'input&#10; */&#10;function handleStakeInput(event) {&#10;  let inputValue = event.target.value;&#10;  console.log('handleStakeInput - Valeur tapée:', inputValue);&#10;  &#10;  // Remplacer immédiatement toutes les virgules par des points&#10;  const normalizedValue = inputValue.replace(/,/g, '.');&#10;  console.log('handleStakeInput - Valeur normalisée:', normalizedValue);&#10;  &#10;  // Si une virgule a été détectée, forcer le remplacement immédiat&#10;  if (inputValue !== normalizedValue) {&#10;    console.log('handleStakeInput - Virgule détectée, remplacement en cours...');&#10;    // Sauvegarder la position du curseur&#10;    const cursorPosition = event.target.selectionStart;&#10;    &#10;    // Mettre à jour immédiatement la valeur de l'input&#10;    event.target.value = normalizedValue;&#10;    &#10;    // Restaurer la position du curseur&#10;    event.target.setSelectionRange(cursorPosition, cursorPosition);&#10;    &#10;    // Mettre à jour le v-model&#10;    formData.value.stake = normalizedValue;&#10;    console.log('handleStakeInput - Remplacement terminé, nouvelle valeur:', event.target.value);&#10;    return;&#10;  }&#10;  &#10;  // Vérifier que la valeur est un nombre réel valide&#10;  if (normalizedValue === '' || normalizedValue === '.') {&#10;    formData.value.stake = null;&#10;    return;&#10;  }&#10;  &#10;  // Validation du format nombre réel (la mise peut être 0)&#10;  const numericValue = parseFloat(normalizedValue);&#10;  if (!isNaN(numericValue) &amp;&amp; isFinite(numericValue) &amp;&amp; numericValue &gt;= 0) {&#10;    formData.value.stake = numericValue;&#10;  } else {&#10;    // Si la valeur n'est pas valide, on garde la dernière valeur valide&#10;    console.warn('Valeur de mise invalide:', normalizedValue);&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer la saisie de la cote d'événement pour remplacer immédiatement les virgules par des points&#10; * @param {Event} event - Événement d'input&#10; * @param {number} eventIndex - Index de l'événement&#10; */&#10;function handleEventOddsInput(event, eventIndex) {&#10;  let inputValue = event.target.value;&#10;  console.log('handleEventOddsInput - Valeur tapée:', inputValue, 'pour événement', eventIndex);&#10;  &#10;  const eventData = eventCards.value[eventIndex];&#10;  &#10;  // Remplacer immédiatement toutes les virgules par des points&#10;  const normalizedValue = inputValue.replace(/,/g, '.');&#10;  console.log('handleEventOddsInput - Valeur normalisée:', normalizedValue);&#10;  &#10;  // Si une virgule a été détectée, forcer le remplacement immédiat&#10;  if (inputValue !== normalizedValue) {&#10;    console.log('handleEventOddsInput - Virgule détectée, remplacement en cours...');&#10;    // Sauvegarder la position du curseur&#10;    const cursorPosition = event.target.selectionStart;&#10;    &#10;    // Mettre à jour immédiatement la valeur de l'input&#10;    event.target.value = normalizedValue;&#10;    &#10;    // Restaurer la position du curseur&#10;    event.target.setSelectionRange(cursorPosition, cursorPosition);&#10;    &#10;    // Mettre à jour le v-model&#10;    eventData.odds = normalizedValue;&#10;    console.log('handleEventOddsInput - Remplacement terminé, nouvelle valeur:', event.target.value);&#10;    return;&#10;  }&#10;  &#10;  // Vérifier que la valeur est un nombre réel valide&#10;  if (normalizedValue === '' || normalizedValue === '.') {&#10;    eventData.odds = null;&#10;    // Recalculer la cote globale même avec une valeur vide&#10;    calculateGlobalOdds();&#10;    return;&#10;  }&#10;  &#10;  // Validation du format nombre réel&#10;  const numericValue = parseFloat(normalizedValue);&#10;  if (!isNaN(numericValue) &amp;&amp; isFinite(numericValue) &amp;&amp; numericValue &gt; 0) {&#10;    eventData.odds = numericValue;&#10;  } else {&#10;    // Si la valeur n'est pas valide, on garde la dernière valeur valide&#10;    console.warn('Valeur de cote d\'événement invalide:', normalizedValue);&#10;  }&#10;  &#10;  // Recalculer la cote globale&#10;  calculateGlobalOdds();&#10;}&#10;&#10;/**&#10; * Gérer les touches pressées pour la cote globale (permettre point et virgule)&#10; * @param {KeyboardEvent} event - Événement de frappe&#10; */&#10;function handleOddsKeypress(event) {&#10;  const char = String.fromCharCode(event.which);&#10;  const currentValue = event.target.value;&#10;  &#10;  // Permettre les chiffres, le point, la virgule et les touches de contrôle&#10;  if (!/[0-9.,]/.test(char) &amp;&amp; event.which !== 8 &amp;&amp; event.which !== 46 &amp;&amp; event.which !== 37 &amp;&amp; event.which !== 39) {&#10;    event.preventDefault();&#10;    return;&#10;  }&#10;  &#10;  // Empêcher plusieurs séparateurs décimaux (point ou virgule)&#10;  if ((char === '.' || char === ',') &amp;&amp; (currentValue.includes('.') || currentValue.includes(','))) {&#10;    event.preventDefault();&#10;    return;&#10;  }&#10;  &#10;  // Empêcher le point/virgule en première position&#10;  if ((char === '.' || char === ',') &amp;&amp; currentValue === '') {&#10;    event.preventDefault();&#10;    return;&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer les touches pressées pour la mise (permettre point et virgule)&#10; * @param {KeyboardEvent} event - Événement de frappe&#10; */&#10;function handleStakeKeypress(event) {&#10;  const char = String.fromCharCode(event.which);&#10;  const currentValue = event.target.value;&#10;  &#10;  // Permettre les chiffres, le point, la virgule et les touches de contrôle&#10;  if (!/[0-9.,]/.test(char) &amp;&amp; event.which !== 8 &amp;&amp; event.which !== 46 &amp;&amp; event.which !== 37 &amp;&amp; event.which !== 39) {&#10;    event.preventDefault();&#10;    return;&#10;  }&#10;  &#10;  // Empêcher plusieurs séparateurs décimaux (point ou virgule)&#10;  if ((char === '.' || char === ',') &amp;&amp; (currentValue.includes('.') || currentValue.includes(','))) {&#10;    event.preventDefault();&#10;    return;&#10;  }&#10;  &#10;  // Empêcher le point/virgule en première position&#10;  if ((char === '.' || char === ',') &amp;&amp; currentValue === '') {&#10;    event.preventDefault();&#10;    return;&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer les touches pressées pour la cote d'événement (permettre point et virgule)&#10; * @param {KeyboardEvent} event - Événement de frappe&#10; */&#10;function handleEventOddsKeypress(event) {&#10;  const char = String.fromCharCode(event.which);&#10;  const currentValue = event.target.value;&#10;  &#10;  // Permettre les chiffres, le point, la virgule et les touches de contrôle&#10;  if (!/[0-9.,]/.test(char) &amp;&amp; event.which !== 8 &amp;&amp; event.which !== 46 &amp;&amp; event.which !== 37 &amp;&amp; event.which !== 39) {&#10;    event.preventDefault();&#10;    return;&#10;  }&#10;  &#10;  // Empêcher plusieurs séparateurs décimaux (point ou virgule)&#10;  if ((char === '.' || char === ',') &amp;&amp; (currentValue.includes('.') || currentValue.includes(','))) {&#10;    event.preventDefault();&#10;    return;&#10;  }&#10;  &#10;  // Empêcher le point/virgule en première position&#10;  if ((char === '.' || char === ',') &amp;&amp; currentValue === '') {&#10;    event.preventDefault();&#10;    return;&#10;  }&#10;}&#10;&#10;&#10;&#10;/**&#10; * Gérer l'ouverture du dropdown pour attacher le scroll listener&#10; */&#10;function onDropdownShow() {&#10;  console.log(' Dropdown ouvert, recherche du panel...');&#10;  &#10;  // Fonction pour rechercher le panel&#10;  const findAndAttachListener = () =&gt; {&#10;    // Utiliser le bon sélecteur basé sur la structure DOM observée&#10;    const panel = document.querySelector('.p-autocomplete-list-container');&#10;    console.log(' Panel trouvé (.p-autocomplete-list-container):', panel);&#10;    &#10;    if (panel &amp;&amp; !panel.hasScrollListener) {&#10;      panel.hasScrollListener = true;&#10;      panel.addEventListener('scroll', handlePanelScroll);&#10;      console.log('✅ Scroll listener attaché au panel');&#10;      return true;&#10;    } else if (panel &amp;&amp; panel.hasScrollListener) {&#10;      console.log('⚠️ Scroll listener déjà attaché');&#10;      return true;&#10;    } else {&#10;      console.log('❌ Aucun panel trouvé avec les sélecteurs testés');&#10;      return false;&#10;    }&#10;  };&#10;  &#10;  // Essayer immédiatement avec nextTick&#10;  nextTick(() =&gt; {&#10;    if (!findAndAttachListener()) {&#10;      // Si pas trouvé, essayer avec un délai&#10;      console.log('⏰ Nouvelle tentative dans 100ms...');&#10;      setTimeout(() =&gt; {&#10;        if (!findAndAttachListener()) {&#10;          console.log('⏰ Dernière tentative dans 300ms...');&#10;          setTimeout(findAndAttachListener, 300);&#10;        }&#10;      }, 100);&#10;    }&#10;  });&#10;}&#10;&#10;&#10;&#10;/**&#10; * Charger plus de ligues (pagination)&#10; */&#10;async function loadMoreLeagues() {&#10;  console.log(' loadMoreLeagues appelée avec état:', {&#10;    sportId: formData.value.sport_id,&#10;    hasMore: leagueHasMore.value,&#10;    loading: leagueLoading.value,&#10;    currentPage: leagueCurrentPage.value,&#10;    query: leagueSearchQuery.value,&#10;    currentResultsCount: leagueSearchResults.value.length&#10;  });&#10;  &#10;  if (!formData.value.sport_id || !leagueHasMore.value || leagueLoading.value) {&#10;    console.log('❌ loadMoreLeagues bloquée:', {&#10;      noSport: !formData.value.sport_id,&#10;      noMore: !leagueHasMore.value,&#10;      alreadyLoading: leagueLoading.value&#10;    });&#10;    return;&#10;  }&#10;  &#10;  try {&#10;    leagueLoading.value = true;&#10;    leagueCurrentPage.value++;&#10;    &#10;    console.log(' Chargement page', leagueCurrentPage.value, 'pour query:', leagueSearchQuery.value);&#10;    &#10;    const response = await SportService.searchLeaguesBySport(&#10;      formData.value.sport_id,&#10;      leagueSearchQuery.value,&#10;      leagueCurrentPage.value,&#10;      30,&#10;      formData.value.country_id&#10;    );&#10;    &#10;    console.log(' loadMoreLeagues - Réponse API:', {&#10;      data: response.data,&#10;      dataLength: response.data?.length,&#10;      hasMore: response.hasMore,&#10;      pagination: response.pagination,&#10;      fullResponse: response&#10;    });&#10;    &#10;    // Ajouter les nouveaux résultats à la liste existante&#10;    const previousCount = leagueSearchResults.value.length;&#10;    leagueSearchResults.value = [...leagueSearchResults.value, ...response.data];&#10;    leagueHasMore.value = response.hasMore;&#10;    &#10;    console.log('✅ Page chargée:', {&#10;      newLeagues: response.data.length,&#10;      previousTotal: previousCount,&#10;      newTotal: leagueSearchResults.value.length,&#10;      hasMoreAfter: leagueHasMore.value&#10;    });&#10;    &#10;  } catch (error) {&#10;    console.error('❌ Erreur lors du chargement de plus de ligues:', error);&#10;    // Revenir à la page précédente en cas d'erreur&#10;    leagueCurrentPage.value--;&#10;    console.log(' Page remise à:', leagueCurrentPage.value);&#10;  } finally {&#10;    leagueLoading.value = false;&#10;    console.log(' loadMoreLeagues: loading terminé');&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer le défilement du panneau pour le lazy loading&#10; * @param {Event} event - Événement de défilement&#10; */&#10;function handlePanelScroll(event) {&#10;  const panel = event.target;&#10;  const scrollTop = panel.scrollTop;&#10;  const scrollHeight = panel.scrollHeight;&#10;  const clientHeight = panel.clientHeight;&#10;  &#10;  // Calculer le pourcentage de défilement&#10;  const scrollPercentage = (scrollTop + clientHeight) / scrollHeight;&#10;  &#10;  console.log(' Scroll détecté:', {&#10;    scrollTop,&#10;    scrollHeight,&#10;    clientHeight,&#10;    scrollPercentage: Math.round(scrollPercentage * 100) + '%',&#10;    hasMore: leagueHasMore.value,&#10;    loading: leagueLoading.value,&#10;    currentPage: leagueCurrentPage.value,&#10;    resultsCount: leagueSearchResults.value.length&#10;  });&#10;  &#10;  // Si on a atteint 90% du défilement et qu'il y a plus de données&#10;  if (scrollPercentage &gt;= 0.9) {&#10;    console.log(' 90% atteint! État actuel:', {&#10;      hasMore: leagueHasMore.value,&#10;      loading: leagueLoading.value,&#10;      willTrigger: leagueHasMore.value &amp;&amp; !leagueLoading.value&#10;    });&#10;    &#10;    if (leagueHasMore.value &amp;&amp; !leagueLoading.value) {&#10;      console.log(' Déclenchement du lazy loading...');&#10;      loadMoreLeagues();&#10;    } else {&#10;      console.log('❌ Lazy loading non déclenché:', {&#10;        reason: !leagueHasMore.value ? 'Pas de données supplémentaires' : 'Chargement en cours'&#10;      });&#10;    }&#10;  }&#10;}&#10;&#10;/**&#10; * Gérer le changement de ligue (méthode legacy, gardée pour compatibilité)&#10; */&#10;async function onLeagueChange() {&#10;  // Réinitialiser les équipes sélectionnées&#10;  formData.value.team1 = null;&#10;  formData.value.team2 = null;&#10;  &#10;  // Si une ligue est sélectionnée, charger ses équipes&#10;  if (formData.value.league) {&#10;    await loadTeamsByLeague(formData.value.league);&#10;  } else if (formData.value.sport_id) {&#10;    // Sinon, charger toutes les équipes du sport&#10;    await loadTeamsBySport(formData.value.sport_id);&#10;  }&#10;}&#10;&#10;/**&#10; * Valider le formulaire&#10; */&#10;function validateForm() {&#10;  console.log(' validateForm appelée');&#10;  errors.value = {};&#10;  &#10;  if (!formData.value.bet_date) {&#10;    errors.value.bet_date = 'La date du pari est requise';&#10;  }&#10;  &#10;  // Validation optionnelle des équipes (seulement si les deux sont remplies)&#10;  if (formData.value.team1 &amp;&amp; formData.value.team2 &amp;&amp; formData.value.team1 === formData.value.team2) {&#10;    errors.value.team1 = 'Les deux équipes doivent être différentes';&#10;    errors.value.team2 = 'Les deux équipes doivent être différentes';&#10;  }&#10;  &#10;&#10;  &#10;  if (!formData.value.global_odds || formData.value.global_odds &lt; 1) {&#10;    errors.value.global_odds = 'La cote doit être supérieure ou égale à 1';&#10;  }&#10;  &#10;  if (!formData.value.stake || formData.value.stake &lt;= 0) {&#10;    errors.value.stake = 'La mise doit être supérieure à 0';&#10;  }&#10;  &#10;  const isValid = Object.keys(errors.value).length === 0;&#10;  console.log(' Erreurs de validation:', errors.value);&#10;  console.log('✅ Formulaire valide:', isValid);&#10;  return isValid;&#10;}&#10;&#10;/**&#10; * Soumettre le formulaire&#10; */&#10;async function submitForm() {&#10;  console.log(' submitForm appelée');&#10;  console.log(' Données du formulaire:', formData.value);&#10;  console.log('✅ isFormValid:', isFormValid.value);&#10;  &#10;  if (!validateForm()) {&#10;    console.log('❌ Validation échouée');&#10;    return;&#10;  }&#10;  &#10;  console.log('✅ Validation réussie, début de l\'envoi');&#10;  loading.value = true;&#10;  &#10;  try {&#10;    // Préparer les données pour l'API&#10;    const betData = {&#10;      bet_date: formData.value.bet_date.toISOString().split('T')[0], // Format YYYY-MM-DD&#10;      bet_code: events.value.length &gt; 0 ? `Pari combiné (${events.value.length} événements)` : (currentEvent.value.description || formData.value.description || 'Pari libre'),&#10;      global_odds: parseFloat(formData.value.global_odds),&#10;      stake: parseFloat(formData.value.stake),&#10;      stake_type: betTypeValue.value, // Type de mise: 'currency' ou 'percentage'&#10;      result: formData.value.result || 'pending',&#10;      events: eventCards.value.map(eventData =&gt; ({&#10;        id: eventData.id,&#10;        sport_id: eventData.sport_id,&#10;        country_id: eventData.country_id,&#10;        league_id: eventData.league,&#10;        team1_id: eventData.team1,&#10;        team2_id: eventData.team2,&#10;        description: eventData.description,&#10;        result: eventData.result,&#10;        odds: eventData.odds&#10;      })) // Array d'événements basé sur eventCards&#10;    };&#10;    &#10;    console.log(' Données envoyées à l\'API:', betData);&#10;    &#10;    const response = await BetService.createBet(betData);&#10;    &#10;    console.log(' Réponse reçue de l\'API:', response);&#10;    &#10;    if (response.success) {&#10;      toast.add({&#10;        severity: 'success',&#10;        summary: 'Succès',&#10;        detail: 'Pari ajouté avec succès - Données reçues: ' + JSON.stringify(response.data),&#10;        life: 5000&#10;      });&#10;      &#10;      // Émettre l'événement pour informer le parent&#10;      emit('bet-created', response.data);&#10;      &#10;      // Fermer la dialog&#10;      closeDialog();&#10;    } else {&#10;      throw new Error('Erreur lors de la création du pari');&#10;    }&#10;  } catch (error) {&#10;    console.error('❌ Erreur lors de la création du pari:', error);&#10;    toast.add({&#10;      severity: 'error',&#10;      summary: 'Erreur',&#10;      detail: 'Impossible de créer le pari: ' + error.message,&#10;      life: 5000&#10;    });&#10;  } finally {&#10;    loading.value = false;&#10;  }&#10;}&#10;&#10;/**&#10; * Fermer la dialog&#10; */&#10;function closeDialog() {&#10;  emit('closeDialog');&#10;}&#10;&#10;/**&#10; * Réinitialiser le formulaire&#10; */&#10;function resetForm() {&#10;  formData.value = {&#10;    bet_date: new Date(),&#10;    sport_id: null,&#10;    country_id: null,&#10;    league: null,&#10;    team1: null,&#10;    team2: null,&#10;    global_odds: null,&#10;    stake: null,&#10;    result: 'pending'&#10;  };&#10;  errors.value = {};&#10;  availableLeagues.value = [];&#10;  availableTeams.value = [];&#10;  &#10;  // Réinitialiser les événements et l'événement actuel&#10;  events.value = [];&#10;  currentEvent.value = {&#10;    sport_id: null,&#10;    country_id: null,&#10;    league: null,&#10;    team1: null,&#10;    team2: null,&#10;    bet_code: '',&#10;    description: '',&#10;    result: null,&#10;    odds: null&#10;  };&#10;  &#10;  // Réinitialiser les variables de recherche de pays&#10;  selectedCountry.value = null;&#10;  countrySearchResults.value = [];&#10;  countrySearchQuery.value = '';&#10;  countryCurrentPage.value = 1;&#10;  countryHasMore.value = false;&#10;  countryLoading.value = false;&#10;  &#10;  // Réinitialiser les variables de recherche de ligues&#10;  selectedLeague.value = null;&#10;  leagueSearchResults.value = [];&#10;  leagueSearchQuery.value = '';&#10;  leagueCurrentPage.value = 1;&#10;  leagueHasMore.value = false;&#10;  leagueLoading.value = false;&#10;  &#10;  // Réinitialiser les variables de recherche d'équipes&#10;  selectedTeam1.value = [];&#10;  selectedTeam2.value = [];&#10;  teamSearchResults.value = [];&#10;  teamSearchQuery.value = '';&#10;  teamCurrentPage.value = 1;&#10;  teamHasMore.value = false;&#10;  teamLoading.value = false;&#10;  &#10;  // Nettoyer les event listeners&#10;  cleanupScrollListeners();&#10;}&#10;&#10;/**&#10; * Nettoyer les event listeners de scroll&#10; */&#10;function cleanupScrollListeners() {&#10;  const panels = document.querySelectorAll('.p-autocomplete-panel .p-autocomplete-items, .p-autocomplete-list-container');&#10;  panels.forEach(panel =&gt; {&#10;    if (panel.hasScrollListener) {&#10;      panel.removeEventListener('scroll', handlePanelScroll);&#10;      panel.hasScrollListener = false;&#10;    }&#10;    if (panel.hasTeam1ScrollListener) {&#10;      panel.removeEventListener('scroll', handleTeam1PanelScroll);&#10;      panel.hasTeam1ScrollListener = false;&#10;    }&#10;    if (panel.hasTeam2ScrollListener) {&#10;      panel.removeEventListener('scroll', handleTeam2PanelScroll);&#10;      panel.hasTeam2ScrollListener = false;&#10;    }&#10;&#10;  });&#10;}&#10;&#10;/**&#10; * Supprimer la ligue sélectionnée&#10; */&#10;function clearLeague() {&#10;  selectedLeague.value = null;&#10;  formData.value.league = null;&#10;  // Réinitialiser les équipes quand on supprime la ligue&#10;  selectedTeam1.value = [];&#10;  selectedTeam2.value = [];&#10;  formData.value.team1 = null;&#10;  formData.value.team2 = null;&#10;}&#10;&#10;/**&#10; * Supprimer l'équipe 1 sélectionnée&#10; */&#10;function clearTeam1() {&#10;  selectedTeam1.value = [];&#10;  formData.value.team1 = null;&#10;}&#10;&#10;/**&#10; * Supprimer l'équipe 2 sélectionnée&#10; */&#10;function clearTeam2() {&#10;  selectedTeam2.value = [];&#10;  formData.value.team2 = null;&#10;}&#10;&#10;/**&#10; * Ajouter un pari combiné&#10; */&#10;function addEvent() {&#10;  // Valider que tous les champs requis sont remplis&#10;  if (!formData.value.sport_id || !formData.value.league || !formData.value.team1 || !formData.value.team2 || !currentEvent.value.description) {&#10;    toast.add({&#10;      severity: 'warn',&#10;      summary: 'Champs manquants',&#10;      detail: 'Veuillez remplir tous les champs de l\'événement avant d\'ajouter un nouvel événement.',&#10;      life: 3000&#10;    });&#10;    return;&#10;  }&#10;&#10;  // Créer un nouvel événement avec les données actuelles&#10;  const newEvent = {&#10;    id: Date.now(), // ID temporaire&#10;    sport_id: formData.value.sport_id,&#10;    country_id: formData.value.country_id,&#10;    league: selectedLeague.value,&#10;    team1: selectedTeam1.value,&#10;    team2: selectedTeam2.value,&#10;    bet_code: currentEvent.value.description,&#10;    description: currentEvent.value.description,&#10;    result: currentEvent.value.result,&#10;    odds: currentEvent.value.odds&#10;  };&#10;&#10;  // Ajouter l'événement à la liste&#10;  events.value.push(newEvent);&#10;&#10;  // Réinitialiser les champs pour le prochain événement&#10;  resetEventFields();&#10;&#10;  console.log('✅ Événement ajouté:', newEvent);&#10;   console.log(' Liste des événements:', events.value);&#10;   &#10;   // Recalculer la cote globale&#10;   calculateGlobalOdds();&#10; }&#10;&#10;/**&#10; * Ajouter une nouvelle card d'événement&#10; */&#10;function addEventCard() {&#10;  const newEventCard = {&#10;    id: Date.now(),&#10;    sport_id: null,&#10;    country_id: null,&#10;    league: null,&#10;    team1: null,&#10;    team2: null,&#10;    description: '',&#10;    result: null,&#10;    odds: null,&#10;    selectedSport: [],&#10;    selectedCountry: [],&#10;    selectedLeague: [],&#10;    selectedTeam1: [],&#10;    selectedTeam2: [],&#10;    sportSearchResults: [],&#10;    sportLoading: false,&#10;    countryFilteredResults: [],&#10;    leagueSearchResults: [],&#10;    leagueLoading: false,&#10;    team1SearchResults: [],&#10;    team1Loading: false,&#10;    team2SearchResults: [],&#10;    team2Loading: false&#10;  };&#10;  &#10;  eventCards.value.push(newEventCard);&#10;  console.log('✅ Nouvelle card d\'événement ajoutée:', newEventCard);&#10;}&#10;&#10;/**&#10; * Supprimer une card d'événement&#10; * @param {number} index - Index de la card à supprimer&#10; */&#10;function removeEventCard(index) {&#10;  if (eventCards.value.length &gt; 1) {&#10;    eventCards.value.splice(index, 1);&#10;    console.log('️ Card d\'événement supprimée à l\'index:', index);&#10;  }&#10;}&#10; &#10; /**&#10;  * Supprimer un événement de la liste&#10;  * @param {number} index - Index de l'événement à supprimer&#10;  */&#10; function removeEvent(index) {&#10;   events.value.splice(index, 1);&#10;   &#10;   // Recalculer la cote globale après suppression&#10;   calculateGlobalOdds();&#10;   &#10;   console.log('️ Événement supprimé à l\'index:', index);&#10;   console.log(' Liste des événements mise à jour:', events.value);&#10; }&#10;&#10;/**&#10; * Réinitialiser les champs de l'événement actuel&#10; */&#10;function resetEventFields() {&#10;  // Réinitialiser les champs de l'événement&#10;  formData.value.sport_id = null;&#10;  formData.value.country_id = null;&#10;  formData.value.league = null;&#10;  formData.value.team1 = null;&#10;  formData.value.team2 = null;&#10;  &#10;  // Réinitialiser l'événement actuel&#10;  currentEvent.value.description = '';&#10;  currentEvent.value.result = null;&#10;  currentEvent.value.odds = null;&#10;  &#10;  // Réinitialiser les variables de sélection&#10;  selectedCountry.value = [];&#10;  selectedLeague.value = [];&#10;  selectedTeam1.value = [];&#10;  selectedTeam2.value = [];&#10;  &#10;  // Réinitialiser l'événement actuel&#10;  currentEvent.value = {&#10;    sport_id: null,&#10;    country_id: null,&#10;    league: null,&#10;    team1: null,&#10;    team2: null,&#10;    bet_code: '',&#10;    result: null,&#10;    odds: null&#10;  };&#10;}&#10;&#10;/**&#10; * Calculer la cote globale en multipliant toutes les cotes des événements&#10; */&#10;function calculateGlobalOdds() {&#10;  if (events.value.length === 0) {&#10;    return;&#10;  }&#10;  &#10;  let globalOdds = 1;&#10;  let hasValidOdds = true;&#10;  &#10;  // Inclure la cote de l'événement actuel s'il y en a une&#10;  if (currentEvent.value.odds &amp;&amp; currentEvent.value.odds &gt; 0) {&#10;    globalOdds *= parseFloat(currentEvent.value.odds);&#10;  }&#10;  &#10;  // Multiplier par toutes les cotes des événements ajoutés&#10;  events.value.forEach(event =&gt; {&#10;    if (event.odds &amp;&amp; event.odds &gt; 0) {&#10;      globalOdds *= parseFloat(event.odds);&#10;    } else {&#10;      hasValidOdds = false;&#10;    }&#10;  });&#10;  &#10;  // Mettre à jour la cote globale seulement si toutes les cotes sont valides&#10;  if (hasValidOdds &amp;&amp; globalOdds &gt; 1) {&#10;    formData.value.global_odds = parseFloat(globalOdds.toFixed(2));&#10;  }&#10;}&#10;&#10;/**&#10; * Calculer le résultat global basé sur tous les résultats des événements&#10; */&#10;function calculateGlobalResult() {&#10;  if (events.value.length === 0) {&#10;    return;&#10;  }&#10;  &#10;  let hasAllResults = true;&#10;  let hasWon = true;&#10;  let hasLost = false;&#10;  let hasVoid = false;&#10;  let hasPending = false;&#10;  &#10;  // Inclure le résultat de l'événement actuel&#10;  const allResults = [...events.value.map(e =&gt; e.result)];&#10;  if (currentEvent.value.result) {&#10;    allResults.push(currentEvent.value.result);&#10;  }&#10;  &#10;  allResults.forEach(result =&gt; {&#10;    if (!result) {&#10;      hasAllResults = false;&#10;      return;&#10;    }&#10;    &#10;    switch (result) {&#10;      case 'lost':&#10;        hasLost = true;&#10;        hasWon = false;&#10;        break;&#10;      case 'void':&#10;        hasVoid = true;&#10;        break;&#10;      case 'pending':&#10;        hasPending = true;&#10;        hasWon = false;&#10;        break;&#10;      case 'won':&#10;        // Continue à vérifier les autres&#10;        break;&#10;      default:&#10;        hasWon = false;&#10;    }&#10;  });&#10;  &#10;  // Déterminer le résultat global&#10;  if (!hasAllResults || hasPending) {&#10;    formData.value.result = 'pending';&#10;  } else if (hasLost) {&#10;    formData.value.result = 'lost';&#10;  } else if (hasVoid &amp;&amp; hasWon) {&#10;    formData.value.result = 'won'; // Si certains sont void mais les autres gagnés&#10;  } else if (hasVoid) {&#10;    formData.value.result = 'void';&#10;  } else if (hasWon) {&#10;    formData.value.result = 'won';&#10;  }&#10;}&#10;&#10;/**&#10; * Récupérer le capital actuel de l'utilisateur&#10; */&#10;async function fetchCurrentCapital() {&#10;  try {&#10;    capitalLoading.value = true;&#10;    const response = await BetService.getCapitalEvolution();&#10;    &#10;    if (response.success &amp;&amp; response.data) {&#10;      currentCapital.value = response.current_capital || response.initial_capital || 0;&#10;    }&#10;  } catch (error) {&#10;    console.error('Erreur lors de la récupération du capital actuel:', error);&#10;    currentCapital.value = 0;&#10;  } finally {&#10;    capitalLoading.value = false;&#10;  }&#10;}&#10;&#10;/**&#10; * Calculer la mise en pourcentage du capital&#10; */&#10;function calculatePercentageStake() {&#10;  if (betTypeValue.value === 'percentage' &amp;&amp; formData.value.stake &amp;&amp; currentCapital.value &gt; 0) {&#10;    const percentage = parseFloat(formData.value.stake);&#10;    if (!isNaN(percentage) &amp;&amp; percentage &gt; 0) {&#10;      calculatedStake.value = (currentCapital.value * percentage) / 100;&#10;      return;&#10;    }&#10;  }&#10;  calculatedStake.value = 0;&#10;}&#10;&#10;// Watchers&#10;// Surveiller le changement de type de mise pour récupérer le capital&#10;watch(betTypeValue, async (newValue) =&gt; {&#10;  if (newValue === 'percentage') {&#10;    await fetchCurrentCapital();&#10;  }&#10;  calculatePercentageStake();&#10;});&#10;&#10;// Surveiller les changements de la mise pour recalculer en mode pourcentage&#10;watch(() =&gt; formData.value.stake, () =&gt; {&#10;  calculatePercentageStake();&#10;});&#10;&#10;// Surveiller les changements dans les résultats des événements&#10;watch(&#10;  () =&gt; [events.value.map(e =&gt; e.result), currentEvent.value.result],&#10;  () =&gt; {&#10;    calculateGlobalResult();&#10;  },&#10;  { deep: true }&#10;);&#10;&#10;// Lifecycle&#10;onMounted(async () =&gt; {&#10;  await loadSports();&#10;  await loadCountries();&#10;});&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;.p-invalid {&#10;  border-color: #ef4444;&#10;}&#10;&#10;&#10;&#10;/* Styles personnalisés pour les composants Select */&#10;:deep(.select-custom .p-dropdown-panel) {&#10;  max-width: 100% !important;&#10;  width: auto !important;&#10;}&#10;&#10;:deep(.select-panel-custom) {&#10;  max-width: calc(50vw - 4rem) !important;&#10;  width: auto !important;&#10;  max-height: 200px !important;&#10;  overflow-y: auto !important;&#10;  z-index: 9999 !important;&#10;  position: absolute !important;&#10;}&#10;&#10;@media (max-width: 960px) {&#10;  :deep(.select-panel-custom) {&#10;    max-width: calc(90vw - 4rem) !important;&#10;  }&#10;}&#10;&#10;:deep(.select-panel-custom .p-dropdown-items) {&#10;  max-width: 100% !important;&#10;  max-height: 180px !important;&#10;  overflow-y: auto !important;&#10;}&#10;&#10;:deep(.select-panel-custom .p-dropdown-item) {&#10;  max-width: 100% !important;&#10;  overflow: hidden !important;&#10;  text-overflow: ellipsis !important;&#10;  white-space: nowrap !important;&#10;}&#10;&#10;:deep(.select-custom .p-dropdown-label) {&#10;  max-width: 100% !important;&#10;  overflow: hidden !important;&#10;  text-overflow: ellipsis !important;&#10;  white-space: nowrap !important;&#10;}&#10;&#10;/* Contraindre la modal et ses éléments */&#10;:deep(.p-dialog) {&#10;  overflow: visible !important;&#10;}&#10;&#10;:deep(.p-dialog-content) {&#10;  overflow: visible !important;&#10;}&#10;&#10;&lt;/style&gt;&#10;&#10;&lt;style&gt;&#10;/* Contraindre l'overlay du sélecteur */&#10;.p-select-overlay {&#10;  max-width: calc(50vw - 4rem) !important;&#10;  width: auto !important;&#10;}&#10;&#10;@media (max-width: 960px) {&#10;  .p-select-overlay {&#10;    max-width: calc(90vw - 4rem) !important;&#10;  }&#10;}&#10;&lt;/style&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/dashboard/AddBetDialog.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/dashboard/AddBetDialog.vue" />
              <option name="originalContent" value="&lt;template&gt;&#10;  &lt;Dialog&gt;&#10;    &lt;AddBetForm /&gt;&#10;  &lt;/Dialog&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup&gt;&#10;import AddBetForm from '@/components/add-bet/AddBetForm.vue';&#10;&lt;/script&gt;&#10;" />
              <option name="updatedContent" value="&lt;template&gt;&#10;  &lt;Dialog v-model:visible=&quot;dialogVisible&quot; modal header=&quot;Ajouter un pari&quot; :style=&quot;{ width: '90vw', maxWidth: '600px' }&quot; @hide=&quot;closeDialog&quot;&gt;&#10;    &lt;AddBetForm @bet-created=&quot;onBetCreated&quot; @closeDialog=&quot;closeDialog&quot; /&gt;&#10;  &lt;/Dialog&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup&gt;&#10;import { ref, watch } from 'vue';&#10;import Dialog from 'primevue/dialog';&#10;import AddBetForm from '@/components/add-bet/AddBetForm.vue';&#10;&#10;const props = defineProps({&#10;  visible: Boolean&#10;});&#10;const emit = defineEmits(['update:visible', 'bet-created']);&#10;&#10;const dialogVisible = ref(props.visible);&#10;&#10;watch(() =&gt; props.visible, (val) =&gt; {&#10;  dialogVisible.value = val;&#10;});&#10;&#10;function closeDialog() {&#10;  dialogVisible.value = false;&#10;  emit('update:visible', false);&#10;}&#10;&#10;function onBetCreated(bet) {&#10;  emit('bet-created', bet);&#10;  closeDialog();&#10;}&#10;&lt;/script&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/layout/AppMenu.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/layout/AppMenu.vue" />
              <option name="originalContent" value="&lt;script setup&gt;&#10;import { ref } from 'vue';&#10;&#10;import AppMenuItem from './AppMenuItem.vue';&#10;import { useRouter } from 'vue-router';&#10;const router = useRouter();&#10;const logout = () =&gt; {&#10;    localStorage.removeItem('token'); // Supprime le token de l'utilisateur&#10;    router.push('/auth/login'); // Redirige vers la page de connexion&#10;};&#10;const model = ref([&#10;    {&#10;        items: [{ label: 'Dashboard', icon: 'pi pi-fw pi-home', to: '/' }]&#10;    },&#10;    {&#10;        label: 'Paris',&#10;        items: [&#10;            { label: 'Ajouter un pari', icon: 'pi pi-fw pi-plus', to: '/ajouter-pari' }&#10;        ]&#10;    },&#10;    {&#10;        label: 'Mon Profil',&#10;        items: [&#10;            { label: 'Mes informations', icon: 'pi pi-fw pi-user', to: '/profile/mes-informations' },&#10;            { label: 'Mes Bookmakers', icon: 'pi pi-fw pi-wallet', to: '/uikit/input' },&#10;            { label: 'Mes Sports', icon: 'pi pi-fw pi-star', to: '/profil/inf' },&#10;            { label: 'Mes Bankrolls', icon: 'pi pi-fw pi-dollar', to: '/uikit/input' },&#10;            { label: 'Mes Tipsters', icon: 'pi pi-fw pi-users', to: '/uikit/input' },&#10;&#10;        ]&#10;    },&#10;    {&#10;        label: 'UI Components',&#10;        items: [&#10;            { label: 'Form Layout', icon: 'pi pi-fw pi-id-card', to: '/uikit/formlayout' },&#10;            { label: 'Input', icon: 'pi pi-fw pi-check-square', to: '/uikit/input' },&#10;            { label: 'Button', icon: 'pi pi-fw pi-mobile', to: '/uikit/button', class: 'rotated-icon' },&#10;            { label: 'Table', icon: 'pi pi-fw pi-table', to: '/uikit/table' },&#10;            { label: 'List', icon: 'pi pi-fw pi-list', to: '/uikit/list' },&#10;            { label: 'Tree', icon: 'pi pi-fw pi-share-alt', to: '/uikit/tree' },&#10;            { label: 'Panel', icon: 'pi pi-fw pi-tablet', to: '/uikit/panel' },&#10;            { label: 'Overlay', icon: 'pi pi-fw pi-clone', to: '/uikit/overlay' },&#10;            { label: 'Media', icon: 'pi pi-fw pi-image', to: '/uikit/media' },&#10;            { label: 'Menu', icon: 'pi pi-fw pi-bars', to: '/uikit/menu' },&#10;            { label: 'Message', icon: 'pi pi-fw pi-comment', to: '/uikit/message' },&#10;            { label: 'File', icon: 'pi pi-fw pi-file', to: '/uikit/file' },&#10;            { label: 'Chart', icon: 'pi pi-fw pi-chart-bar', to: '/uikit/charts' },&#10;            { label: 'Timeline', icon: 'pi pi-fw pi-calendar', to: '/uikit/timeline' },&#10;            { label: 'Misc', icon: 'pi pi-fw pi-circle', to: '/uikit/misc' },&#10;&#10;        ]&#10;    },&#10;    {&#10;        label: 'Pages',&#10;        icon: 'pi pi-fw pi-briefcase',&#10;        to: '/pages',&#10;        items: [&#10;            {&#10;                label: 'Landing',&#10;                icon: 'pi pi-fw pi-globe',&#10;                to: '/landing'&#10;            },&#10;            {&#10;                label: 'Auth',&#10;                icon: 'pi pi-fw pi-user',&#10;                items: [&#10;                    {&#10;                        label: 'Login',&#10;                        icon: 'pi pi-fw pi-sign-in',&#10;                        to: '/auth/login'&#10;                    },&#10;                    {&#10;                        label: 'Error',&#10;                        icon: 'pi pi-fw pi-times-circle',&#10;                        to: '/auth/error'&#10;                    },&#10;                    {&#10;                        label: 'Access Denied',&#10;                        icon: 'pi pi-fw pi-lock',&#10;                        to: '/auth/access'&#10;                    }&#10;                ]&#10;            },&#10;            {&#10;                label: 'Crud',&#10;                icon: 'pi pi-fw pi-pencil',&#10;                to: '/pages/crud'&#10;            },&#10;            {&#10;                label: 'Not Found',&#10;                icon: 'pi pi-fw pi-exclamation-circle',&#10;                to: '/pages/notfound'&#10;            },&#10;            {&#10;                label: 'Empty',&#10;                icon: 'pi pi-fw pi-circle-off',&#10;                to: '/pages/empty'&#10;            }&#10;        ]&#10;    },&#10;    {&#10;        label: 'Hierarchy',&#10;        items: [&#10;            {&#10;                label: 'Submenu 1',&#10;                icon: 'pi pi-fw pi-bookmark',&#10;                items: [&#10;                    {&#10;                        label: 'Submenu 1.1',&#10;                        icon: 'pi pi-fw pi-bookmark',&#10;                        items: [&#10;                            { label: 'Submenu 1.1.1', icon: 'pi pi-fw pi-bookmark' },&#10;                            { label: 'Submenu 1.1.2', icon: 'pi pi-fw pi-bookmark' },&#10;                            { label: 'Submenu 1.1.3', icon: 'pi pi-fw pi-bookmark' }&#10;                        ]&#10;                    },&#10;                    {&#10;                        label: 'Submenu 1.2',&#10;                        icon: 'pi pi-fw pi-bookmark',&#10;                        items: [{ label: 'Submenu 1.2.1', icon: 'pi pi-fw pi-bookmark' }]&#10;                    }&#10;                ]&#10;            },&#10;            {&#10;                label: 'Submenu 2',&#10;                icon: 'pi pi-fw pi-bookmark',&#10;                items: [&#10;                    {&#10;                        label: 'Submenu 2.1',&#10;                        icon: 'pi pi-fw pi-bookmark',&#10;                        items: [&#10;                            { label: 'Submenu 2.1.1', icon: 'pi pi-fw pi-bookmark' },&#10;                            { label: 'Submenu 2.1.2', icon: 'pi pi-fw pi-bookmark' }&#10;                        ]&#10;                    },&#10;                    {&#10;                        label: 'Submenu 2.2',&#10;                        icon: 'pi pi-fw pi-bookmark',&#10;                        items: [{ label: 'Submenu 2.2.1', icon: 'pi pi-fw pi-bookmark' }]&#10;                    }&#10;                ]&#10;            }&#10;        ]&#10;    },&#10;    {&#10;        label: 'Get Started',&#10;        items: [&#10;            {&#10;                label: 'Documentation',&#10;                icon: 'pi pi-fw pi-book',&#10;                to: '/documentation'&#10;            },&#10;            {&#10;                label: 'View Source',&#10;                icon: 'pi pi-fw pi-github',&#10;                url: 'https://github.com/primefaces/sakai-vue',&#10;                target: '_blank'&#10;            }&#10;        ]&#10;    },&#10;    {&#10;        items: [{ label: 'Déconnexion', icon: 'pi pi-sign-out', to: '/auth/login', command: logout, class: 'text-red-500' }]&#10;    }&#10;&#10;&#10;]);&#10;&lt;/script&gt;&#10;&#10;&lt;template&gt;&#10;    &lt;ul class=&quot;layout-menu&quot;&gt;&#10;        &lt;template v-for=&quot;(item, i) in model&quot; :key=&quot;item&quot;&gt;&#10;            &lt;app-menu-item v-if=&quot;!item.separator&quot; :item=&quot;item&quot; :index=&quot;i&quot;&gt;&lt;/app-menu-item&gt;&#10;            &lt;li v-if=&quot;item.separator&quot; class=&quot;menu-separator&quot;&gt;&lt;/li&gt;&#10;        &lt;/template&gt;&#10;    &lt;/ul&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;script setup&gt;&#10;import { ref } from 'vue';&#10;&#10;import AppMenuItem from './AppMenuItem.vue';&#10;import { useRouter } from 'vue-router';&#10;const router = useRouter();&#10;const logout = () =&gt; {&#10;    localStorage.removeItem('token'); // Supprime le token de l'utilisateur&#10;    router.push('/auth/login'); // Redirige vers la page de connexion&#10;};&#10;const model = ref([&#10;    {&#10;        items: [{ label: 'Dashboard', icon: 'pi pi-fw pi-home', to: '/' }]&#10;    },&#10;    {&#10;        label: 'Paris',&#10;        items: [&#10;            { label: 'Mes paris', icon: 'pi pi-fw pi-list', to: '/mes-paris' },&#10;            { label: 'Ajouter un pari', icon: 'pi pi-fw pi-plus', to: '/ajouter-pari' }&#10;        ]&#10;    },&#10;    {&#10;        label: 'Mon Profil',&#10;        items: [&#10;            { label: 'Mes informations', icon: 'pi pi-fw pi-user', to: '/profile/mes-informations' },&#10;            { label: 'Mes Bookmakers', icon: 'pi pi-fw pi-wallet', to: '/uikit/input' },&#10;            { label: 'Mes Sports', icon: 'pi pi-fw pi-star', to: '/profil/inf' },&#10;            { label: 'Mes Bankrolls', icon: 'pi pi-fw pi-dollar', to: '/uikit/input' },&#10;            { label: 'Mes Tipsters', icon: 'pi pi-fw pi-users', to: '/uikit/input' },&#10;&#10;        ]&#10;    },&#10;    {&#10;        label: 'UI Components',&#10;        items: [&#10;            { label: 'Form Layout', icon: 'pi pi-fw pi-id-card', to: '/uikit/formlayout' },&#10;            { label: 'Input', icon: 'pi pi-fw pi-check-square', to: '/uikit/input' },&#10;            { label: 'Button', icon: 'pi pi-fw pi-mobile', to: '/uikit/button', class: 'rotated-icon' },&#10;            { label: 'Table', icon: 'pi pi-fw pi-table', to: '/uikit/table' },&#10;            { label: 'List', icon: 'pi pi-fw pi-list', to: '/uikit/list' },&#10;            { label: 'Tree', icon: 'pi pi-fw pi-share-alt', to: '/uikit/tree' },&#10;            { label: 'Panel', icon: 'pi pi-fw pi-tablet', to: '/uikit/panel' },&#10;            { label: 'Overlay', icon: 'pi pi-fw pi-clone', to: '/uikit/overlay' },&#10;            { label: 'Media', icon: 'pi pi-fw pi-image', to: '/uikit/media' },&#10;            { label: 'Menu', icon: 'pi pi-fw pi-bars', to: '/uikit/menu' },&#10;            { label: 'Message', icon: 'pi pi-fw pi-comment', to: '/uikit/message' },&#10;            { label: 'File', icon: 'pi pi-fw pi-file', to: '/uikit/file' },&#10;            { label: 'Chart', icon: 'pi pi-fw pi-chart-bar', to: '/uikit/charts' },&#10;            { label: 'Timeline', icon: 'pi pi-fw pi-calendar', to: '/uikit/timeline' },&#10;            { label: 'Misc', icon: 'pi pi-fw pi-circle', to: '/uikit/misc' },&#10;&#10;        ]&#10;    },&#10;    {&#10;        label: 'Pages',&#10;        icon: 'pi pi-fw pi-briefcase',&#10;        to: '/pages',&#10;        items: [&#10;            {&#10;                label: 'Landing',&#10;                icon: 'pi pi-fw pi-globe',&#10;                to: '/landing'&#10;            },&#10;            {&#10;                label: 'Auth',&#10;                icon: 'pi pi-fw pi-user',&#10;                items: [&#10;                    {&#10;                        label: 'Login',&#10;                        icon: 'pi pi-fw pi-sign-in',&#10;                        to: '/auth/login'&#10;                    },&#10;                    {&#10;                        label: 'Error',&#10;                        icon: 'pi pi-fw pi-times-circle',&#10;                        to: '/auth/error'&#10;                    },&#10;                    {&#10;                        label: 'Access Denied',&#10;                        icon: 'pi pi-fw pi-lock',&#10;                        to: '/auth/access'&#10;                    }&#10;                ]&#10;            },&#10;            {&#10;                label: 'Crud',&#10;                icon: 'pi pi-fw pi-pencil',&#10;                to: '/pages/crud'&#10;            },&#10;            {&#10;                label: 'Not Found',&#10;                icon: 'pi pi-fw pi-exclamation-circle',&#10;                to: '/pages/notfound'&#10;            },&#10;            {&#10;                label: 'Empty',&#10;                icon: 'pi pi-fw pi-circle-off',&#10;                to: '/pages/empty'&#10;            }&#10;        ]&#10;    },&#10;    {&#10;        label: 'Hierarchy',&#10;        items: [&#10;            {&#10;                label: 'Submenu 1',&#10;                icon: 'pi pi-fw pi-bookmark',&#10;                items: [&#10;                    {&#10;                        label: 'Submenu 1.1',&#10;                        icon: 'pi pi-fw pi-bookmark',&#10;                        items: [&#10;                            { label: 'Submenu 1.1.1', icon: 'pi pi-fw pi-bookmark' },&#10;                            { label: 'Submenu 1.1.2', icon: 'pi pi-fw pi-bookmark' },&#10;                            { label: 'Submenu 1.1.3', icon: 'pi pi-fw pi-bookmark' }&#10;                        ]&#10;                    },&#10;                    {&#10;                        label: 'Submenu 1.2',&#10;                        icon: 'pi pi-fw pi-bookmark',&#10;                        items: [{ label: 'Submenu 1.2.1', icon: 'pi pi-fw pi-bookmark' }]&#10;                    }&#10;                ]&#10;            },&#10;            {&#10;                label: 'Submenu 2',&#10;                icon: 'pi pi-fw pi-bookmark',&#10;                items: [&#10;                    {&#10;                        label: 'Submenu 2.1',&#10;                        icon: 'pi pi-fw pi-bookmark',&#10;                        items: [&#10;                            { label: 'Submenu 2.1.1', icon: 'pi pi-fw pi-bookmark' },&#10;                            { label: 'Submenu 2.1.2', icon: 'pi pi-fw pi-bookmark' }&#10;                        ]&#10;                    },&#10;                    {&#10;                        label: 'Submenu 2.2',&#10;                        icon: 'pi pi-fw pi-bookmark',&#10;                        items: [{ label: 'Submenu 2.2.1', icon: 'pi pi-fw pi-bookmark' }]&#10;                    }&#10;                ]&#10;            }&#10;        ]&#10;    },&#10;    {&#10;        label: 'Get Started',&#10;        items: [&#10;            {&#10;                label: 'Documentation',&#10;                icon: 'pi pi-fw pi-book',&#10;                to: '/documentation'&#10;            },&#10;            {&#10;                label: 'View Source',&#10;                icon: 'pi pi-fw pi-github',&#10;                url: 'https://github.com/primefaces/sakai-vue',&#10;                target: '_blank'&#10;            }&#10;        ]&#10;    },&#10;    {&#10;        items: [{ label: 'Déconnexion', icon: 'pi pi-sign-out', to: '/auth/login', command: logout, class: 'text-red-500' }]&#10;    }&#10;&#10;&#10;]);&#10;&lt;/script&gt;&#10;&#10;&lt;template&gt;&#10;    &lt;ul class=&quot;layout-menu&quot;&gt;&#10;        &lt;template v-for=&quot;(item, i) in model&quot; :key=&quot;item&quot;&gt;&#10;            &lt;app-menu-item v-if=&quot;!item.separator&quot; :item=&quot;item&quot; :index=&quot;i&quot;&gt;&lt;/app-menu-item&gt;&#10;            &lt;li v-if=&quot;item.separator&quot; class=&quot;menu-separator&quot;&gt;&lt;/li&gt;&#10;        &lt;/template&gt;&#10;    &lt;/ul&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/layout/composables/layout.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/layout/composables/layout.js" />
              <option name="originalContent" value="import { computed, reactive } from 'vue';&#10;&#10;const layoutConfig = reactive({&#10;    preset: 'Aura',&#10;    primary: 'emerald',&#10;    surface: null,&#10;    darkTheme: false,&#10;    menuMode: 'static'&#10;});&#10;&#10;const layoutState = reactive({&#10;    staticMenuDesktopInactive: false,&#10;    overlayMenuActive: false,&#10;    profileSidebarVisible: false,&#10;    configSidebarVisible: false,&#10;    staticMenuMobileActive: false,&#10;    menuHoverActive: false,&#10;    activeMenuItem: null&#10;});&#10;&#10;export function useLayout() {&#10;    const setActiveMenuItem = (item) =&gt; {&#10;        layoutState.activeMenuItem = item.value || item;&#10;    };&#10;&#10;    const toggleDarkMode = () =&gt; {&#10;        if (!document.startViewTransition) {&#10;            executeDarkModeToggle();&#10;&#10;            return;&#10;        }&#10;&#10;        document.startViewTransition(() =&gt; executeDarkModeToggle(event));&#10;    };&#10;&#10;    const executeDarkModeToggle = () =&gt; {&#10;        layoutConfig.darkTheme = !layoutConfig.darkTheme;&#10;        document.documentElement.classList.toggle('app-dark');&#10;    };&#10;&#10;    const toggleMenu = () =&gt; {&#10;        if (layoutConfig.menuMode === 'overlay') {&#10;            layoutState.overlayMenuActive = !layoutState.overlayMenuActive;&#10;        }&#10;&#10;        if (window.innerWidth &gt; 991) {&#10;            layoutState.staticMenuDesktopInactive = !layoutState.staticMenuDesktopInactive;&#10;        } else {&#10;            layoutState.staticMenuMobileActive = !layoutState.staticMenuMobileActive;&#10;        }&#10;    };&#10;&#10;    const isSidebarActive = computed(() =&gt; layoutState.overlayMenuActive || layoutState.staticMenuMobileActive);&#10;&#10;    const isDarkTheme = computed(() =&gt; layoutConfig.darkTheme);&#10;&#10;    const getPrimary = computed(() =&gt; layoutConfig.primary);&#10;&#10;    const getSurface = computed(() =&gt; layoutConfig.surface);&#10;&#10;    return {&#10;        layoutConfig,&#10;        layoutState,&#10;        toggleMenu,&#10;        isSidebarActive,&#10;        isDarkTheme,&#10;        getPrimary,&#10;        getSurface,&#10;        setActiveMenuItem,&#10;        toggleDarkMode&#10;    };&#10;}&#10;" />
              <option name="updatedContent" value="import { computed, reactive } from 'vue';&#10;&#10;const layoutConfig = reactive({&#10;    preset: 'Aura',&#10;    primary: 'emerald',&#10;    surface: null,&#10;    darkTheme: true,&#10;    menuMode: 'static'&#10;});&#10;&#10;document.documentElement.classList.add('app-dark');&#10;&#10;const layoutState = reactive({&#10;    staticMenuDesktopInactive: false,&#10;    overlayMenuActive: false,&#10;    profileSidebarVisible: false,&#10;    configSidebarVisible: false,&#10;    staticMenuMobileActive: false,&#10;    menuHoverActive: false,&#10;    activeMenuItem: null&#10;});&#10;&#10;export function useLayout() {&#10;    const setActiveMenuItem = (item) =&gt; {&#10;        layoutState.activeMenuItem = item.value || item;&#10;    };&#10;&#10;    const toggleDarkMode = () =&gt; {&#10;        if (!document.startViewTransition) {&#10;            executeDarkModeToggle();&#10;&#10;            return;&#10;        }&#10;&#10;        document.startViewTransition(() =&gt; executeDarkModeToggle(event));&#10;    };&#10;&#10;    const executeDarkModeToggle = () =&gt; {&#10;        layoutConfig.darkTheme = !layoutConfig.darkTheme;&#10;        document.documentElement.classList.toggle('app-dark');&#10;    };&#10;&#10;    const toggleMenu = () =&gt; {&#10;        if (layoutConfig.menuMode === 'overlay') {&#10;            layoutState.overlayMenuActive = !layoutState.overlayMenuActive;&#10;        }&#10;&#10;        if (window.innerWidth &gt; 991) {&#10;            layoutState.staticMenuDesktopInactive = !layoutState.staticMenuDesktopInactive;&#10;        } else {&#10;            layoutState.staticMenuMobileActive = !layoutState.staticMenuMobileActive;&#10;        }&#10;    };&#10;&#10;    const isSidebarActive = computed(() =&gt; layoutState.overlayMenuActive || layoutState.staticMenuMobileActive);&#10;&#10;    const isDarkTheme = computed(() =&gt; layoutConfig.darkTheme);&#10;&#10;    const getPrimary = computed(() =&gt; layoutConfig.primary);&#10;&#10;    const getSurface = computed(() =&gt; layoutConfig.surface);&#10;&#10;    return {&#10;        layoutConfig,&#10;        layoutState,&#10;        toggleMenu,&#10;        isSidebarActive,&#10;        isDarkTheme,&#10;        getPrimary,&#10;        getSurface,&#10;        setActiveMenuItem,&#10;        toggleDarkMode&#10;    };&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/router/index.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/router/index.js" />
              <option name="originalContent" value="import AppLayout from '@/layout/AppLayout.vue';&#10;import { createRouter, createWebHistory } from 'vue-router';&#10;&#10;const router = createRouter({&#10;    history: createWebHistory(),&#10;    routes: [&#10;        {&#10;            path: '/',&#10;            component: AppLayout,&#10;            children: [&#10;                {&#10;                    path: '/',&#10;                    name: 'dashboard',&#10;                    component: () =&gt; import('@/views/Dashboard.vue'),&#10;                    meta: { requiresAuth: true }&#10;                },&#10;                {&#10;                    path: '/profile/mes-informations',&#10;                    name: 'profilInfos',&#10;                    component: () =&gt; import('@/views/profile/infos.vue'),&#10;                    meta: { requiresAuth: true }&#10;                },&#10;                {&#10;                    path: '/profil/inf',&#10;                    name: 'profilInf',&#10;                    component: () =&gt; import('@/views/profile/infos.vue'),&#10;                    meta: { requiresAuth: true }&#10;                },&#10;                {&#10;                    path: '/uikit/formlayout',&#10;                    name: 'formlayout',&#10;                    component: () =&gt; import('@/views/uikit/FormLayout.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/input',&#10;                    name: 'input',&#10;                    component: () =&gt; import('@/views/uikit/InputDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/button',&#10;                    name: 'button',&#10;                    component: () =&gt; import('@/views/uikit/ButtonDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/table',&#10;                    name: 'table',&#10;                    component: () =&gt; import('@/views/uikit/TableDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/list',&#10;                    name: 'list',&#10;                    component: () =&gt; import('@/views/uikit/ListDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/tree',&#10;                    name: 'tree',&#10;                    component: () =&gt; import('@/views/uikit/TreeDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/panel',&#10;                    name: 'panel',&#10;                    component: () =&gt; import('@/views/uikit/PanelsDoc.vue')&#10;                },&#10;&#10;                {&#10;                    path: '/uikit/overlay',&#10;                    name: 'overlay',&#10;                    component: () =&gt; import('@/views/uikit/OverlayDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/media',&#10;                    name: 'media',&#10;                    component: () =&gt; import('@/views/uikit/MediaDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/message',&#10;                    name: 'message',&#10;                    component: () =&gt; import('@/views/uikit/MessagesDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/file',&#10;                    name: 'file',&#10;                    component: () =&gt; import('@/views/uikit/FileDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/menu',&#10;                    name: 'menu',&#10;                    component: () =&gt; import('@/views/uikit/MenuDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/charts',&#10;                    name: 'charts',&#10;                    component: () =&gt; import('@/views/uikit/ChartDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/misc',&#10;                    name: 'misc',&#10;                    component: () =&gt; import('@/views/uikit/MiscDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/timeline',&#10;                    name: 'timeline',&#10;                    component: () =&gt; import('@/views/uikit/TimelineDoc.vue')&#10;                },&#10;                {&#10;                    path: '/pages/empty',&#10;                    name: 'empty',&#10;                    component: () =&gt; import('@/views/pages/Empty.vue')&#10;                },&#10;                {&#10;                    path: '/pages/crud',&#10;                    name: 'crud',&#10;                    component: () =&gt; import('@/views/pages/Crud.vue')&#10;                },&#10;                {&#10;                    path: '/documentation',&#10;                    name: 'documentation',&#10;                    component: () =&gt; import('@/views/pages/Documentation.vue')&#10;                },&#10;                {&#10;                    path: '/ajouter-pari',&#10;                    name: 'ajouterPari',&#10;                    component: () =&gt; import('@/views/AddBet.vue'),&#10;                    meta: { requiresAuth: true }&#10;                }&#10;            ]&#10;        },&#10;        {&#10;            path: '/landing',&#10;            name: 'landing',&#10;            component: () =&gt; import('@/views/pages/Landing.vue')&#10;        },&#10;        {&#10;            path: '/pages/notfound',&#10;            name: 'notfound',&#10;            component: () =&gt; import('@/views/pages/NotFound.vue')&#10;        },&#10;&#10;        {&#10;            path: '/auth/login',&#10;            name: 'login',&#10;            component: () =&gt; import('@/views/pages/auth/Login.vue')&#10;        },&#10;&#10;        {&#10;            path: '/auth/register',&#10;            name: 'register',&#10;            component: () =&gt; import('@/views/pages/auth/Register.vue')&#10;        },&#10;&#10;        {&#10;            path: '/auth/access',&#10;            name: 'accessDenied',&#10;            component: () =&gt; import('@/views/pages/auth/Access.vue')&#10;        },&#10;        {&#10;            path: '/auth/error',&#10;            name: 'error',&#10;            component: () =&gt; import('@/views/pages/auth/Error.vue')&#10;        }&#10;    ]&#10;});&#10;// ➤ Vérifier l'authentification avant de charger une route&#10;/* router.beforeEach((to, from, next) =&gt; {&#10;    const isAuthenticated = !!localStorage.getItem('token'); // Vérifie si un token est stocké&#10;&#10;    if (to.meta.requiresAuth &amp;&amp; !isAuthenticated) {&#10;        next({ name: 'login' }); // Rediriger vers la connexion si l'utilisateur n'est pas connecté&#10;    } else if (to.meta.guestOnly &amp;&amp; isAuthenticated) {&#10;        next({ name: 'dashboard' }); // Rediriger un utilisateur connecté vers le dashboard&#10;    } else {&#10;        next(); // Continuer normalement&#10;    }&#10;}); */&#10;export default router;&#10;" />
              <option name="updatedContent" value="import AppLayout from '@/layout/AppLayout.vue';&#10;import { createRouter, createWebHistory } from 'vue-router';&#10;&#10;const router = createRouter({&#10;    history: createWebHistory(),&#10;    routes: [&#10;        {&#10;            path: '/',&#10;            component: AppLayout,&#10;            children: [&#10;                {&#10;                    path: '/',&#10;                    name: 'dashboard',&#10;                    component: () =&gt; import('@/views/Dashboard.vue'),&#10;                    meta: { requiresAuth: true }&#10;                },&#10;                {&#10;                    path: '/profile/mes-informations',&#10;                    name: 'profilInfos',&#10;                    component: () =&gt; import('@/views/profile/infos.vue'),&#10;                    meta: { requiresAuth: true }&#10;                },&#10;                {&#10;                    path: '/profil/inf',&#10;                    name: 'profilInf',&#10;                    component: () =&gt; import('@/views/profile/infos.vue'),&#10;                    meta: { requiresAuth: true }&#10;                },&#10;                {&#10;                    path: '/uikit/formlayout',&#10;                    name: 'formlayout',&#10;                    component: () =&gt; import('@/views/uikit/FormLayout.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/input',&#10;                    name: 'input',&#10;                    component: () =&gt; import('@/views/uikit/InputDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/button',&#10;                    name: 'button',&#10;                    component: () =&gt; import('@/views/uikit/ButtonDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/table',&#10;                    name: 'table',&#10;                    component: () =&gt; import('@/views/uikit/TableDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/list',&#10;                    name: 'list',&#10;                    component: () =&gt; import('@/views/uikit/ListDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/tree',&#10;                    name: 'tree',&#10;                    component: () =&gt; import('@/views/uikit/TreeDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/panel',&#10;                    name: 'panel',&#10;                    component: () =&gt; import('@/views/uikit/PanelsDoc.vue')&#10;                },&#10;&#10;                {&#10;                    path: '/uikit/overlay',&#10;                    name: 'overlay',&#10;                    component: () =&gt; import('@/views/uikit/OverlayDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/media',&#10;                    name: 'media',&#10;                    component: () =&gt; import('@/views/uikit/MediaDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/message',&#10;                    name: 'message',&#10;                    component: () =&gt; import('@/views/uikit/MessagesDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/file',&#10;                    name: 'file',&#10;                    component: () =&gt; import('@/views/uikit/FileDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/menu',&#10;                    name: 'menu',&#10;                    component: () =&gt; import('@/views/uikit/MenuDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/charts',&#10;                    name: 'charts',&#10;                    component: () =&gt; import('@/views/uikit/ChartDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/misc',&#10;                    name: 'misc',&#10;                    component: () =&gt; import('@/views/uikit/MiscDoc.vue')&#10;                },&#10;                {&#10;                    path: '/uikit/timeline',&#10;                    name: 'timeline',&#10;                    component: () =&gt; import('@/views/uikit/TimelineDoc.vue')&#10;                },&#10;                {&#10;                    path: '/pages/empty',&#10;                    name: 'empty',&#10;                    component: () =&gt; import('@/views/pages/Empty.vue')&#10;                },&#10;                {&#10;                    path: '/pages/crud',&#10;                    name: 'crud',&#10;                    component: () =&gt; import('@/views/pages/Crud.vue')&#10;                },&#10;                {&#10;                    path: '/documentation',&#10;                    name: 'documentation',&#10;                    component: () =&gt; import('@/views/pages/Documentation.vue')&#10;                },&#10;                {&#10;                    path: '/ajouter-pari',&#10;                    name: 'ajouterPari',&#10;                    component: () =&gt; import('@/views/AddBet.vue'),&#10;                    meta: { requiresAuth: true }&#10;                },&#10;                {&#10;                    path: '/mes-paris',&#10;                    name: 'mesParis',&#10;                    component: () =&gt; import('@/components/dashboard/BetsHistoryWidget.vue'),&#10;                    meta: { requiresAuth: true }&#10;                }&#10;            ]&#10;        },&#10;        {&#10;            path: '/landing',&#10;            name: 'landing',&#10;            component: () =&gt; import('@/views/pages/Landing.vue')&#10;        },&#10;        {&#10;            path: '/pages/notfound',&#10;            name: 'notfound',&#10;            component: () =&gt; import('@/views/pages/NotFound.vue')&#10;        },&#10;&#10;        {&#10;            path: '/auth/login',&#10;            name: 'login',&#10;            component: () =&gt; import('@/views/pages/auth/Login.vue')&#10;        },&#10;&#10;        {&#10;            path: '/auth/register',&#10;            name: 'register',&#10;            component: () =&gt; import('@/views/pages/auth/Register.vue')&#10;        },&#10;&#10;        {&#10;            path: '/auth/access',&#10;            name: 'accessDenied',&#10;            component: () =&gt; import('@/views/pages/auth/Access.vue')&#10;        },&#10;        {&#10;            path: '/auth/error',&#10;            name: 'error',&#10;            component: () =&gt; import('@/views/pages/auth/Error.vue')&#10;        }&#10;    ]&#10;});&#10;// ➤ Vérifier l'authentification avant de charger une route&#10;/* router.beforeEach((to, from, next) =&gt; {&#10;    const isAuthenticated = !!localStorage.getItem('token'); // Vérifie si un token est stocké&#10;&#10;    if (to.meta.requiresAuth &amp;&amp; !isAuthenticated) {&#10;        next({ name: 'login' }); // Rediriger vers la connexion si l'utilisateur n'est pas connecté&#10;    } else if (to.meta.guestOnly &amp;&amp; isAuthenticated) {&#10;        next({ name: 'dashboard' }); // Rediriger un utilisateur connecté vers le dashboard&#10;    } else {&#10;        next(); // Continuer normalement&#10;    }&#10;}); */&#10;export default router;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/views/AddBet.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/views/AddBet.vue" />
              <option name="updatedContent" value="&lt;template&gt;&#10;  &lt;AddBetForm /&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script setup&gt;&#10;import AddBetForm from '@/components/add-bet/AddBetForm.vue';&#10;&lt;/script&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/views/profile/infos.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/views/profile/infos.vue" />
              <option name="originalContent" value="&lt;script setup&gt;&#10;import { ref } from 'vue';&#10;import settingsData from '@/data/settings.json';&#10;import Button from 'primevue/button';&#10;import Select from 'primevue/select';&#10;import Fluid from 'primevue/fluid'&#10;import Menu from 'primevue/menu';&#10;&#10;const subscriptionOptions = ref(settingsData.subscriptionOptions);&#10;const selectedOption = ref(null);&#10;&#10;const userProfile = ref({&#10;    avatar: '',&#10;    firstName: 'John',&#10;    lastName: 'Doe',&#10;    email: 'johndoe@example.com',&#10;    username: 'johndoe',&#10;    level: 'Expert',&#10;    id: 1 // à remplacer par l'ID réel de l'utilisateur&#10;});&#10;&#10;const getAvatarUrl = () =&gt; {&#10;    // Chemin de l'avatar personnalisé&#10;    const customAvatar = `${import.meta.env.VITE_API_BASE_URL}/storage/avatar/${userProfile.value.id}.jpg`;&#10;    // Chemin de l'avatar par défaut&#10;    const defaultAvatar = `${import.meta.env.VITE_API_BASE_URL}/storage/avatar/user.jpg`;&#10;    return userProfile.value.avatar || customAvatar;&#10;};&#10;&#10;const languageOptions = ref(settingsData.languageOptions);&#10;const selectedLanguage = ref(settingsData.defaultLanguage);&#10;&#10;const currencyOptions = ref(settingsData.currencyOptions);&#10;const selectedCurrency = ref(settingsData.defaultCurrency);&#10;&#10;const homepageOptions = ref([&#10;    { name: 'Gestion des paris', slug: 'bet-management' },&#10;    { name: 'Trouver mon pari', slug: 'find-my-bet' },&#10;    { name: 'Tableau de bord', slug: 'dashboard' },&#10;    { name: 'Scores en direct', slug: 'live-scores' },&#10;    { name: 'Profil', slug: 'profile' },&#10;    ...settingsData.homepageOptions&#10;]);&#10;const selectedHomepage = ref(settingsData.defaultHomepage);&#10;&#10;const timezoneOptions = ref(settingsData.timezoneOptions);&#10;const selectedTimezone = ref(settingsData.defaultTimezone);&#10;&#10;const displayBetViewOptions = ref(settingsData.displayBetViewOptions);&#10;const selectedDisplayBetView = ref(settingsData.defaultDisplayBetView);&#10;&#10;const displayDashboardOptions = ref(settingsData.displayDashboardOptions);&#10;const selectedDisplayDashboard = ref(settingsData.defaultDisplayDashboard);&#10;&#10;const duplicateBetDateOptions = ref(settingsData.duplicateBetDateOptions);&#10;const selectedDuplicateBetDate = ref(settingsData.defaultDuplicateBetDate);&#10;&#10;const menu = ref();&#10;const menuItems = [&#10;    {&#10;        label: 'Modifier l\'avatar',&#10;        icon: 'pi pi-pencil',&#10;        command: () =&gt; handleEditAvatar()&#10;    },&#10;    {&#10;        label: 'Supprimer l\'avatar',&#10;        icon: 'pi pi-trash',&#10;        command: () =&gt; handleDeleteAvatar()&#10;    }&#10;];&#10;&#10;function showMenu(event) {&#10;    menu.value.toggle(event);&#10;    document.addEventListener('click', hideMenuOnClickOutside);&#10;}&#10;&#10;function hideMenuOnClickOutside(e) {&#10;    if (!menu.value.$el.contains(e.target) &amp;&amp; e.target !== document.getElementById('avatarImg')) {&#10;        menu.value.hide();&#10;        document.removeEventListener('click', hideMenuOnClickOutside);&#10;    }&#10;}&#10;&#10;function handleEditAvatar() {&#10;    // Déclenche l'ouverture du gestionnaire de fichiers&#10;    document.getElementById('avatarInput').click();&#10;}&#10;&#10;function handleDeleteAvatar() {&#10;    userProfile.value.avatar = '';&#10;}&#10;&#10;function onAvatarSelected(event) {&#10;    const file = event.target.files[0];&#10;    if (file) {&#10;        const reader = new FileReader();&#10;        reader.onload = (e) =&gt; {&#10;            userProfile.value.avatar = e.target.result;&#10;        };&#10;        reader.readAsDataURL(file);&#10;    }&#10;}&#10;&#10;function onAvatarError(e) {&#10;    e.target.src = `${import.meta.env.VITE_API_BASE_URL}/storage/avatar/user.jpg`;&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;template&gt;&#10;    &lt;Fluid&gt;&#10;        &lt;div class=&quot;flex flex-col gap-8&quot;&gt;&#10;            &lt;div class=&quot;card flex flex-col items-center gap-4 w-full p-6&quot;&gt;&#10;                &lt;img :src=&quot;getAvatarUrl()&quot; alt=&quot;Avatar&quot; class=&quot;w-24 h-24 rounded-full border-2 border-gray-300&quot; id=&quot;avatarImg&quot; @click=&quot;showMenu($event)&quot; @error=&quot;onAvatarError&quot; /&gt;&#10;                &lt;Menu :model=&quot;menuItems&quot; ref=&quot;menu&quot; :popup=&quot;true&quot; /&gt;&#10;                &lt;div class=&quot;text-xl font-semibold&quot;&gt;{{ userProfile.firstName }} {{ userProfile.lastName }}&lt;/div&gt;&#10;                &lt;div class=&quot;text-gray-500&quot;&gt;{{ userProfile.email }}&lt;/div&gt;&#10;                &lt;div class=&quot;text-gray-500&quot;&gt;@{{ userProfile.username }}&lt;/div&gt;&#10;                &lt;div class=&quot;text-gray-700 font-semibold&quot;&gt;Niveau: {{ userProfile.level }}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;card flex flex-col gap-4 w-full&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Abonnement&lt;/div&gt;&#10;                &lt;div class=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;                    &lt;Button v-for=&quot;option in subscriptionOptions&quot; :key=&quot;option.slug&quot; @click=&quot;selectedOption = option.slug&quot;&#10;                            :class=&quot;{'bg-blue-500 text-white': selectedOption === option.slug}&quot;&#10;                            class=&quot;w-full p-2 border rounded-md&quot;&gt;&#10;                        {{ option.name }}&#10;                    &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4 w-full&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Paramètres&lt;/div&gt;&#10;                &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                    &lt;div&gt;&#10;                        &lt;label&gt;Choisissez votre langue&lt;/label&gt;&#10;                        &lt;Select v-model=&quot;selectedLanguage&quot; :options=&quot;languageOptions&quot; optionLabel=&quot;name&quot; optionValue=&quot;slug&quot; class=&quot;w-full&quot;&gt;&lt;/Select&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                        &lt;label&gt;Choisissez votre devise globale&lt;/label&gt;&#10;                        &lt;Select v-model=&quot;selectedCurrency&quot; :options=&quot;currencyOptions&quot; optionLabel=&quot;name&quot; optionValue=&quot;slug&quot; class=&quot;w-full&quot;&gt;&lt;/Select&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                        &lt;label&gt;Choisissez votre page d'accueil&lt;/label&gt;&#10;                        &lt;Select v-model=&quot;selectedHomepage&quot; :options=&quot;homepageOptions&quot; optionLabel=&quot;name&quot; optionValue=&quot;slug&quot; class=&quot;w-full&quot;&gt;&lt;/Select&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                        &lt;label&gt;Fuseau horaire&lt;/label&gt;&#10;                        &lt;Select v-model=&quot;selectedTimezone&quot; :options=&quot;timezoneOptions&quot; optionLabel=&quot;name&quot; optionValue=&quot;slug&quot; class=&quot;w-full&quot;&gt;&lt;/Select&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                        &lt;label&gt;Affichage par défaut des paris&lt;/label&gt;&#10;                        &lt;Select v-model=&quot;selectedDisplayBetView&quot; :options=&quot;displayBetViewOptions&quot; optionLabel=&quot;name&quot; optionValue=&quot;slug&quot; class=&quot;w-full&quot;&gt;&lt;/Select&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                        &lt;label&gt;Affichage par défaut du tableau de bord&lt;/label&gt;&#10;                        &lt;Select v-model=&quot;selectedDisplayDashboard&quot; :options=&quot;displayDashboardOptions&quot; optionLabel=&quot;name&quot; optionValue=&quot;slug&quot; class=&quot;w-full&quot;&gt;&lt;/Select&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                        &lt;label&gt;Date de duplication d'un pari&lt;/label&gt;&#10;                        &lt;Select v-model=&quot;selectedDuplicateBetDate&quot; :options=&quot;duplicateBetDateOptions&quot; optionLabel=&quot;name&quot; optionValue=&quot;slug&quot; class=&quot;w-full&quot;&gt;&lt;/Select&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;input type=&quot;file&quot; id=&quot;avatarInput&quot; style=&quot;display:none&quot; @change=&quot;onAvatarSelected&quot; /&gt;&#10;        &lt;/div&gt;&#10;    &lt;/Fluid&gt;&#10;&lt;/template&gt;&#10;" />
              <option name="updatedContent" value="&lt;script setup&gt;&#10;import { ref } from 'vue';&#10;import settingsData from '@/data/settings.json';&#10;import Button from 'primevue/button';&#10;import Select from 'primevue/select';&#10;import Fluid from 'primevue/fluid'&#10;import Menu from 'primevue/menu';&#10;&#10;const subscriptionOptions = ref(settingsData.subscriptionOptions);&#10;const selectedOption = ref(null);&#10;&#10;const userProfile = ref({&#10;    avatar: '',&#10;    firstName: 'John',&#10;    lastName: 'Doe',&#10;    email: 'johndoe@example.com',&#10;    username: 'johndoe',&#10;    level: 'Expert',&#10;    id: 1 // à remplacer par l'ID réel de l'utilisateur&#10;});&#10;&#10;const getAvatarUrl = () =&gt; {&#10;    // Chemin de l'avatar personnalisé&#10;    const customAvatar = `${import.meta.env.VITE_API_BASE_URL}/storage/avatar/${userProfile.value.id}.jpg`;&#10;    // Chemin de l'avatar par défaut&#10;    const defaultAvatar = `${import.meta.env.VITE_API_BASE_URL}/storage/avatar/user.jpg`;&#10;    return userProfile.value.avatar || customAvatar;&#10;};&#10;&#10;const languageOptions = ref(settingsData.languageOptions);&#10;const selectedLanguage = ref(settingsData.defaultLanguage);&#10;&#10;const currencyOptions = ref(settingsData.currencyOptions);&#10;const selectedCurrency = ref(settingsData.defaultCurrency);&#10;&#10;const homepageOptions = ref([&#10;    { name: 'Gestion des paris', slug: 'bet-management' },&#10;    { name: 'Trouver mon pari', slug: 'find-my-bet' },&#10;    { name: 'Tableau de bord', slug: 'dashboard' },&#10;    { name: 'Scores en direct', slug: 'live-scores' },&#10;    { name: 'Profil', slug: 'profile' },&#10;    ...settingsData.homepageOptions&#10;]);&#10;const selectedHomepage = ref(settingsData.defaultHomepage);&#10;&#10;const timezoneOptions = ref(settingsData.timezoneOptions);&#10;const selectedTimezone = ref(settingsData.defaultTimezone);&#10;&#10;const displayBetViewOptions = ref(settingsData.displayBetViewOptions);&#10;const selectedDisplayBetView = ref(settingsData.defaultDisplayBetView);&#10;&#10;const displayDashboardOptions = ref(settingsData.displayDashboardOptions);&#10;const selectedDisplayDashboard = ref(settingsData.defaultDisplayDashboard);&#10;&#10;const duplicateBetDateOptions = ref(settingsData.duplicateBetDateOptions);&#10;const selectedDuplicateBetDate = ref(settingsData.defaultDuplicateBetDate);&#10;&#10;const menu = ref();&#10;const menuItems = [&#10;    {&#10;        label: 'Modifier l\'avatar',&#10;        icon: 'pi pi-pencil',&#10;        command: () =&gt; handleEditAvatar()&#10;    },&#10;    {&#10;        label: 'Supprimer l\'avatar',&#10;        icon: 'pi pi-trash',&#10;        command: () =&gt; handleDeleteAvatar()&#10;    }&#10;];&#10;&#10;function showMenu(event) {&#10;    menu.value.toggle(event);&#10;    document.addEventListener('click', hideMenuOnClickOutside);&#10;}&#10;&#10;function hideMenuOnClickOutside(e) {&#10;    if (!menu.value.$el.contains(e.target) &amp;&amp; e.target !== document.getElementById('avatarImg')) {&#10;        menu.value.hide();&#10;        document.removeEventListener('click', hideMenuOnClickOutside);&#10;    }&#10;}&#10;&#10;function handleEditAvatar() {&#10;    // Déclenche l'ouverture du gestionnaire de fichiers&#10;    document.getElementById('avatarInput').click();&#10;}&#10;&#10;function handleDeleteAvatar() {&#10;    userProfile.value.avatar = '';&#10;}&#10;&#10;async function onAvatarSelected(event) {&#10;    const file = event.target.files[0];&#10;    if (!file) return;&#10;&#10;    const formData = new FormData();&#10;    formData.append('avatar', file);&#10;&#10;    const token = localStorage.getItem('token');&#10;    try {&#10;        const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/user/avatar`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Authorization': `Bearer ${token}`&#10;            },&#10;            body: formData&#10;        });&#10;        const data = await response.json();&#10;        if (data.success) {&#10;            userProfile.value.avatar = data.avatar_url;&#10;        }&#10;    } catch (error) {&#10;        // Gérer l'erreur d'upload&#10;        console.error('Erreur upload avatar:', error);&#10;    }&#10;}&#10;&#10;function onAvatarError(e) {&#10;    e.target.src = `${import.meta.env.VITE_API_BASE_URL}/storage/avatar/user.jpg`;&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;template&gt;&#10;    &lt;Fluid&gt;&#10;        &lt;div class=&quot;flex flex-col gap-8&quot;&gt;&#10;            &lt;div class=&quot;card flex flex-col items-center gap-4 w-full p-6&quot;&gt;&#10;                &lt;img :src=&quot;getAvatarUrl()&quot; alt=&quot;Avatar&quot; class=&quot;w-24 h-24 rounded-full border-2 border-gray-300&quot; id=&quot;avatarImg&quot; @click=&quot;showMenu($event)&quot; @error=&quot;onAvatarError&quot; /&gt;&#10;                &lt;Menu :model=&quot;menuItems&quot; ref=&quot;menu&quot; :popup=&quot;true&quot; /&gt;&#10;                &lt;div class=&quot;text-xl font-semibold&quot;&gt;{{ userProfile.firstName }} {{ userProfile.lastName }}&lt;/div&gt;&#10;                &lt;div class=&quot;text-gray-500&quot;&gt;{{ userProfile.email }}&lt;/div&gt;&#10;                &lt;div class=&quot;text-gray-500&quot;&gt;@{{ userProfile.username }}&lt;/div&gt;&#10;                &lt;div class=&quot;text-gray-700 font-semibold&quot;&gt;Niveau: {{ userProfile.level }}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;card flex flex-col gap-4 w-full&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Abonnement&lt;/div&gt;&#10;                &lt;div class=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;                    &lt;Button v-for=&quot;option in subscriptionOptions&quot; :key=&quot;option.slug&quot; @click=&quot;selectedOption = option.slug&quot;&#10;                            :class=&quot;{'bg-blue-500 text-white': selectedOption === option.slug}&quot;&#10;                            class=&quot;w-full p-2 border rounded-md&quot;&gt;&#10;                        {{ option.name }}&#10;                    &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4 w-full&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Paramètres&lt;/div&gt;&#10;                &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                    &lt;div&gt;&#10;                        &lt;label&gt;Choisissez votre langue&lt;/label&gt;&#10;                        &lt;Select v-model=&quot;selectedLanguage&quot; :options=&quot;languageOptions&quot; optionLabel=&quot;name&quot; optionValue=&quot;slug&quot; class=&quot;w-full&quot;&gt;&lt;/Select&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                        &lt;label&gt;Choisissez votre devise globale&lt;/label&gt;&#10;                        &lt;Select v-model=&quot;selectedCurrency&quot; :options=&quot;currencyOptions&quot; optionLabel=&quot;name&quot; optionValue=&quot;slug&quot; class=&quot;w-full&quot;&gt;&lt;/Select&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                        &lt;label&gt;Choisissez votre page d'accueil&lt;/label&gt;&#10;                        &lt;Select v-model=&quot;selectedHomepage&quot; :options=&quot;homepageOptions&quot; optionLabel=&quot;name&quot; optionValue=&quot;slug&quot; class=&quot;w-full&quot;&gt;&lt;/Select&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                        &lt;label&gt;Fuseau horaire&lt;/label&gt;&#10;                        &lt;Select v-model=&quot;selectedTimezone&quot; :options=&quot;timezoneOptions&quot; optionLabel=&quot;name&quot; optionValue=&quot;slug&quot; class=&quot;w-full&quot;&gt;&lt;/Select&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                        &lt;label&gt;Affichage par défaut des paris&lt;/label&gt;&#10;                        &lt;Select v-model=&quot;selectedDisplayBetView&quot; :options=&quot;displayBetViewOptions&quot; optionLabel=&quot;name&quot; optionValue=&quot;slug&quot; class=&quot;w-full&quot;&gt;&lt;/Select&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                        &lt;label&gt;Affichage par défaut du tableau de bord&lt;/label&gt;&#10;                        &lt;Select v-model=&quot;selectedDisplayDashboard&quot; :options=&quot;displayDashboardOptions&quot; optionLabel=&quot;name&quot; optionValue=&quot;slug&quot; class=&quot;w-full&quot;&gt;&lt;/Select&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                        &lt;label&gt;Date de duplication d'un pari&lt;/label&gt;&#10;                        &lt;Select v-model=&quot;selectedDuplicateBetDate&quot; :options=&quot;duplicateBetDateOptions&quot; optionLabel=&quot;name&quot; optionValue=&quot;slug&quot; class=&quot;w-full&quot;&gt;&lt;/Select&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;input type=&quot;file&quot; id=&quot;avatarInput&quot; style=&quot;display:none&quot; @change=&quot;onAvatarSelected&quot; /&gt;&#10;        &lt;/div&gt;&#10;    &lt;/Fluid&gt;&#10;&lt;/template&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/views/uikit/ButtonDoc.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/views/uikit/ButtonDoc.vue" />
              <option name="originalContent" value="&lt;script setup&gt;&#10;import { ref } from 'vue';&#10;&#10;const items = ref([&#10;    {&#10;        label: 'Update',&#10;        icon: 'pi pi-refresh'&#10;    },&#10;    {&#10;        label: 'Delete',&#10;        icon: 'pi pi-times'&#10;    },&#10;    {&#10;        separator: true&#10;    },&#10;    {&#10;        label: 'Home',&#10;        icon: 'pi pi-home'&#10;    }&#10;]);&#10;&#10;const loading = ref([false, false, false]);&#10;&#10;function load(index) {&#10;    loading.value[index] = true;&#10;    setTimeout(() =&gt; (loading.value[index] = false), 1000);&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;template&gt;&#10;    &lt;div class=&quot;flex flex-col md:flex-row gap-8&quot;&gt;&#10;        &lt;div class=&quot;md:w-1/2&quot;&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Default&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button label=&quot;Submit&quot;&gt;&lt;/Button&gt;&#10;                    &lt;Button label=&quot;Disabled&quot; :disabled=&quot;true&quot;&gt;&lt;/Button&gt;&#10;                    &lt;Button label=&quot;Link&quot; class=&quot;p-button-link&quot; /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Severities&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button label=&quot;Primary&quot; /&gt;&#10;                    &lt;Button label=&quot;Secondary&quot; severity=&quot;secondary&quot; /&gt;&#10;                    &lt;Button label=&quot;Success&quot; severity=&quot;success&quot; /&gt;&#10;                    &lt;Button label=&quot;Info&quot; severity=&quot;info&quot; /&gt;&#10;                    &lt;Button label=&quot;Warn&quot; severity=&quot;warn&quot; /&gt;&#10;                    &lt;Button label=&quot;Help&quot; severity=&quot;help&quot; /&gt;&#10;                    &lt;Button label=&quot;Danger&quot; severity=&quot;danger&quot; /&gt;&#10;                    &lt;Button label=&quot;Contrast&quot; severity=&quot;contrast&quot; /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Text&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button label=&quot;Primary&quot; text /&gt;&#10;                    &lt;Button label=&quot;Secondary&quot; severity=&quot;secondary&quot; text /&gt;&#10;                    &lt;Button label=&quot;Success&quot; severity=&quot;success&quot; text /&gt;&#10;                    &lt;Button label=&quot;Info&quot; severity=&quot;info&quot; text /&gt;&#10;                    &lt;Button label=&quot;Warn&quot; severity=&quot;warn&quot; text /&gt;&#10;                    &lt;Button label=&quot;Help&quot; severity=&quot;help&quot; text /&gt;&#10;                    &lt;Button label=&quot;Danger&quot; severity=&quot;danger&quot; text /&gt;&#10;                    &lt;Button label=&quot;Plain&quot; plain text /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Outlined&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button label=&quot;Primary&quot; outlined /&gt;&#10;                    &lt;Button label=&quot;Secondary&quot; severity=&quot;secondary&quot; outlined /&gt;&#10;                    &lt;Button label=&quot;Success&quot; severity=&quot;success&quot; outlined /&gt;&#10;                    &lt;Button label=&quot;Info&quot; severity=&quot;info&quot; outlined /&gt;&#10;                    &lt;Button label=&quot;warn&quot; severity=&quot;warn&quot; outlined /&gt;&#10;                    &lt;Button label=&quot;Help&quot; severity=&quot;help&quot; outlined /&gt;&#10;                    &lt;Button label=&quot;Danger&quot; severity=&quot;danger&quot; outlined /&gt;&#10;                    &lt;Button label=&quot;Contrast&quot; severity=&quot;contrast&quot; outlined /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Group&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;ButtonGroup&gt;&#10;                        &lt;Button label=&quot;Save&quot; icon=&quot;pi pi-check&quot; /&gt;&#10;                        &lt;Button label=&quot;Delete&quot; icon=&quot;pi pi-trash&quot; /&gt;&#10;                        &lt;Button label=&quot;Cancel&quot; icon=&quot;pi pi-times&quot; /&gt;&#10;                    &lt;/ButtonGroup&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;SplitButton&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;SplitButton label=&quot;Save&quot; :model=&quot;items&quot;&gt;&lt;/SplitButton&gt;&#10;                    &lt;SplitButton label=&quot;Save&quot; :model=&quot;items&quot; severity=&quot;secondary&quot;&gt;&lt;/SplitButton&gt;&#10;                    &lt;SplitButton label=&quot;Save&quot; :model=&quot;items&quot; severity=&quot;success&quot;&gt;&lt;/SplitButton&gt;&#10;                    &lt;SplitButton label=&quot;Save&quot; :model=&quot;items&quot; severity=&quot;info&quot;&gt;&lt;/SplitButton&gt;&#10;                    &lt;SplitButton label=&quot;Save&quot; :model=&quot;items&quot; severity=&quot;warn&quot;&gt;&lt;/SplitButton&gt;&#10;                    &lt;SplitButton label=&quot;Save&quot; :model=&quot;items&quot; severity=&quot;help&quot;&gt;&lt;/SplitButton&gt;&#10;                    &lt;SplitButton label=&quot;Save&quot; :model=&quot;items&quot; severity=&quot;danger&quot;&gt;&lt;/SplitButton&gt;&#10;                    &lt;SplitButton label=&quot;Save&quot; :model=&quot;items&quot; severity=&quot;contrast&quot;&gt;&lt;/SplitButton&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Templating&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button type=&quot;button&quot;&gt;&#10;                        &lt;img alt=&quot;logo&quot; src=&quot;/demo/images/logo-white.svg&quot; style=&quot;width: 1.5rem&quot; /&gt;&#10;                    &lt;/Button&gt;&#10;                    &lt;Button type=&quot;button&quot; outlined severity=&quot;success&quot;&gt;&#10;                        &lt;img alt=&quot;logo&quot; src=&quot;/demo/images/logo.svg&quot; style=&quot;width: 1.5rem&quot; /&gt;&#10;                        &lt;span class=&quot;ml-2 text-bold&quot;&gt;PrimeVue&lt;/span&gt;&#10;                    &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;md:w-1/2&quot;&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Icons&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button icon=&quot;pi pi-star-fill&quot; class=&quot;mr-2 mb-2&quot;&gt;&lt;/Button&gt;&#10;                    &lt;Button label=&quot;Bookmark&quot; icon=&quot;pi pi-bookmark&quot; class=&quot;mr-2 mb-2&quot;&gt;&lt;/Button&gt;&#10;                    &lt;Button label=&quot;Bookmark&quot; icon=&quot;pi pi-bookmark&quot; iconPos=&quot;right&quot; class=&quot;mr-2 mb-2&quot;&gt;&lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Raised&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button label=&quot;Primary&quot; raised /&gt;&#10;                    &lt;Button label=&quot;Secondary&quot; severity=&quot;secondary&quot; raised /&gt;&#10;                    &lt;Button label=&quot;Success&quot; severity=&quot;success&quot; raised /&gt;&#10;                    &lt;Button label=&quot;Info&quot; severity=&quot;info&quot; raised /&gt;&#10;                    &lt;Button label=&quot;Warn&quot; severity=&quot;warn&quot; raised /&gt;&#10;                    &lt;Button label=&quot;Help&quot; severity=&quot;help&quot; raised /&gt;&#10;                    &lt;Button label=&quot;Danger&quot; severity=&quot;danger&quot; raised /&gt;&#10;                    &lt;Button label=&quot;Contrast&quot; severity=&quot;contrast&quot; raised /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Rounded&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button label=&quot;Primary&quot; rounded /&gt;&#10;                    &lt;Button label=&quot;Secondary&quot; severity=&quot;secondary&quot; rounded /&gt;&#10;                    &lt;Button label=&quot;Success&quot; severity=&quot;success&quot; rounded /&gt;&#10;                    &lt;Button label=&quot;Info&quot; severity=&quot;info&quot; rounded /&gt;&#10;                    &lt;Button label=&quot;Warn&quot; severity=&quot;warn&quot; rounded /&gt;&#10;                    &lt;Button label=&quot;Help&quot; severity=&quot;help&quot; rounded /&gt;&#10;                    &lt;Button label=&quot;Danger&quot; severity=&quot;danger&quot; rounded /&gt;&#10;                    &lt;Button label=&quot;Contrast&quot; severity=&quot;contrast&quot; rounded /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Rounded Icons&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button icon=&quot;pi pi-check&quot; rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-bookmark&quot; severity=&quot;secondary&quot; rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-search&quot; severity=&quot;success&quot; rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-user&quot; severity=&quot;info&quot; rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-bell&quot; severity=&quot;warn&quot; rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-heart&quot; severity=&quot;help&quot; rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-times&quot; severity=&quot;danger&quot; rounded /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Rounded Text&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button icon=&quot;pi pi-check&quot; text raised rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-bookmark&quot; severity=&quot;secondary&quot; text raised rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-search&quot; severity=&quot;success&quot; text raised rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-user&quot; severity=&quot;info&quot; text raised rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-bell&quot; severity=&quot;warn&quot; text raised rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-heart&quot; severity=&quot;help&quot; text raised rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-times&quot; severity=&quot;danger&quot; text raised rounded /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Rounded Outlined&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button icon=&quot;pi pi-check&quot; rounded outlined /&gt;&#10;                    &lt;Button icon=&quot;pi pi-bookmark&quot; severity=&quot;secondary&quot; rounded outlined /&gt;&#10;                    &lt;Button icon=&quot;pi pi-search&quot; severity=&quot;success&quot; rounded outlined /&gt;&#10;                    &lt;Button icon=&quot;pi pi-user&quot; severity=&quot;info&quot; rounded outlined /&gt;&#10;                    &lt;Button icon=&quot;pi pi-bell&quot; severity=&quot;warn&quot; rounded outlined /&gt;&#10;                    &lt;Button icon=&quot;pi pi-heart&quot; severity=&quot;help&quot; rounded outlined /&gt;&#10;                    &lt;Button icon=&quot;pi pi-times&quot; severity=&quot;danger&quot; rounded outlined /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Loading&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button type=&quot;button&quot; class=&quot;mr-2 mb-2&quot; label=&quot;Search&quot; icon=&quot;pi pi-search&quot; :loading=&quot;loading[0]&quot; @click=&quot;load(0)&quot; /&gt;&#10;                    &lt;Button type=&quot;button&quot; class=&quot;mr-2 mb-2&quot; label=&quot;Search&quot; icon=&quot;pi pi-search&quot; iconPos=&quot;right&quot; :loading=&quot;loading[1]&quot; @click=&quot;load(1)&quot; /&gt;&#10;                    &lt;Button type=&quot;button&quot; class=&quot;mr-2 mb-2&quot; icon=&quot;pi pi-search&quot; :loading=&quot;loading[2]&quot; @click=&quot;load(2)&quot; /&gt;&#10;                    &lt;Button type=&quot;button&quot; class=&quot;mr-2 mb-2&quot; label=&quot;Search&quot; :loading=&quot;loading[3]&quot; @click=&quot;load(3)&quot; /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/template&gt;&#10;" />
              <option name="updatedContent" value="&lt;script setup&gt;&#10;import { ref } from 'vue';&#10;import Button from 'primevue/button';&#10;import ButtonGroup from 'primevue/buttongroup';&#10;import SplitButton from 'primevue/splitbutton';&#10;&#10;const items = ref([&#10;    {&#10;        label: 'Update',&#10;        icon: 'pi pi-refresh'&#10;    },&#10;    {&#10;        label: 'Delete',&#10;        icon: 'pi pi-times'&#10;    },&#10;    {&#10;        separator: true&#10;    },&#10;    {&#10;        label: 'Home',&#10;        icon: 'pi pi-home'&#10;    }&#10;]);&#10;&#10;const loading = ref([false, false, false]);&#10;&#10;function load(index) {&#10;    loading.value[index] = true;&#10;    setTimeout(() =&gt; (loading.value[index] = false), 1000);&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;template&gt;&#10;    &lt;div class=&quot;flex flex-col md:flex-row gap-8&quot;&gt;&#10;        &lt;div class=&quot;md:w-1/2&quot;&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Default&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button label=&quot;Submit&quot;&gt;&lt;/Button&gt;&#10;                    &lt;Button label=&quot;Disabled&quot; :disabled=&quot;true&quot;&gt;&lt;/Button&gt;&#10;                    &lt;Button label=&quot;Link&quot; class=&quot;p-button-link&quot; /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Severities&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button label=&quot;Primary&quot; /&gt;&#10;                    &lt;Button label=&quot;Secondary&quot; severity=&quot;secondary&quot; /&gt;&#10;                    &lt;Button label=&quot;Success&quot; severity=&quot;success&quot; /&gt;&#10;                    &lt;Button label=&quot;Info&quot; severity=&quot;info&quot; /&gt;&#10;                    &lt;Button label=&quot;Warn&quot; severity=&quot;warn&quot; /&gt;&#10;                    &lt;Button label=&quot;Help&quot; severity=&quot;help&quot; /&gt;&#10;                    &lt;Button label=&quot;Danger&quot; severity=&quot;danger&quot; /&gt;&#10;                    &lt;Button label=&quot;Contrast&quot; severity=&quot;contrast&quot; /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Text&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button label=&quot;Primary&quot; text /&gt;&#10;                    &lt;Button label=&quot;Secondary&quot; severity=&quot;secondary&quot; text /&gt;&#10;                    &lt;Button label=&quot;Success&quot; severity=&quot;success&quot; text /&gt;&#10;                    &lt;Button label=&quot;Info&quot; severity=&quot;info&quot; text /&gt;&#10;                    &lt;Button label=&quot;Warn&quot; severity=&quot;warn&quot; text /&gt;&#10;                    &lt;Button label=&quot;Help&quot; severity=&quot;help&quot; text /&gt;&#10;                    &lt;Button label=&quot;Danger&quot; severity=&quot;danger&quot; text /&gt;&#10;                    &lt;Button label=&quot;Plain&quot; plain text /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Outlined&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button label=&quot;Primary&quot; outlined /&gt;&#10;                    &lt;Button label=&quot;Secondary&quot; severity=&quot;secondary&quot; outlined /&gt;&#10;                    &lt;Button label=&quot;Success&quot; severity=&quot;success&quot; outlined /&gt;&#10;                    &lt;Button label=&quot;Info&quot; severity=&quot;info&quot; outlined /&gt;&#10;                    &lt;Button label=&quot;warn&quot; severity=&quot;warn&quot; outlined /&gt;&#10;                    &lt;Button label=&quot;Help&quot; severity=&quot;help&quot; outlined /&gt;&#10;                    &lt;Button label=&quot;Danger&quot; severity=&quot;danger&quot; outlined /&gt;&#10;                    &lt;Button label=&quot;Contrast&quot; severity=&quot;contrast&quot; outlined /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Group&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;ButtonGroup&gt;&#10;                        &lt;Button label=&quot;Save&quot; icon=&quot;pi pi-check&quot; /&gt;&#10;                        &lt;Button label=&quot;Delete&quot; icon=&quot;pi pi-trash&quot; /&gt;&#10;                        &lt;Button label=&quot;Cancel&quot; icon=&quot;pi pi-times&quot; /&gt;&#10;                    &lt;/ButtonGroup&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;SplitButton&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;SplitButton label=&quot;Save&quot; :model=&quot;items&quot;&gt;&lt;/SplitButton&gt;&#10;                    &lt;SplitButton label=&quot;Save&quot; :model=&quot;items&quot; severity=&quot;secondary&quot;&gt;&lt;/SplitButton&gt;&#10;                    &lt;SplitButton label=&quot;Save&quot; :model=&quot;items&quot; severity=&quot;success&quot;&gt;&lt;/SplitButton&gt;&#10;                    &lt;SplitButton label=&quot;Save&quot; :model=&quot;items&quot; severity=&quot;info&quot;&gt;&lt;/SplitButton&gt;&#10;                    &lt;SplitButton label=&quot;Save&quot; :model=&quot;items&quot; severity=&quot;warn&quot;&gt;&lt;/SplitButton&gt;&#10;                    &lt;SplitButton label=&quot;Save&quot; :model=&quot;items&quot; severity=&quot;help&quot;&gt;&lt;/SplitButton&gt;&#10;                    &lt;SplitButton label=&quot;Save&quot; :model=&quot;items&quot; severity=&quot;danger&quot;&gt;&lt;/SplitButton&gt;&#10;                    &lt;SplitButton label=&quot;Save&quot; :model=&quot;items&quot; severity=&quot;contrast&quot;&gt;&lt;/SplitButton&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Templating&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button type=&quot;button&quot;&gt;&#10;                        &lt;img alt=&quot;logo&quot; src=&quot;/demo/images/logo-white.svg&quot; style=&quot;width: 1.5rem&quot; /&gt;&#10;                    &lt;/Button&gt;&#10;                    &lt;Button type=&quot;button&quot; outlined severity=&quot;success&quot;&gt;&#10;                        &lt;img alt=&quot;logo&quot; src=&quot;/demo/images/logo.svg&quot; style=&quot;width: 1.5rem&quot; /&gt;&#10;                        &lt;span class=&quot;ml-2 text-bold&quot;&gt;PrimeVue&lt;/span&gt;&#10;                    &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;md:w-1/2&quot;&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Icons&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button icon=&quot;pi pi-star-fill&quot; class=&quot;mr-2 mb-2&quot;&gt;&lt;/Button&gt;&#10;                    &lt;Button label=&quot;Bookmark&quot; icon=&quot;pi pi-bookmark&quot; class=&quot;mr-2 mb-2&quot;&gt;&lt;/Button&gt;&#10;                    &lt;Button label=&quot;Bookmark&quot; icon=&quot;pi pi-bookmark&quot; iconPos=&quot;right&quot; class=&quot;mr-2 mb-2&quot;&gt;&lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Raised&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button label=&quot;Primary&quot; raised /&gt;&#10;                    &lt;Button label=&quot;Secondary&quot; severity=&quot;secondary&quot; raised /&gt;&#10;                    &lt;Button label=&quot;Success&quot; severity=&quot;success&quot; raised /&gt;&#10;                    &lt;Button label=&quot;Info&quot; severity=&quot;info&quot; raised /&gt;&#10;                    &lt;Button label=&quot;Warn&quot; severity=&quot;warn&quot; raised /&gt;&#10;                    &lt;Button label=&quot;Help&quot; severity=&quot;help&quot; raised /&gt;&#10;                    &lt;Button label=&quot;Danger&quot; severity=&quot;danger&quot; raised /&gt;&#10;                    &lt;Button label=&quot;Contrast&quot; severity=&quot;contrast&quot; raised /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Rounded&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button label=&quot;Primary&quot; rounded /&gt;&#10;                    &lt;Button label=&quot;Secondary&quot; severity=&quot;secondary&quot; rounded /&gt;&#10;                    &lt;Button label=&quot;Success&quot; severity=&quot;success&quot; rounded /&gt;&#10;                    &lt;Button label=&quot;Info&quot; severity=&quot;info&quot; rounded /&gt;&#10;                    &lt;Button label=&quot;Warn&quot; severity=&quot;warn&quot; rounded /&gt;&#10;                    &lt;Button label=&quot;Help&quot; severity=&quot;help&quot; rounded /&gt;&#10;                    &lt;Button label=&quot;Danger&quot; severity=&quot;danger&quot; rounded /&gt;&#10;                    &lt;Button label=&quot;Contrast&quot; severity=&quot;contrast&quot; rounded /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Rounded Icons&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button icon=&quot;pi pi-check&quot; rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-bookmark&quot; severity=&quot;secondary&quot; rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-search&quot; severity=&quot;success&quot; rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-user&quot; severity=&quot;info&quot; rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-bell&quot; severity=&quot;warn&quot; rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-heart&quot; severity=&quot;help&quot; rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-times&quot; severity=&quot;danger&quot; rounded /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Rounded Text&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button icon=&quot;pi pi-check&quot; text raised rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-bookmark&quot; severity=&quot;secondary&quot; text raised rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-search&quot; severity=&quot;success&quot; text raised rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-user&quot; severity=&quot;info&quot; text raised rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-bell&quot; severity=&quot;warn&quot; text raised rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-heart&quot; severity=&quot;help&quot; text raised rounded /&gt;&#10;                    &lt;Button icon=&quot;pi pi-times&quot; severity=&quot;danger&quot; text raised rounded /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Rounded Outlined&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button icon=&quot;pi pi-check&quot; rounded outlined /&gt;&#10;                    &lt;Button icon=&quot;pi pi-bookmark&quot; severity=&quot;secondary&quot; rounded outlined /&gt;&#10;                    &lt;Button icon=&quot;pi pi-search&quot; severity=&quot;success&quot; rounded outlined /&gt;&#10;                    &lt;Button icon=&quot;pi pi-user&quot; severity=&quot;info&quot; rounded outlined /&gt;&#10;                    &lt;Button icon=&quot;pi pi-bell&quot; severity=&quot;warn&quot; rounded outlined /&gt;&#10;                    &lt;Button icon=&quot;pi pi-heart&quot; severity=&quot;help&quot; rounded outlined /&gt;&#10;                    &lt;Button icon=&quot;pi pi-times&quot; severity=&quot;danger&quot; rounded outlined /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card flex flex-col gap-4&quot;&gt;&#10;                &lt;div class=&quot;font-semibold text-xl&quot;&gt;Loading&lt;/div&gt;&#10;                &lt;div class=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                    &lt;Button type=&quot;button&quot; class=&quot;mr-2 mb-2&quot; label=&quot;Search&quot; icon=&quot;pi pi-search&quot; :loading=&quot;loading[0]&quot; @click=&quot;load(0)&quot; /&gt;&#10;                    &lt;Button type=&quot;button&quot; class=&quot;mr-2 mb-2&quot; label=&quot;Search&quot; icon=&quot;pi pi-search&quot; iconPos=&quot;right&quot; :loading=&quot;loading[1]&quot; @click=&quot;load(1)&quot; /&gt;&#10;                    &lt;Button type=&quot;button&quot; class=&quot;mr-2 mb-2&quot; icon=&quot;pi pi-search&quot; :loading=&quot;loading[2]&quot; @click=&quot;load(2)&quot; /&gt;&#10;                    &lt;Button type=&quot;button&quot; class=&quot;mr-2 mb-2&quot; label=&quot;Search&quot; :loading=&quot;loading[3]&quot; @click=&quot;load(3)&quot; /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/template&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/Sidebar.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/Sidebar.js" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>