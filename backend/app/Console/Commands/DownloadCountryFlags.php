<?php

namespace App\Console\Commands;

use App\Models\Country;
use App\Services\CountryFlagService;
use Illuminate\Console\Command;

class DownloadCountryFlags extends Command
{
    /**
     * Le nom et la signature de la commande console.
     *
     * @var string
     */
    protected $signature = 'country:download-flags 
                            {country_id? : ID du pays sp√©cifique √† t√©l√©charger}
                            {--force : Forcer le t√©l√©chargement m√™me si le fichier existe}
                            {--all : T√©l√©charger tous les drapeaux}';

    /**
     * Description de la commande console.
     *
     * @var string
     */
    protected $description = 'T√©l√©charge les drapeaux des pays depuis l\'API Sofascore';

    /**
     * Service de t√©l√©chargement des drapeaux
     *
     * @var CountryFlagService
     */
    private CountryFlagService $flagService;

    /**
     * Constructeur
     */
    public function __construct(CountryFlagService $flagService)
    {
        parent::__construct();
        $this->flagService = $flagService;
    }

    /**
     * Ex√©cute la commande console.
     */
    public function handle(): int
    {
        $countryId = $this->argument('country_id');
        $force = $this->option('force');
        $all = $this->option('all');

        if ($all) {
            return $this->downloadAllFlags($force);
        }

        if ($countryId) {
            return $this->downloadSingleFlag($countryId, $force);
        }

        $this->error('Veuillez sp√©cifier un ID de pays ou utiliser l\'option --all');
        return Command::FAILURE;
    }

    /**
     * T√©l√©charge le drapeau d'un pays sp√©cifique
     *
     * @param int $countryId
     * @param bool $force
     * @return int
     */
    private function downloadSingleFlag(int $countryId, bool $force): int
    {
        $country = Country::find($countryId);
        
        if (!$country) {
            $this->error("Pays avec l'ID {$countryId} non trouv√©.");
            return Command::FAILURE;
        }

        if (!$country->code) {
            $this->error("Le pays '{$country->name}' n'a pas de code pays d√©fini.");
            return Command::FAILURE;
        }

        $this->info("T√©l√©chargement du drapeau pour: {$country->name} (Code: {$country->code})");

        // V√©rifier si le drapeau existe d√©j√†
        if (!$force && $this->flagService->flagExists($country)) {
            $this->warn("Le drapeau pour '{$country->name}' existe d√©j√†. Utilisez --force pour forcer le t√©l√©chargement.");
            return Command::SUCCESS;
        }

        if ($this->flagService->downloadFlag($country, $force)) {
            $this->info("‚úÖ Drapeau t√©l√©charg√© avec succ√®s pour: {$country->name}");
            $this->line("   Fichier: country_flags/{$country->id}.png");
            return Command::SUCCESS;
        } else {
            $this->error("‚ùå √âchec du t√©l√©chargement du drapeau pour: {$country->name}");
            return Command::FAILURE;
        }
    }

    /**
     * T√©l√©charge tous les drapeaux
     *
     * @param bool $force
     * @return int
     */
    private function downloadAllFlags(bool $force): int
    {
        $this->info('T√©l√©chargement de tous les drapeaux des pays...');
        
        $countries = Country::whereNotNull('code')->get();
        
        if ($countries->isEmpty()) {
            $this->warn('Aucun pays avec un code pays trouv√©.');
            return Command::SUCCESS;
        }

        $this->info("Nombre de pays √† traiter: {$countries->count()}");
        
        $progressBar = $this->output->createProgressBar($countries->count());
        $progressBar->start();

        $results = [
            'success' => 0,
            'failed' => 0,
            'skipped' => 0
        ];

        foreach ($countries as $country) {
            // V√©rifier si le drapeau existe d√©j√†
            if (!$force && $this->flagService->flagExists($country)) {
                $results['skipped']++;
            } else {
                if ($this->flagService->downloadFlag($country, $force)) {
                    $results['success']++;
                } else {
                    $results['failed']++;
                }
            }
            
            $progressBar->advance();
        }

        $progressBar->finish();
        $this->newLine(2);

        // Afficher les r√©sultats
        $this->info('üìä R√©sultats du t√©l√©chargement:');
        $this->line("   ‚úÖ Succ√®s: {$results['success']}");
        $this->line("   ‚ùå √âchecs: {$results['failed']}");
        $this->line("   ‚è≠Ô∏è  Ignor√©s: {$results['skipped']}");
        
        if ($results['failed'] > 0) {
            $this->warn('Certains t√©l√©chargements ont √©chou√©. Consultez les logs pour plus de d√©tails.');
        }

        return Command::SUCCESS;
    }
}